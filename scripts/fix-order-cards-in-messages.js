const { Client, Databases, ID, Query } = require('node-appwrite');
require('dotenv').config({ path: '.env.local' });

const client = new Client()
  .setEndpoint(process.env.NEXT_PUBLIC_APPWRITE_ENDPOINT)
  .setProject(process.env.NEXT_PUBLIC_APPWRITE_PROJECT_ID)
  .setKey(process.env.APPWRITE_API_KEY);

const databases = new Databases(client);
const DATABASE_ID = process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID;

async function fixOrderCardsInMessages() {
  console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ –∑–∞–∫–∞–∑–æ–≤ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö...\n');
  
  try {
    // 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const users = await databases.listDocuments(
      DATABASE_ID,
      process.env.NEXT_PUBLIC_APPWRITE_USERS_COLLECTION_ID
    );
    console.log(`üë• –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.documents.length}`);

    // 2. –ü–æ–ª—É—á–∞–µ–º jobs —Å –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–º–∏ —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–∞–º–∏
    const jobs = await databases.listDocuments(
      DATABASE_ID,
      'jobs',
      [Query.isNotNull('assignedFreelancer')]
    );
    console.log(`üíº Jobs —Å —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–∞–º–∏: ${jobs.documents.length}`);

    // 3. –ü–æ–ª—É—á–∞–µ–º AI –∑–∞–∫–∞–∑—ã
    const orders = await databases.listDocuments(DATABASE_ID, 'orders');
    console.log(`ü§ñ AI –∑–∞–∫–∞–∑—ã: ${orders.documents.length}`);

    // 4. –°–æ–∑–¥–∞–µ–º –±–µ—Å–µ–¥—ã –∏ –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è jobs
    let createdJobConversations = 0;
    let createdJobCards = 0;

    for (const job of jobs.documents) {
      try {
        if (!job.assignedFreelancer || !job.clientId) continue;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –±–µ—Å–µ–¥–∞
        const existingConversation = await databases.listDocuments(
          DATABASE_ID,
          'conversations',
          [
            Query.equal('job_id', job.$id),
            Query.contains('participants', job.clientId),
            Query.contains('participants', job.assignedFreelancer)
          ]
        );

        let conversationId;
        
        if (existingConversation.documents.length === 0) {
          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –±–µ—Å–µ–¥—É
          const newConversation = await databases.createDocument(
            DATABASE_ID,
            'conversations',
            ID.unique(),
            {
              participants: [job.clientId, job.assignedFreelancer],
              job_id: job.$id,
              title: `–†–∞–±–æ—Ç–∞: ${job.title}`,
              last_message: '',
              last_message_time: new Date().toISOString(),
              unread_count: JSON.stringify({
                [job.clientId]: 1,
                [job.assignedFreelancer]: 1
              }),
              is_archived: false,
              created_at: new Date().toISOString(),
              updated_at: new Date().toISOString()
            }
          );
          conversationId = newConversation.$id;
          createdJobConversations++;
          console.log(`  ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –±–µ—Å–µ–¥–∞ –¥–ª—è job ${job.$id}`);
        } else {
          conversationId = existingConversation.documents[0].$id;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–∞—Ä—Ç–æ—á–∫–∞ job –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
        const existingJobCard = await databases.listDocuments(
          DATABASE_ID,
          'messages',
          [
            Query.equal('conversationId', conversationId),
            Query.equal('messageType', 'job_card')
          ]
        );

        if (existingJobCard.documents.length === 0) {
          // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–µ
          let freelancerName = '–§—Ä–∏–ª–∞–Ω—Å–µ—Ä';
          try {
            const freelancer = await databases.getDocument(
              DATABASE_ID,
              process.env.NEXT_PUBLIC_APPWRITE_USERS_COLLECTION_ID,
              job.assignedFreelancer
            );
            freelancerName = freelancer.name;
          } catch (error) {
            console.warn(`–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä ${job.assignedFreelancer}`);
          }

          // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É job
          const jobCardData = {
            jobId: job.$id,
            jobTitle: job.title,
            budget: `$${job.budgetMin} - $${job.budgetMax}`,
            freelancerName: freelancerName,
            freelancerId: job.assignedFreelancer,
            clientName: job.clientName,
            clientId: job.clientId,
            status: job.status || 'active',
            category: job.category,
            skills: job.skills || [],
            description: job.description,
            deadline: job.deadline,
            createdAt: job.$createdAt,
            assignedAt: new Date().toISOString()
          };

          await databases.createDocument(
            DATABASE_ID,
            'messages',
            ID.unique(),
            {
              senderId: job.clientId,
              receiverId: job.assignedFreelancer,
              conversationId: conversationId,
              content: `üíº –†–∞–±–æ—Ç–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞: ${job.title}`,
              messageType: 'job_card',
              jobCardData: JSON.stringify(jobCardData),
              isRead: false,
              createdAt: job.$createdAt,
              isDeleted: false,
              attachments: JSON.stringify([])
            }
          );

          createdJobCards++;
          console.log(`  ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ job –¥–ª—è ${job.$id}`);
        }

      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ job ${job.$id}:`, error.message);
      }
    }

    // 5. –°–æ–∑–¥–∞–µ–º –±–µ—Å–µ–¥—ã –∏ –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è AI –∑–∞–∫–∞–∑–æ–≤
    let createdAIConversations = 0;
    let createdAICards = 0;

    for (const order of orders.documents) {
      try {
        if (!order.userId) continue;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ AI –±–µ—Å–µ–¥–∞
        const existingAIConversation = await databases.listDocuments(
          DATABASE_ID,
          'ai_conversations',
          [
            Query.equal('user_id', order.userId),
            Query.equal('order_id', order.$id)
          ]
        );

        let aiConversationId;
        
        if (existingAIConversation.documents.length === 0) {
          // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é AI –±–µ—Å–µ–¥—É
          const newAIConversation = await databases.createDocument(
            DATABASE_ID,
            'ai_conversations',
            ID.unique(),
            {
              user_id: order.userId,
              specialist_id: order.specialist || 'alex-ai',
              order_id: order.$id,
              status: 'active',
              created_at: new Date().toISOString(),
              updated_at: new Date().toISOString()
            }
          );
          aiConversationId = newAIConversation.$id;
          createdAIConversations++;
          console.log(`  ‚úÖ –°–æ–∑–¥–∞–Ω–∞ AI –±–µ—Å–µ–¥–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ ${order.$id}`);
        } else {
          aiConversationId = existingAIConversation.documents[0].$id;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–∞—Ä—Ç–æ—á–∫–∞ AI –∑–∞–∫–∞–∑–∞
        const existingAICard = await databases.listDocuments(
          DATABASE_ID,
          'ai_messages',
          [
            Query.equal('conversation_id', aiConversationId),
            Query.equal('message_type', 'order_card')
          ]
        );

        if (existingAICard.documents.length === 0) {
          // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
          let userName = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
          try {
            const user = await databases.getDocument(
              DATABASE_ID,
              process.env.NEXT_PUBLIC_APPWRITE_USERS_COLLECTION_ID,
              order.userId
            );
            userName = user.name;
          } catch (error) {
            console.warn(`–ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${order.userId}`);
          }

          // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É AI –∑–∞–∫–∞–∑–∞
          const aiOrderData = {
            orderId: order.$id,
            userId: order.userId,
            specialistId: order.specialist || 'alex-ai',
            specialist: {
              id: order.specialist || 'alex-ai',
              name: order.specialistName || 'Alex AI',
              title: order.specialistTitle || 'AI Specialist',
              avatar: order.specialistAvatar || '/avatars/alex-ai.jpg'
            },
            tariff: {
              name: order.tariffName || '–°—Ç–∞–Ω–¥–∞—Ä—Ç',
              price: order.amount || 50,
              features: order.features || ['AI —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞', '–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞']
            },
            requirements: order.requirements || 'AI –∑–∞–∫–∞–∑',
            status: order.status || 'pending',
            amount: order.amount || 50,
            clientName: userName,
            conversationId: aiConversationId,
            createdAt: order.createdAt || new Date().toISOString()
          };

          await databases.createDocument(
            DATABASE_ID,
            'ai_messages',
            ID.unique(),
            {
              conversation_id: aiConversationId,
              sender_type: 'user',
              content: `ü§ñ AI –∑–∞–∫–∞–∑: ${order.title || '–ù–æ–≤—ã–π –∑–∞–∫–∞–∑'}`,
              message_type: 'order_card',
              order_data: JSON.stringify(aiOrderData),
              created_at: order.createdAt || new Date().toISOString()
            }
          );

          createdAICards++;
          console.log(`  ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ AI –∑–∞–∫–∞–∑–∞ ${order.$id}`);
        }

      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ AI –∑–∞–∫–∞–∑–∞ ${order.$id}:`, error.message);
      }
    }

    // 6. –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—É—Å—Ç—ã–º–∏ attachments
    console.log(`\nüîÑ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—É—Å—Ç—ã—Ö attachments –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö...`);
    
    const messagesWithNullAttachments = await databases.listDocuments(
      DATABASE_ID,
      'messages',
      [Query.isNull('attachments')]
    );

    for (const message of messagesWithNullAttachments.documents) {
      try {
        await databases.updateDocument(
          DATABASE_ID,
          'messages',
          message.$id,
          { attachments: JSON.stringify([]) }
        );
      } catch (error) {
        console.warn(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å attachments –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è ${message.$id}`);
      }
    }

    console.log(`  ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ ${messagesWithNullAttachments.documents.length} —Å–æ–æ–±—â–µ–Ω–∏–π`);

    // 7. –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log(`\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø:\n`);
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ –±–µ—Å–µ–¥ –¥–ª—è jobs: ${createdJobConversations}`);
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫ jobs: ${createdJobCards}`);
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ AI –±–µ—Å–µ–¥: ${createdAIConversations}`);
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫ AI –∑–∞–∫–∞–∑–æ–≤: ${createdAICards}`);

    // –ò—Ç–æ–≥–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    const finalConversations = await databases.listDocuments(DATABASE_ID, 'conversations');
    const finalAIConversations = await databases.listDocuments(DATABASE_ID, 'ai_conversations');
    const finalMessages = await databases.listDocuments(DATABASE_ID, 'messages');
    const finalAIMessages = await databases.listDocuments(DATABASE_ID, 'ai_messages');

    const jobCards = finalMessages.documents.filter(m => m.messageType === 'job_card');
    const aiOrderCards = finalAIMessages.documents.filter(m => m.message_type === 'order_card');

    console.log(`\nüìã –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:`);
    console.log(`üí¨ –û–±—ã—á–Ω—ã–µ –±–µ—Å–µ–¥—ã: ${finalConversations.documents.length}`);
    console.log(`ü§ñ AI –±–µ—Å–µ–¥—ã: ${finalAIConversations.documents.length}`);
    console.log(`üì® –û–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è: ${finalMessages.documents.length}`);
    console.log(`ü§ñ AI —Å–æ–æ–±—â–µ–Ω–∏—è: ${finalAIMessages.documents.length}`);
    console.log(`üíº –ö–∞—Ä—Ç–æ—á–∫–∏ jobs: ${jobCards.length}`);
    console.log(`ü§ñ –ö–∞—Ä—Ç–æ—á–∫–∏ AI –∑–∞–∫–∞–∑–æ–≤: ${aiOrderCards.length}`);

    console.log(`\nüéâ –ö–∞—Ä—Ç–æ—á–∫–∏ –∑–∞–∫–∞–∑–æ–≤ —É—Å–ø–µ—à–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–æ–æ–±—â–µ–Ω–∏—è!`);
    console.log(`–¢–µ–ø–µ—Ä—å –≤—ã –¥–æ–ª–∂–Ω—ã –≤–∏–¥–µ—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –≤ –±–µ—Å–µ–¥–∞—Ö.`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫:', error.message);
  }
}

fixOrderCardsInMessages().catch(console.error); 