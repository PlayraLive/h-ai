const { Client, Databases, ID, Query, Permission, Role } = require('node-appwrite');
require('dotenv').config({ path: '.env.local' });

const client = new Client()
  .setEndpoint(process.env.NEXT_PUBLIC_APPWRITE_ENDPOINT)
  .setProject(process.env.NEXT_PUBLIC_APPWRITE_PROJECT_ID)
  .setKey(process.env.APPWRITE_API_KEY);

const databases = new Databases(client);
const DATABASE_ID = process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID;

async function fixPermissionsAndTestData() {
  console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...\n');
  
  try {
    // 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const users = await databases.listDocuments(
      DATABASE_ID, 
      process.env.NEXT_PUBLIC_APPWRITE_USERS_COLLECTION_ID
    );
    console.log(`üë• –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.documents.length}`);
    
    if (users.documents.length === 0) {
      console.log('‚ö†Ô∏è –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞–±–æ—Ç—ã');
      return;
    }
    
    const testUser = users.documents[0];
    console.log(`üß™ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${testUser.name} (${testUser.$id})`);
    
    // 2. –û–±–Ω–æ–≤–ª—è–µ–º jobs —Å assignedFreelancer
    const jobs = await databases.listDocuments(DATABASE_ID, 'jobs');
    console.log(`\nüíº –ù–∞–π–¥–µ–Ω–æ jobs: ${jobs.documents.length}`);
    
    let updatedJobs = 0;
    for (const job of jobs.documents.slice(0, 5)) { // –û–±–Ω–æ–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–µ 5 jobs
      try {
        await databases.updateDocument(
          DATABASE_ID,
          'jobs',
          job.$id,
          {
            assignedFreelancer: testUser.$id,
            workStatus: 'in_progress',
            progressPercentage: Math.floor(Math.random() * 80) + 10, // 10-90%
            acceptedAt: new Date().toISOString()
          }
        );
        updatedJobs++;
        console.log(`  ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω job ${job.$id}`);
      } catch (error) {
        console.log(`  ‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è job ${job.$id}: ${error.message}`);
      }
    }
    
    console.log(`\n‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ jobs: ${updatedJobs}`);
    
    // 3. –°–æ–∑–¥–∞–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    for (const user of users.documents) {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø—Ä–æ—Ñ–∏–ª—å
        const existingProfile = await databases.listDocuments(
          DATABASE_ID,
          'user_profiles',
          [Query.equal('user_id', user.$id)]
        );
        
        if (existingProfile.documents.length === 0) {
          // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
          await databases.createDocument(
            DATABASE_ID,
            'user_profiles',
            ID.unique(),
            {
              user_id: user.$id,
              bio: `–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å –æ–ø—ã—Ç–æ–º —Ä–∞–±–æ—Ç—ã –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–∞—Ö.`,
              specializations: ['Web Development', 'UI/UX Design', 'AI Integration'],
              experience_years: Math.floor(Math.random() * 10) + 1,
              hourly_rate_min: 50,
              hourly_rate_max: 150,
              onboarding_completed: true,
              profile_completion: 90
            }
          );
          console.log(`  ‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è ${user.name}`);
        }
      } catch (error) {
        console.log(`  ‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –¥–ª—è ${user.name}: ${error.message}`);
      }
    }
    
    // 4. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ applications
    console.log(`\nüìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö applications...`);
    
    const freelancerUser = users.documents[0];
    const clientJobs = jobs.documents.slice(0, 3);
    
    for (const job of clientJobs) {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ application
        const existingApp = await databases.listDocuments(
          DATABASE_ID,
          'applications',
          [
            Query.equal('jobId', job.$id),
            Query.equal('freelancerId', freelancerUser.$id)
          ]
        );
        
        if (existingApp.documents.length === 0) {
          await databases.createDocument(
            DATABASE_ID,
            'applications',
            ID.unique(),
            {
              jobId: job.$id,
              freelancerId: freelancerUser.$id,
              freelancerName: freelancerUser.name,
              coverLetter: `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω –≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —ç—Ç–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞. –£ –º–µ–Ω—è –µ—Å—Ç—å –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å –ø–æ–¥–æ–±–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏.`,
              proposedRate: job.budgetMin || 50,
              proposedTimeline: '7 –¥–Ω–µ–π',
              status: 'accepted',
              attachments: [],
              createdAt: new Date().toISOString()
            }
          );
          console.log(`  ‚úÖ –°–æ–∑–¥–∞–Ω–∞ application –¥–ª—è job ${job.$id}`);
        }
      } catch (error) {
        console.log(`  ‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è application: ${error.message}`);
      }
    }
    
    // 5. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    console.log(`\nüìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:`);
    
    const finalJobs = await databases.listDocuments(DATABASE_ID, 'jobs');
    const assignedJobs = finalJobs.documents.filter(job => job.assignedFreelancer);
    
    const finalProfiles = await databases.listDocuments(DATABASE_ID, 'user_profiles');
    const finalApplications = await databases.listDocuments(DATABASE_ID, 'applications');
    
    console.log(`üíº –í—Å–µ–≥–æ jobs: ${finalJobs.documents.length}`);
    console.log(`üë∑ Jobs —Å –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–º–∏ —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–∞–º–∏: ${assignedJobs.length}`);
    console.log(`üë§ –ü—Ä–æ—Ñ–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${finalProfiles.documents.length}`);
    console.log(`üìù Applications: ${finalApplications.documents.length}`);
    
    console.log(`\nüéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω—ã! –¢–µ–ø–µ—Ä—å dashboard –¥–æ–ª–∂–µ–Ω —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è:', error.message);
  }
}

fixPermissionsAndTestData().catch(console.error); 