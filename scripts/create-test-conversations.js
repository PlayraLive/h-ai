const { Client, Databases, ID, Query } = require('node-appwrite');
require('dotenv').config({ path: '.env.local' });

const client = new Client()
  .setEndpoint(process.env.NEXT_PUBLIC_APPWRITE_ENDPOINT)
  .setProject(process.env.NEXT_PUBLIC_APPWRITE_PROJECT_ID)
  .setKey(process.env.APPWRITE_API_KEY);

const databases = new Databases(client);
const DATABASE_ID = process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID;

async function createTestConversations() {
  console.log('üîß –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –±–µ—Å–µ–¥ —Å –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏ –∑–∞–∫–∞–∑–æ–≤...\n');
  
  try {
    // 1. –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const users = await databases.listDocuments(
      DATABASE_ID,
      process.env.NEXT_PUBLIC_APPWRITE_USERS_COLLECTION_ID
    );
    console.log(`üë• –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.documents.length}`);

    if (users.documents.length < 2) {
      console.log('‚ö†Ô∏è –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      return;
    }

    const user1 = users.documents[0]; // –ö–ª–∏–µ–Ω—Ç
    const user2 = users.documents[1]; // –§—Ä–∏–ª–∞–Ω—Å–µ—Ä
    
    console.log(`üë§ –ö–ª–∏–µ–Ω—Ç: ${user1.name} (${user1.$id})`);
    console.log(`üë®‚Äçüíª –§—Ä–∏–ª–∞–Ω—Å–µ—Ä: ${user2.name} (${user2.$id})`);

    // 2. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –±–µ—Å–µ–¥—É
    const conversationId = ID.unique();
    
    await databases.createDocument(
      DATABASE_ID,
      'conversations',
      conversationId,
      {
        participants: [user1.$id, user2.$id],
        title: `–ë–µ—Å–µ–¥–∞: ${user1.name} –∏ ${user2.name}`,
        lastMessage: '–ù–æ–≤–∞—è –±–µ—Å–µ–¥–∞ —Å–æ–∑–¥–∞–Ω–∞',
        lastMessageAt: new Date().toISOString(),
        lastMessageBy: user1.$id,
        last_activity: new Date().toISOString(),
        unreadCount: JSON.stringify({
          [user1.$id]: 0,
          [user2.$id]: 0
        }),
        isArchived: false,
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString()
      }
    );
    
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –±–µ—Å–µ–¥–∞ ${conversationId}`);

    // 3. –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await databases.createDocument(
      DATABASE_ID,
      'messages',
      ID.unique(),
      {
        senderId: user1.$id,
        sender_id: user1.$id,
        receiverId: user2.$id,
        conversationId: conversationId,
        conversation_id: conversationId,
        content: 'üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è –±–µ—Å–µ–¥–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–æ—á–µ–∫ –∑–∞–∫–∞–∑–æ–≤.',
        messageType: 'text',
        message_type: 'text',
        isRead: false,
        isDeleted: false,
        attachments: JSON.stringify([]),
        createdAt: new Date().toISOString()
      }
    );

    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ`);

    // 4. –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É job
    const jobCardData = {
      jobId: 'test-job-' + Date.now(),
      jobTitle: '–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è',
      budget: '$500 - $1000',
      freelancerName: user2.name,
      freelancerId: user2.$id,
      clientName: user1.name,
      clientId: user1.$id,
      status: 'in_progress',
      category: 'Web Development',
      skills: ['React', 'Node.js', 'MongoDB'],
      description: '–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º React –∏ Node.js',
      workStatus: 'in_progress',
      progressPercentage: 65,
      createdAt: new Date().toISOString(),
      assignedAt: new Date().toISOString()
    };

    await databases.createDocument(
      DATABASE_ID,
      'messages',
      ID.unique(),
      {
        senderId: user1.$id,
        sender_id: user1.$id,
        receiverId: user2.$id,
        conversationId: conversationId,
        conversation_id: conversationId,
        content: `üíº –†–∞–±–æ—Ç–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞: ${jobCardData.jobTitle}\n\nüìä –ü—Ä–æ–≥—Ä–µ—Å—Å: ${jobCardData.progressPercentage}%\nüí∞ –ë—é–¥–∂–µ—Ç: ${jobCardData.budget}\nüéØ –°—Ç–∞—Ç—É—Å: –í —Ä–∞–±–æ—Ç–µ`,
        messageType: 'job_card',
        message_type: 'job_card',
        isRead: false,
        isDeleted: false,
        attachments: JSON.stringify([]),
        createdAt: new Date().toISOString()
      }
    );

    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ job –≤ –±–µ—Å–µ–¥–µ`);

    // 5. –°–æ–∑–¥–∞–µ–º AI –±–µ—Å–µ–¥—É
    const aiConversationId = ID.unique();
    
    await databases.createDocument(
      DATABASE_ID,
      'ai_conversations',
      aiConversationId,
      {
        userId: user1.$id,
        specialistId: 'alex-ai',
        specialistName: 'Alex AI',
        specialistTitle: 'AI Specialist',
        conversationType: 'order',
        status: 'active',
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
        user_id: user1.$id,
        specialist_id: 'alex-ai',
        conversation_type: 'order'
      }
    );
    
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ AI –±–µ—Å–µ–¥–∞ ${aiConversationId}`);

    // 6. –°–æ–∑–¥–∞–µ–º AI —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–æ—á–∫–æ–π –∑–∞–∫–∞–∑–∞
    const aiOrderData = {
      orderId: 'test-ai-order-' + Date.now(),
      userId: user1.$id,
      specialistId: 'alex-ai',
      specialist: {
        id: 'alex-ai',
        name: 'Alex AI',
        title: 'AI Specialist',
        avatar: '/avatars/alex-ai.jpg'
      },
      title: 'AI –ß–∞—Ç-–±–æ—Ç –¥–ª—è —Å–∞–π—Ç–∞',
      requirements: '–°–æ–∑–¥–∞–Ω–∏–µ —É–º–Ω–æ–≥–æ —á–∞—Ç-–±–æ—Ç–∞ —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π GPT',
      status: 'in_progress',
      amount: 150,
      conversationId: aiConversationId,
      createdAt: new Date().toISOString()
    };

    await databases.createDocument(
      DATABASE_ID,
      'ai_messages',
      ID.unique(),
      {
        conversation_id: aiConversationId,
        sender_type: 'user',
        content: `ü§ñ AI –∑–∞–∫–∞–∑: ${aiOrderData.title}\n\nüí∞ –°—É–º–º–∞: $${aiOrderData.amount}\nüìù –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: ${aiOrderData.requirements}\nüéØ –°—Ç–∞—Ç—É—Å: –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ`,
        message_type: 'order_card',
        created_at: new Date().toISOString()
      }
    );

    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ AI –∑–∞–∫–∞–∑–∞`);

    // 7. –°–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    const demoMessages = [
      '–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ–µ–∫—Ç –≤—ã–≥–ª—è–¥–∏—Ç –æ—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ üöÄ',
      '–ö–æ–≥–¥–∞ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø–µ—Ä–≤—ã–π —ç—Ç–∞–ø?',
      '–ü–µ—Ä–≤—ã–π —ç—Ç–∞–ø –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤ –∫ –∫–æ–Ω—Ü—É –Ω–µ–¥–µ–ª–∏ ‚è∞',
      '–ü—Ä–µ–∫—Ä–∞—Å–Ω–æ! –ë—É–¥—É –∂–¥–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã üëç'
    ];

    for (let i = 0; i < demoMessages.length; i++) {
      const senderId = i % 2 === 0 ? user2.$id : user1.$id;
      const receiverId = i % 2 === 0 ? user1.$id : user2.$id;
      
      await databases.createDocument(
        DATABASE_ID,
        'messages',
        ID.unique(),
        {
          senderId,
          sender_id: senderId,
          receiverId,
          conversationId: conversationId,
          conversation_id: conversationId,
          content: demoMessages[i],
          messageType: 'text',
          message_type: 'text',
          isRead: Math.random() > 0.5,
          isDeleted: false,
          attachments: JSON.stringify([]),
          createdAt: new Date(Date.now() + (i + 1) * 60000).toISOString() // +1 –º–∏–Ω—É—Ç–∞ –∫–∞–∂–¥–æ–µ
        }
      );
    }

    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${demoMessages.length} –¥–µ–º–æ —Å–æ–æ–±—â–µ–Ω–∏–π`);

    // 8. –û–±–Ω–æ–≤–ª—è–µ–º lastMessage –≤ –±–µ—Å–µ–¥–µ
    await databases.updateDocument(
      DATABASE_ID,
      'conversations',
      conversationId,
      {
        lastMessage: demoMessages[demoMessages.length - 1],
        lastMessageAt: new Date().toISOString(),
        lastMessageBy: user1.$id,
        updatedAt: new Date().toISOString()
      }
    );

    // 9. –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const finalConversations = await databases.listDocuments(DATABASE_ID, 'conversations');
    const finalAIConversations = await databases.listDocuments(DATABASE_ID, 'ai_conversations');
    const finalMessages = await databases.listDocuments(DATABASE_ID, 'messages');
    const finalAIMessages = await databases.listDocuments(DATABASE_ID, 'ai_messages');

    console.log(`\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:`);
    console.log(`üí¨ –û–±—ã—á–Ω—ã–µ –±–µ—Å–µ–¥—ã: ${finalConversations.documents.length}`);
    console.log(`ü§ñ AI –±–µ—Å–µ–¥—ã: ${finalAIConversations.documents.length}`);
    console.log(`üì® –°–æ–æ–±—â–µ–Ω–∏—è: ${finalMessages.documents.length}`);
    console.log(`ü§ñ AI —Å–æ–æ–±—â–µ–Ω–∏—è: ${finalAIMessages.documents.length}`);

    const jobCards = finalMessages.documents.filter(m => m.messageType === 'job_card');
    const aiOrderCards = finalAIMessages.documents.filter(m => m.message_type === 'order_card');

    console.log(`üíº –ö–∞—Ä—Ç–æ—á–∫–∏ jobs: ${jobCards.length}`);
    console.log(`ü§ñ –ö–∞—Ä—Ç–æ—á–∫–∏ AI –∑–∞–∫–∞–∑–æ–≤: ${aiOrderCards.length}`);

    console.log(`\nüéâ –¢–µ—Å—Ç–æ–≤—ã–µ –±–µ—Å–µ–¥—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!`);
    console.log(`\nüì± –¢–µ–ø–µ—Ä—å –æ—Ç–∫—Ä–æ–π—Ç–µ /messages –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏:`);
    console.log(`   ‚Ä¢ –í—ã —É–≤–∏–¥–∏—Ç–µ –±–µ—Å–µ–¥—É –º–µ–∂–¥—É ${user1.name} –∏ ${user2.name}`);
    console.log(`   ‚Ä¢ –í –±–µ—Å–µ–¥–µ –µ—Å—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∞ —Ä–∞–±–æ—Ç—ã "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"`);
    console.log(`   ‚Ä¢ AI –±–µ—Å–µ–¥–∞ —Å –∫–∞—Ä—Ç–æ—á–∫–æ–π –∑–∞–∫–∞–∑–∞ "AI –ß–∞—Ç-–±–æ—Ç –¥–ª—è —Å–∞–π—Ç–∞"`);
    console.log(`   ‚Ä¢ –ù–µ—Å–∫–æ–ª—å–∫–æ –¥–µ–º–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è UX/UI`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –±–µ—Å–µ–¥:', error.message);
  }
}

createTestConversations().catch(console.error); 