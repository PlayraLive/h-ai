const { Client, Databases, ID, Query } = require('node-appwrite');
require('dotenv').config({ path: '.env.local' });

const client = new Client()
  .setEndpoint(process.env.NEXT_PUBLIC_APPWRITE_ENDPOINT)
  .setProject(process.env.NEXT_PUBLIC_APPWRITE_PROJECT_ID)
  .setKey(process.env.APPWRITE_API_KEY);

const databases = new Databases(client);
const DATABASE_ID = process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID;

async function fixOrderCardsSimple() {
  console.log('üîß –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫ –∑–∞–∫–∞–∑–æ–≤ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)...\n');
  
  try {
    // 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const users = await databases.listDocuments(
      DATABASE_ID,
      process.env.NEXT_PUBLIC_APPWRITE_USERS_COLLECTION_ID
    );
    console.log(`üë• –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.documents.length}`);

    if (users.documents.length === 0) {
      console.log('‚ö†Ô∏è –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞–±–æ—Ç—ã');
      return;
    }

    const testUser = users.documents[0];
    console.log(`üß™ –ì–ª–∞–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${testUser.name} (${testUser.$id})`);

    // 2. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ jobs
    const allJobs = await databases.listDocuments(DATABASE_ID, 'jobs');
    console.log(`üíº –í—Å–µ–≥–æ jobs: ${allJobs.documents.length}`);

    // –§–∏–ª—å—Ç—Ä—É–µ–º jobs —Å –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–º–∏ —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–∞–º–∏
    const jobsWithFreelancers = allJobs.documents.filter(job => 
      job.assignedFreelancer && job.assignedFreelancer !== null
    );
    console.log(`üíº Jobs —Å —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–∞–º–∏: ${jobsWithFreelancers.length}`);

    // 3. –ü–æ–ª—É—á–∞–µ–º AI –∑–∞–∫–∞–∑—ã
    const orders = await databases.listDocuments(DATABASE_ID, 'orders');
    console.log(`ü§ñ AI –∑–∞–∫–∞–∑—ã: ${orders.documents.length}`);

    // 4. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –±–µ—Å–µ–¥—ã –∏ –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –ø–µ—Ä–≤—ã—Ö 3 jobs
    let createdConversations = 0;
    let createdCards = 0;

    for (const job of jobsWithFreelancers.slice(0, 3)) {
      try {
        // –°–æ–∑–¥–∞–µ–º –±–µ—Å–µ–¥—É –º–µ–∂–¥—É –∫–ª–∏–µ–Ω—Ç–æ–º –∏ —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–æ–º
        const conversationId = ID.unique();
        
        const newConversation = await databases.createDocument(
          DATABASE_ID,
          'conversations',
          conversationId,
          {
            participants: [job.clientId, job.assignedFreelancer],
            job_id: job.$id,
            title: `–†–∞–±–æ—Ç–∞: ${job.title}`,
            last_message: `–†–∞–±–æ—Ç–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞: ${job.title}`,
            last_message_time: new Date().toISOString(),
            unread_count: JSON.stringify({
              [job.clientId]: 1,
              [job.assignedFreelancer]: 1
            }),
            is_archived: false,
            created_at: new Date().toISOString(),
            updated_at: new Date().toISOString()
          }
        );

        createdConversations++;
        console.log(`  ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –±–µ—Å–µ–¥–∞ –¥–ª—è job ${job.title} (${job.$id})`);

        // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É job –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
        const jobCardData = {
          jobId: job.$id,
          jobTitle: job.title,
          budget: `$${job.budgetMin} - $${job.budgetMax || job.budgetMin}`,
          freelancerName: '–ù–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä',
          freelancerId: job.assignedFreelancer,
          clientName: job.clientName || '–ö–ª–∏–µ–Ω—Ç',
          clientId: job.clientId,
          status: job.status || 'active',
          category: job.category || 'Development',
          skills: job.skills || ['Web Development'],
          description: job.description || '–û–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã',
          workStatus: job.workStatus || 'in_progress',
          progressPercentage: job.progressPercentage || 50,
          createdAt: job.$createdAt,
          assignedAt: new Date().toISOString()
        };

        await databases.createDocument(
          DATABASE_ID,
          'messages',
          ID.unique(),
          {
            senderId: job.clientId,
            receiverId: job.assignedFreelancer,
            conversationId: conversationId,
            content: `üíº –†–∞–±–æ—Ç–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞: ${job.title}\n\n–ë—é–¥–∂–µ—Ç: $${job.budgetMin} - $${job.budgetMax || job.budgetMin}\n–°—Ç–∞—Ç—É—Å: ${job.workStatus || '–í —Ä–∞–±–æ—Ç–µ'}`,
            messageType: 'job_card',
            isRead: false,
            createdAt: job.$createdAt,
            isDeleted: false,
            attachments: JSON.stringify([])
          }
        );

        createdCards++;
        console.log(`  ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ job –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö`);

      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±–µ—Å–µ–¥—ã –¥–ª—è job ${job.$id}:`, error.message);
      }
    }

    // 5. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ AI –±–µ—Å–µ–¥—ã –¥–ª—è –ø–µ—Ä–≤—ã—Ö 3 –∑–∞–∫–∞–∑–æ–≤
    for (const order of orders.documents.slice(0, 3)) {
      try {
        // –°–æ–∑–¥–∞–µ–º AI –±–µ—Å–µ–¥—É
        const aiConversationId = ID.unique();
        
        const newAIConversation = await databases.createDocument(
          DATABASE_ID,
          'ai_conversations',
          aiConversationId,
          {
            user_id: order.userId,
            specialist_id: order.specialist || 'alex-ai',
            order_id: order.$id,
            status: 'active',
            created_at: new Date().toISOString(),
            updated_at: new Date().toISOString()
          }
        );

        console.log(`  ‚úÖ –°–æ–∑–¥–∞–Ω–∞ AI –±–µ—Å–µ–¥–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞ ${order.$id}`);

        // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É AI –∑–∞–∫–∞–∑–∞
        const aiOrderData = {
          orderId: order.$id,
          userId: order.userId,
          specialistId: order.specialist || 'alex-ai',
          specialist: {
            id: order.specialist || 'alex-ai',
            name: 'Alex AI',
            title: 'AI Specialist',
            avatar: '/avatars/alex-ai.jpg'
          },
          title: order.title || 'AI –ó–∞–∫–∞–∑',
          requirements: order.requirements || 'AI –∑–∞–∫–∞–∑ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ',
          status: order.status || 'pending',
          amount: order.amount || 50,
          conversationId: aiConversationId,
          createdAt: order.createdAt || new Date().toISOString()
        };

        await databases.createDocument(
          DATABASE_ID,
          'ai_messages',
          ID.unique(),
          {
            conversation_id: aiConversationId,
            sender_type: 'user',
            content: `ü§ñ AI –∑–∞–∫–∞–∑: ${order.title || '–ù–æ–≤—ã–π –∑–∞–∫–∞–∑'}\n\n–°—É–º–º–∞: $${order.amount || 50}\n–°—Ç–∞—Ç—É—Å: ${order.status || '–í –æ–±—Ä–∞–±–æ—Ç–∫–µ'}`,
            message_type: 'order_card',
            created_at: order.createdAt || new Date().toISOString()
          }
        );

        console.log(`  ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞ AI –∑–∞–∫–∞–∑–∞ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö`);

      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è AI –±–µ—Å–µ–¥—ã –¥–ª—è –∑–∞–∫–∞–∑–∞ ${order.$id}:`, error.message);
      }
    }

    // 6. –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log(`\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:\n`);
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ –±–µ—Å–µ–¥: ${createdConversations}`);
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫ jobs: ${createdCards}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    const finalConversations = await databases.listDocuments(DATABASE_ID, 'conversations');
    const finalAIConversations = await databases.listDocuments(DATABASE_ID, 'ai_conversations');
    const finalMessages = await databases.listDocuments(DATABASE_ID, 'messages');
    const finalAIMessages = await databases.listDocuments(DATABASE_ID, 'ai_messages');

    console.log(`\nüìã –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:`);
    console.log(`üí¨ –û–±—ã—á–Ω—ã–µ –±–µ—Å–µ–¥—ã: ${finalConversations.documents.length}`);
    console.log(`ü§ñ AI –±–µ—Å–µ–¥—ã: ${finalAIConversations.documents.length}`);
    console.log(`üì® –°–æ–æ–±—â–µ–Ω–∏—è: ${finalMessages.documents.length}`);
    console.log(`ü§ñ AI —Å–æ–æ–±—â–µ–Ω–∏—è: ${finalAIMessages.documents.length}`);

    const jobCardMessages = finalMessages.documents.filter(m => m.messageType === 'job_card');
    const aiOrderMessages = finalAIMessages.documents.filter(m => m.message_type === 'order_card');

    console.log(`üíº –ö–∞—Ä—Ç–æ—á–∫–∏ jobs –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö: ${jobCardMessages.length}`);
    console.log(`ü§ñ –ö–∞—Ä—Ç–æ—á–∫–∏ AI –∑–∞–∫–∞–∑–æ–≤ –≤ —Å–æ–æ–±—â–µ–Ω–∏—è—Ö: ${aiOrderMessages.length}`);

    console.log(`\nüéâ –ö–∞—Ä—Ç–æ—á–∫–∏ –∑–∞–∫–∞–∑–æ–≤ —Å–æ–∑–¥–∞–Ω—ã!`);
    console.log(`–¢–µ–ø–µ—Ä—å –≤ —Ä–∞–∑–¥–µ–ª–µ –°–æ–æ–±—â–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –ø–æ—è–≤–∏—Ç—å—Å—è –±–µ—Å–µ–¥—ã —Å –∫–∞—Ä—Ç–æ—á–∫–∞–º–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.`);

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–µ–∫:', error.message);
  }
}

fixOrderCardsSimple().catch(console.error); 