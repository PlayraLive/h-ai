const { Client, Databases } = require('node-appwrite');
require('dotenv').config({ path: '.env.local' });

const client = new Client()
  .setEndpoint(process.env.NEXT_PUBLIC_APPWRITE_ENDPOINT)
  .setProject(process.env.NEXT_PUBLIC_APPWRITE_PROJECT_ID)
  .setKey(process.env.APPWRITE_API_KEY);

const databases = new Databases(client);
const DATABASE_ID = process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID;

async function checkAllCollections() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π –∏ –∏—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤...\n');
  
  const collections = [
    'users',
    'jobs', 
    'proposals',
    'conversations',
    'messages',
    'comments',
    'bookmarks',
    'notifications',
    'projects',
    'ai_specialists'
  ];

  for (const collectionName of collections) {
    try {
      console.log(`\nüìã –ö–æ–ª–ª–µ–∫—Ü–∏—è: ${collectionName}`);
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
      const collection = await databases.getCollection(DATABASE_ID, collectionName);
      console.log(`  ‚úÖ –ù–∞–π–¥–µ–Ω–∞`);
      console.log(`  üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ç—Ä–∏–±—É—Ç–æ–≤: ${collection.attributes.length}`);
      
      // –í—ã–≤–æ–¥–∏–º –≤—Å–µ –∞—Ç—Ä–∏–±—É—Ç—ã
      if (collection.attributes.length > 0) {
        console.log(`  üìù –ê—Ç—Ä–∏–±—É—Ç—ã:`);
        collection.attributes.forEach((attr, index) => {
          console.log(`    ${index + 1}. ${attr.key} (${attr.type}) - required: ${attr.required}`);
        });
      } else {
        console.log(`  ‚ö†Ô∏è –ê—Ç—Ä–∏–±—É—Ç—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç`);
      }
      
    } catch (error) {
      console.log(`  ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞: ${error.message}`);
    }
  }
  
  console.log('\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
}

checkAllCollections().catch(console.error);
