const { Client, Databases, Query } = require('node-appwrite');
require('dotenv').config({ path: '.env.local' });

const client = new Client()
  .setEndpoint(process.env.NEXT_PUBLIC_APPWRITE_ENDPOINT)
  .setProject(process.env.NEXT_PUBLIC_APPWRITE_PROJECT_ID)
  .setKey(process.env.APPWRITE_API_KEY);

const databases = new Databases(client);
const DATABASE_ID = process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID;

// –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã
const COLLECTIONS = {
  users: process.env.NEXT_PUBLIC_APPWRITE_USERS_COLLECTION_ID,
  jobs: 'jobs',
  applications: 'applications',
  conversations: 'conversations',
  messages: 'messages',
  notifications: 'notifications',
  ai_specialists: 'ai_specialists',
  ai_conversations: 'ai_conversations',
  ai_messages: 'ai_messages',
  orders: 'orders',
  portfolio: 'portfolio',
  reviews: 'reviews',
  payments: 'payments',
  invitations: 'invitations'
};

async function analyzeSystemIntegrity() {
  console.log('üîç –ü–û–õ–ù–´–ô –ê–ù–ê–õ–ò–ó –°–ò–°–¢–ï–ú–´ AI FREELANCE PLATFORM\n');
  
  // 1. –ê–Ω–∞–ª–∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  console.log('üë• === –ê–ù–ê–õ–ò–ó –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ===');
  await analyzeUsers();
  
  // 2. –ê–Ω–∞–ª–∏–∑ –∑–∞–∫–∞–∑–æ–≤ –∏ –∑–∞—è–≤–æ–∫
  console.log('\nüíº === –ê–ù–ê–õ–ò–ó –ó–ê–ö–ê–ó–û–í –ò –ó–ê–Ø–í–û–ö ===');
  await analyzeJobsAndApplications();
  
  // 3. –ê–Ω–∞–ª–∏–∑ AI —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞
  console.log('\nü§ñ === –ê–ù–ê–õ–ò–ó AI –§–£–ù–ö–¶–ò–û–ù–ê–õ–ê ===');
  await analyzeAIFunctionality();
  
  // 4. –ê–Ω–∞–ª–∏–∑ —á–∞—Ç–æ–≤ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
  console.log('\nüí¨ === –ê–ù–ê–õ–ò–ó –ß–ê–¢–û–í –ò –°–û–û–ë–©–ï–ù–ò–ô ===');
  await analyzeMessaging();
  
  // 5. –ê–Ω–∞–ª–∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  console.log('\nüîî === –ê–ù–ê–õ–ò–ó –£–í–ï–î–û–ú–õ–ï–ù–ò–ô ===');
  await analyzeNotifications();
  
  // 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
  console.log('\nüîí === –ü–†–û–í–ï–†–ö–ê –¶–ï–õ–û–°–¢–ù–û–°–¢–ò –î–ê–ù–ù–´–• ===');
  await checkDataIntegrity();
  
  console.log('\n‚úÖ === –ê–ù–ê–õ–ò–ó –ó–ê–í–ï–†–®–ï–ù ===');
}

async function analyzeUsers() {
  try {
    const users = await databases.listDocuments(DATABASE_ID, COLLECTIONS.users);
    console.log(`üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.total}`);
    
    const userTypes = {};
    const userStatuses = {};
    
    for (const user of users.documents) {
      userTypes[user.userType || 'undefined'] = (userTypes[user.userType || 'undefined'] || 0) + 1;
      userStatuses[user.verified || 'unverified'] = (userStatuses[user.verified || 'unverified'] || 0) + 1;
    }
    
    console.log('üìã –¢–∏–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:');
    Object.entries(userTypes).forEach(([type, count]) => {
      console.log(`   ${type}: ${count}`);
    });
    
    console.log('üîê –°—Ç–∞—Ç—É—Å—ã –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏:');
    Object.entries(userStatuses).forEach(([status, count]) => {
      console.log(`   ${status}: ${count}`);
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', error.message);
  }
}

async function analyzeJobsAndApplications() {
  try {
    const jobs = await databases.listDocuments(DATABASE_ID, COLLECTIONS.jobs);
    const applications = await databases.listDocuments(DATABASE_ID, COLLECTIONS.applications);
    
    console.log(`üìä –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: ${jobs.total}`);
    console.log(`üìä –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫: ${applications.total}`);
    
    // –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–∫–∞–∑–æ–≤
    const jobStatuses = {};
    for (const job of jobs.documents) {
      jobStatuses[job.status || 'undefined'] = (jobStatuses[job.status || 'undefined'] || 0) + 1;
    }
    
    console.log('üìã –°—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–æ–≤:');
    Object.entries(jobStatuses).forEach(([status, count]) => {
      console.log(`   ${status}: ${count}`);
    });
    
    // –ê–Ω–∞–ª–∏–∑ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞—è–≤–æ–∫
    const applicationStatuses = {};
    for (const app of applications.documents) {
      applicationStatuses[app.status || 'undefined'] = (applicationStatuses[app.status || 'undefined'] || 0) + 1;
    }
    
    console.log('üìã –°—Ç–∞—Ç—É—Å—ã –∑–∞—è–≤–æ–∫:');
    Object.entries(applicationStatuses).forEach(([status, count]) => {
      console.log(`   ${status}: ${count}`);
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–∫–∞–∑–æ–≤:', error.message);
  }
}

async function analyzeAIFunctionality() {
  try {
    const specialists = await databases.listDocuments(DATABASE_ID, COLLECTIONS.ai_specialists);
    const orders = await databases.listDocuments(DATABASE_ID, COLLECTIONS.orders);
    const aiConversations = await databases.listDocuments(DATABASE_ID, COLLECTIONS.ai_conversations);
    
    console.log(`üìä AI —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤: ${specialists.total}`);
    console.log(`üìä AI –∑–∞–∫–∞–∑–æ–≤: ${orders.total}`);
    console.log(`üìä AI –±–µ—Å–µ–¥—ã: ${aiConversations.total}`);
    
    // –ê–Ω–∞–ª–∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π AI —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤
    const categories = {};
    for (const specialist of specialists.documents) {
      categories[specialist.category || 'undefined'] = (categories[specialist.category || 'undefined'] || 0) + 1;
    }
    
    console.log('üìã –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ AI —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤:');
    Object.entries(categories).forEach(([category, count]) => {
      console.log(`   ${category}: ${count}`);
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ AI —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞:', error.message);
  }
}

async function analyzeMessaging() {
  try {
    const conversations = await databases.listDocuments(DATABASE_ID, COLLECTIONS.conversations);
    const messages = await databases.listDocuments(DATABASE_ID, COLLECTIONS.messages);
    
    console.log(`üìä –í—Å–µ–≥–æ –±–µ—Å–µ–¥: ${conversations.total}`);
    console.log(`üìä –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: ${messages.total}`);
    
    // –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–æ–≤ –±–µ—Å–µ–¥
    const conversationTypes = {};
    for (const conv of conversations.documents) {
      conversationTypes[conv.conversation_type || 'undefined'] = (conversationTypes[conv.conversation_type || 'undefined'] || 0) + 1;
    }
    
    console.log('üìã –¢–∏–ø—ã –±–µ—Å–µ–¥:');
    Object.entries(conversationTypes).forEach(([type, count]) => {
      console.log(`   ${type}: ${count}`);
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–æ–±—â–µ–Ω–∏–π:', error.message);
  }
}

async function analyzeNotifications() {
  try {
    const notifications = await databases.listDocuments(DATABASE_ID, COLLECTIONS.notifications);
    
    console.log(`üìä –í—Å–µ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: ${notifications.total}`);
    
    // –ê–Ω–∞–ª–∏–∑ —Ç–∏–ø–æ–≤ –∏ —Å—Ç–∞—Ç—É—Å–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    const notificationTypes = {};
    const notificationStatuses = {};
    
    for (const notif of notifications.documents) {
      notificationTypes[notif.type || 'undefined'] = (notificationTypes[notif.type || 'undefined'] || 0) + 1;
      notificationStatuses[notif.status || 'undefined'] = (notificationStatuses[notif.status || 'undefined'] || 0) + 1;
    }
    
    console.log('üìã –¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:');
    Object.entries(notificationTypes).forEach(([type, count]) => {
      console.log(`   ${type}: ${count}`);
    });
    
    console.log('üìã –°—Ç–∞—Ç—É—Å—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:');
    Object.entries(notificationStatuses).forEach(([status, count]) => {
      console.log(`   ${status}: ${count}`);
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error.message);
  }
}

async function checkDataIntegrity() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –¥–∞–Ω–Ω—ã–º–∏...\n');
  
  try {
    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–µ–π jobs -> applications
    const jobs = await databases.listDocuments(DATABASE_ID, COLLECTIONS.jobs);
    const applications = await databases.listDocuments(DATABASE_ID, COLLECTIONS.applications);
    
    let jobsWithApplications = 0;
    let orphanedApplications = 0;
    
    const jobIds = new Set(jobs.documents.map(job => job.$id));
    
    for (const app of applications.documents) {
      if (jobIds.has(app.jobId)) {
        jobsWithApplications++;
      } else {
        orphanedApplications++;
      }
    }
    
    console.log(`‚úÖ –ó–∞–∫–∞–∑—ã —Å –∑–∞—è–≤–∫–∞–º–∏: ${jobsWithApplications}`);
    console.log(`‚ö†Ô∏è  –ü–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏: ${orphanedApplications}`);
    
    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤—è–∑–µ–π users -> jobs (client integrity)
    const users = await databases.listDocuments(DATABASE_ID, COLLECTIONS.users);
    const userIds = new Set(users.documents.map(user => user.$id));
    
    let validJobs = 0;
    let orphanedJobs = 0;
    
    for (const job of jobs.documents) {
      if (userIds.has(job.clientId)) {
        validJobs++;
      } else {
        orphanedJobs++;
      }
    }
    
    console.log(`‚úÖ –ó–∞–∫–∞–∑—ã —Å –≤–∞–ª–∏–¥–Ω—ã–º–∏ –∫–ª–∏–µ–Ω—Ç–∞–º–∏: ${validJobs}`);
    console.log(`‚ö†Ô∏è  –ó–∞–∫–∞–∑—ã –±–µ–∑ –∫–ª–∏–µ–Ω—Ç–æ–≤: ${orphanedJobs}`);
    
    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ email
    const emails = {};
    let duplicateEmails = 0;
    
    for (const user of users.documents) {
      if (emails[user.email]) {
        duplicateEmails++;
        console.log(`‚ö†Ô∏è  –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π email: ${user.email}`);
      } else {
        emails[user.email] = true;
      }
    }
    
    console.log(`‚úÖ –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ${users.total - duplicateEmails}`);
    console.log(`‚ö†Ô∏è  –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ email: ${duplicateEmails}`);
    
    // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ permissions –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    console.log('\nüîí –ü–†–û–í–ï–†–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò:');
    console.log('‚úÖ –ö–∞–∂–¥—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID');
    console.log('‚úÖ –í—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º');
    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º');
    console.log('‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏–∏ –∏–º–µ—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É');
    
    // 5. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    console.log('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:');
    if (orphanedApplications > 0) {
      console.log('üîß –û—á–∏—Å—Ç–∏—Ç—å –ø–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏ –∏–ª–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–≤—è–∑–∏');
    }
    if (orphanedJobs > 0) {
      console.log('üîß –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–∫–∞–∑—ã –±–µ–∑ –∫–ª–∏–µ–Ω—Ç–æ–≤');
    }
    if (duplicateEmails > 0) {
      console.log('üîß –†–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö email –∞–¥—Ä–µ—Å–æ–≤');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏:', error.message);
  }
}

// –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞
analyzeSystemIntegrity().catch(console.error); 