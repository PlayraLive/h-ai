const { Client, Databases } = require('node-appwrite');
require('dotenv').config({ path: '.env.local' });

const client = new Client()
  .setEndpoint(process.env.NEXT_PUBLIC_APPWRITE_ENDPOINT)
  .setProject(process.env.NEXT_PUBLIC_APPWRITE_PROJECT_ID)
  .setKey(process.env.APPWRITE_API_KEY);

const databases = new Databases(client);
const DATABASE_ID = process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID;

async function checkBookmarksAttributes() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ bookmarks...\n');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    const collection = await databases.getCollection(DATABASE_ID, 'bookmarks');
    console.log(`‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è bookmarks –Ω–∞–π–¥–µ–Ω–∞`);
    console.log(`üìä –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ç—Ä–∏–±—É—Ç–æ–≤: ${collection.attributes.length}`);
    
    // –í—ã–≤–æ–¥–∏–º –≤—Å–µ –∞—Ç—Ä–∏–±—É—Ç—ã
    console.log('\nüìã –ê—Ç—Ä–∏–±—É—Ç—ã –∫–æ–ª–ª–µ–∫—Ü–∏–∏ bookmarks:');
    collection.attributes.forEach((attr, index) => {
      console.log(`  ${index + 1}. ${attr.key} (${attr.type}) - required: ${attr.required}`);
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ bookmarks:', error.message);
  }
}

checkBookmarksAttributes().catch(console.error);
