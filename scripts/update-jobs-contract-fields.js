const { Client, Databases } = require("node-appwrite");
require("dotenv").config({ path: ".env.local" });

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
const client = new Client()
  .setEndpoint(process.env.NEXT_PUBLIC_APPWRITE_ENDPOINT)
  .setProject(process.env.NEXT_PUBLIC_APPWRITE_PROJECT_ID)
  .setKey(process.env.APPWRITE_API_KEY);

const databases = new Databases(client);
const DATABASE_ID = process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID;

async function updateJobsCollection() {
  try {
    console.log("üîÑ Updating jobs collection with contract fields...");

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤
    const newAttributes = [
      { key: "freelancerId", type: "string", size: 255, required: false },
      { key: "freelancerName", type: "string", size: 255, required: false },
      { key: "selectedBudget", type: "double", required: false },
      { key: "selectedDuration", type: "string", size: 100, required: false },
      { key: "contractStartDate", type: "datetime", required: false },
    ];

    for (const attr of newAttributes) {
      try {
        if (attr.type === "double") {
          await databases.createFloatAttribute(
            DATABASE_ID,
            "jobs",
            attr.key,
            attr.required,
          );
        } else if (attr.type === "datetime") {
          await databases.createDatetimeAttribute(
            DATABASE_ID,
            "jobs",
            attr.key,
            attr.required,
          );
        } else {
          await databases.createStringAttribute(
            DATABASE_ID,
            "jobs",
            attr.key,
            attr.size,
            attr.required,
          );
        }
        console.log(`‚úÖ Added attribute: ${attr.key}`);
      } catch (error) {
        if (error.code === 409) {
          console.log(`‚ÑπÔ∏è Attribute ${attr.key} already exists`);
        } else {
          console.error(`‚ùå Error adding attribute ${attr.key}:`, error.message);
        }
      }
    }

    console.log("üéâ Jobs collection updated successfully!");
  } catch (error) {
    console.error("‚ùå Error updating jobs collection:", error);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
updateJobsCollection();
