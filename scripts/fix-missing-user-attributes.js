const { Client, Databases } = require('node-appwrite');
require('dotenv').config({ path: '.env.local' });

const client = new Client()
  .setEndpoint(process.env.NEXT_PUBLIC_APPWRITE_ENDPOINT)
  .setProject(process.env.NEXT_PUBLIC_APPWRITE_PROJECT_ID)
  .setKey(process.env.APPWRITE_API_KEY);

const databases = new Databases(client);
const DATABASE_ID = process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID;

async function fixMissingUserAttributes() {
  console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ users...\n');
  
  const missingAttributes = [
    // –û—Å–Ω–æ–≤–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    { key: 'name', type: 'string', size: 255, required: false },
    { key: 'email', type: 'string', size: 255, required: true },
    { key: 'userType', type: 'string', size: 50, required: true },
    { key: 'avatar', type: 'string', size: 500, required: false },
    { key: 'bio', type: 'string', size: 1000, required: false },
    { key: 'location', type: 'string', size: 255, required: false },
    { key: 'skills', type: 'string', size: 255, required: false, array: true },
    { key: 'languages', type: 'string', size: 100, required: false, array: true },
    { key: 'hourlyRate', type: 'integer', required: false, min: 0, max: 1000 },
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ —Ä–µ–π—Ç–∏–Ω–≥–∏
    { key: 'rating', type: 'float', required: false, min: 0, max: 5 },
    { key: 'reviewCount', type: 'integer', required: false, min: 0 },
    { key: 'totalEarnings', type: 'float', required: false, min: 0 },
    { key: 'completedProjects', type: 'integer', required: false, min: 0 },
    
    // –°—Ç–∞—Ç—É—Å –∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è
    { key: 'verified', type: 'boolean', required: false },
    { key: 'topRated', type: 'boolean', required: false },
    { key: 'availability', type: 'string', size: 50, required: false },
    
    // –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏
    { key: 'linkedin', type: 'string', size: 500, required: false },
    { key: 'twitter', type: 'string', size: 500, required: false },
    { key: 'website', type: 'string', size: 500, required: false },
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    { key: 'phone', type: 'string', size: 50, required: false },
    { key: 'timezone', type: 'string', size: 100, required: false },
    { key: 'preferences', type: 'string', size: 2000, required: false },
  ];

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ users
    const usersCollection = await databases.listDocuments(DATABASE_ID, 'users');
    console.log(`‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è users –Ω–∞–π–¥–µ–Ω–∞ (${usersCollection.documents.length} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤)`);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∞—Ç—Ä–∏–±—É—Ç—ã
    for (const attr of missingAttributes) {
      try {
        await new Promise(resolve => setTimeout(resolve, 500)); // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        
        if (attr.type === 'string') {
          if (attr.array) {
            await databases.createStringAttribute(
              DATABASE_ID,
              'users',
              attr.key,
              attr.size,
              attr.required
            );
          } else {
            await databases.createStringAttribute(
              DATABASE_ID,
              'users',
              attr.key,
              attr.size,
              attr.required
            );
          }
        } else if (attr.type === 'integer') {
          await databases.createIntegerAttribute(
            DATABASE_ID,
            'users',
            attr.key,
            attr.required,
            attr.min,
            attr.max
          );
        } else if (attr.type === 'float') {
          await databases.createFloatAttribute(
            DATABASE_ID,
            'users',
            attr.key,
            attr.required,
            attr.min,
            attr.max
          );
        } else if (attr.type === 'boolean') {
          await databases.createBooleanAttribute(
            DATABASE_ID,
            'users',
            attr.key,
            attr.required
          );
        }
        
        console.log(`  ‚ûï –î–æ–±–∞–≤–ª–µ–Ω –∞—Ç—Ä–∏–±—É—Ç: ${attr.key} (${attr.type})`);
      } catch (attrError) {
        if (attrError.message.includes('already exists')) {
          console.log(`  ‚ö†Ô∏è –ê—Ç—Ä–∏–±—É—Ç ${attr.key} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
        } else if (attrError.message.includes('maximum number')) {
          console.log(`  ‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –¥–ª—è ${attr.key}`);
        } else {
          console.log(`  ‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è ${attr.key}: ${attrError.message}`);
        }
      }
    }
    
    console.log('\n‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ users –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –∫–æ–ª–ª–µ–∫—Ü–∏–µ–π users:', error.message);
  }
}

fixMissingUserAttributes().catch(console.error);
