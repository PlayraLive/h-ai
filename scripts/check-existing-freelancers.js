const { Client, Databases } = require('node-appwrite');
require('dotenv').config({ path: '.env.local' });

const client = new Client()
  .setEndpoint(process.env.NEXT_PUBLIC_APPWRITE_ENDPOINT)
  .setProject(process.env.NEXT_PUBLIC_APPWRITE_PROJECT_ID)
  .setKey(process.env.APPWRITE_API_KEY);

const databases = new Databases(client);
const DATABASE_ID = process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID;

async function checkExistingFreelancers() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...\n');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const allUsers = await databases.listDocuments(DATABASE_ID, 'users');
    console.log(`üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–∞–∑–µ: ${allUsers.documents.length}`);
    
    // –§–∏–ª—å—Ç—Ä—É–µ–º —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–æ–≤
    const freelancers = allUsers.documents.filter(user => user.userType === 'freelancer');
    console.log(`üë®‚Äçüíª –ù–∞–π–¥–µ–Ω–æ —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–æ–≤: ${freelancers.length}`);
    
    if (freelancers.length > 0) {
      console.log('\nüìã –°–ø–∏—Å–æ–∫ —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–æ–≤:');
      freelancers.forEach((freelancer, index) => {
        console.log(`  ${index + 1}. ${freelancer.name || freelancer.email} (ID: ${freelancer.$id})`);
        console.log(`     userType: ${freelancer.userType}`);
        console.log(`     location: ${freelancer.location || 'N/A'}`);
        console.log(`     rating: ${freelancer.rating || 'N/A'}`);
        console.log(`     hourlyRate: ${freelancer.hourlyRate || 'N/A'}`);
        console.log('');
      });
    } else {
      console.log('\n‚ùå –§—Ä–∏–ª–∞–Ω—Å–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–æ–≤:', error.message);
  }
}

checkExistingFreelancers().catch(console.error);
