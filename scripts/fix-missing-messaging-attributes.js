const { Client, Databases } = require('node-appwrite');
require('dotenv').config({ path: '.env.local' });

const client = new Client()
  .setEndpoint(process.env.NEXT_PUBLIC_APPWRITE_ENDPOINT)
  .setProject(process.env.NEXT_PUBLIC_APPWRITE_PROJECT_ID)
  .setKey(process.env.APPWRITE_API_KEY);

const databases = new Databases(client);
const DATABASE_ID = process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID;

async function fixMissingMessagingAttributes() {
  console.log('üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—è—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...\n');
  
  const collectionsToFix = [
    {
      id: 'ai_conversations',
      name: 'AI Conversations',
      missingAttributes: [
        { key: 'order_id', type: 'string', size: 255, required: false }
      ]
    },
    {
      id: 'conversations',
      name: 'Conversations',
      missingAttributes: [
        { key: 'job_id', type: 'string', size: 255, required: false },
        { key: 'project_id', type: 'string', size: 255, required: false }
      ]
    },
    {
      id: 'messages',
      name: 'Messages',
      missingAttributes: [
        { key: 'jobCardData', type: 'string', size: 5000, required: false },
        { key: 'aiOrderData', type: 'string', size: 5000, required: false },
        { key: 'solutionCardData', type: 'string', size: 5000, required: false },
        { key: 'aiBriefData', type: 'string', size: 5000, required: false },
        { key: 'attachments', type: 'string', size: 2000, required: false }
      ]
    },
    {
      id: 'ai_messages',
      name: 'AI Messages',
      missingAttributes: [
        { key: 'order_data', type: 'string', size: 5000, required: false },
        { key: 'message_type', type: 'string', size: 100, required: false }
      ]
    }
  ];

  for (const collection of collectionsToFix) {
    console.log(`üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é: ${collection.name}`);
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
      const collectionInfo = await databases.listDocuments(DATABASE_ID, collection.id, []);
      console.log(`‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è ${collection.name} –Ω–∞–π–¥–µ–Ω–∞ (${collectionInfo.documents.length} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤)`);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∞—Ç—Ä–∏–±—É—Ç—ã
      for (const attr of collection.missingAttributes) {
        try {
          await new Promise(resolve => setTimeout(resolve, 500)); // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
          
          if (attr.type === 'string') {
            await databases.createStringAttribute(
              DATABASE_ID,
              collection.id,
              attr.key,
              attr.size,
              attr.required
            );
          }
          
          console.log(`  ‚ûï –î–æ–±–∞–≤–ª–µ–Ω –∞—Ç—Ä–∏–±—É—Ç: ${attr.key}`);
        } catch (attrError) {
          if (attrError.message.includes('already exists')) {
            console.log(`  ‚ö†Ô∏è –ê—Ç—Ä–∏–±—É—Ç ${attr.key} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
          } else {
            console.log(`  ‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è ${attr.key}: ${attrError.message}`);
          }
        }
      }
      
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –∫–æ–ª–ª–µ–∫—Ü–∏–µ–π ${collection.name}:`, error.message);
    }
    
    console.log(''); // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
  }
  
  console.log('üéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞—Ç—Ä–∏–±—É—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
}

fixMissingMessagingAttributes().catch(console.error); 