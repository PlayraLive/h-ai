#!/usr/bin/env node

const axios = require('axios');
const { HttpsProxyAgent } = require('https-proxy-agent');
const { SocksProxyAgent } = require('socks-proxy-agent');

class ProxyManager {
  constructor() {
    this.workingProxy = null;
    this.freeProxies = [
      // HTTPS –ø—Ä–æ–∫—Å–∏ (—Ä–∞–±–æ—Ç–∞—é—â–∏–µ —Å OpenAI)
      'https://138.197.148.215:8080',
      'https://167.172.109.12:39533', 
      'https://159.89.195.14:8080',
      'https://143.198.182.218:80',
      'https://134.209.29.120:8080',
      
      // SOCKS5 –ø—Ä–æ–∫—Å–∏
      'socks5://134.195.101.34:1080',
      'socks5://192.111.139.165:4145',
      'socks5://72.195.34.58:4145',
      
      // Cloudflare Workers –ø—Ä–æ–∫—Å–∏
      'https://api.openai-proxy.org/v1',
      'https://openai.api2d.net/v1',
      'https://api.chatanywhere.tech/v1'
    ];
    
    this.testUrls = [
      'https://api.openai.com/v1/models',
      'https://ipinfo.io/country'
    ];
  }

  // –ü–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø—Ä–æ–∫—Å–∏ –∏–∑ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞
  async fetchFreeProxies() {
    try {
      console.log('üîç –ò—â—É –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø—Ä–æ–∫—Å–∏...');
      
      // –°–ø–∏—Å–æ–∫ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏
      const proxyApis = [
        'https://proxylist.geonode.com/api/proxy-list?limit=50&page=1&sort_by=lastChecked&sort_type=desc&protocols=http%2Chttps',
        'https://www.proxy-list.download/api/v1/get?type=https',
      ];
      
      for (const api of proxyApis) {
        try {
          const response = await axios.get(api, { timeout: 10000 });
          
          if (response.data && response.data.data) {
            // GeoNode API format
            const proxies = response.data.data.map(proxy => 
              `https://${proxy.ip}:${proxy.port}`
            );
            this.freeProxies.push(...proxies);
          } else if (typeof response.data === 'string') {
            // Text format
            const proxies = response.data.split('\n')
              .filter(line => line.includes(':'))
              .map(line => `https://${line.trim()}`);
            this.freeProxies.push(...proxies);
          }
          
          console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${this.freeProxies.length} –ø—Ä–æ–∫—Å–∏`);
          break;
        } catch (err) {
          console.log(`‚ùå –û—à–∏–±–∫–∞ API ${api}:`, err.message);
        }
      }
    } catch (error) {
      console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–∫—Å–∏, –∏—Å–ø–æ–ª—å–∑—É—é –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ');
    }
  }

  // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∫—Å–∏
  async testProxy(proxyUrl, testUrl = 'https://ipinfo.io/country') {
    try {
      const agent = proxyUrl.startsWith('socks') 
        ? new SocksProxyAgent(proxyUrl)
        : new HttpsProxyAgent(proxyUrl);
        
      const response = await axios.get(testUrl, {
        httpAgent: agent,
        httpsAgent: agent,
        timeout: 10000,
        headers: {
          'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36'
        }
      });
      
      return {
        success: true,
        country: response.data.country || response.data,
        proxy: proxyUrl
      };
    } catch (error) {
      return {
        success: false,
        error: error.message,
        proxy: proxyUrl
      };
    }
  }

  // –ù–∞–π—Ç–∏ —Ä–∞–±–æ—á–∏–π –ø—Ä–æ–∫—Å–∏ –¥–ª—è OpenAI
  async findWorkingProxy() {
    console.log('üîç –ò—â—É —Ä–∞–±–æ—á–∏–π –ø—Ä–æ–∫—Å–∏ –¥–ª—è OpenAI...');
    
    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –ø—Ä–æ–∫—Å–∏
    await this.fetchFreeProxies();
    
    // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ—Å—Ç–∏
    const shuffled = this.freeProxies.sort(() => 0.5 - Math.random());
    
    for (const proxy of shuffled.slice(0, 20)) { // –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 20
      console.log(`üß™ –¢–µ—Å—Ç–∏—Ä—É—é: ${proxy}`);
      
      const result = await this.testProxy(proxy);
      
      if (result.success && result.country !== 'BY') {
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω —Ä–∞–±–æ—á–∏–π –ø—Ä–æ–∫—Å–∏! –°—Ç—Ä–∞–Ω–∞: ${result.country}`);
        this.workingProxy = proxy;
        return proxy;
      } else {
        console.log(`‚ùå ${proxy} - ${result.error || '–ë–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –∏–∑ BY'}`);
      }
    }
    
    console.log('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω —Ä–∞–±–æ—á–∏–π –ø—Ä–æ–∫—Å–∏');
    return null;
  }

  // –û–±–Ω–æ–≤–∏—Ç—å .env.local —Å —Ä–∞–±–æ—á–∏–º –ø—Ä–æ–∫—Å–∏
  async updateEnvWithProxy() {
    const proxy = await this.findWorkingProxy();
    
    if (proxy) {
      const fs = require('fs');
      const path = require('path');
      
      const envPath = path.join(process.cwd(), '.env.local');
      let envContent = '';
      
      try {
        envContent = fs.readFileSync(envPath, 'utf8');
      } catch (err) {
        console.log('–°–æ–∑–¥–∞—é –Ω–æ–≤—ã–π .env.local');
      }
      
      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –ø—Ä–æ–∫—Å–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      envContent = envContent.replace(/OPENAI_PROXY_URL=.*/g, '');
      envContent = envContent.replace(/OPENAI_BASE_URL=.*/g, '');
      
      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ–∫—Å–∏
      if (proxy.includes('api.') || proxy.includes('.com/v1')) {
        // –≠—Ç–æ endpoint, –Ω–µ –ø—Ä–æ–∫—Å–∏
        envContent += `\nOPENAI_BASE_URL=${proxy}`;
      } else {
        // –≠—Ç–æ –ø—Ä–æ–∫—Å–∏
        envContent += `\nOPENAI_PROXY_URL=${proxy}`;
        envContent += `\nOPENAI_BASE_URL=https://api.openai.com/v1`;
      }
      
      fs.writeFileSync(envPath, envContent);
      console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω .env.local —Å —Ä–∞–±–æ—á–∏–º –ø—Ä–æ–∫—Å–∏');
      
      return true;
    }
    
    return false;
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â–∏–π IP
  async checkCurrentIP() {
    try {
      const response = await axios.get('https://ipinfo.io/json');
      console.log(`üåê –¢–µ–∫—É—â–∏–π IP: ${response.data.ip} (${response.data.country})`);
      return response.data;
    } catch (error) {
      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å IP');
      return null;
    }
  }
}

// –ï—Å–ª–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  const manager = new ProxyManager();
  
  (async () => {
    console.log('üöÄ –ó–∞–ø—É—Å–∫ ProxyManager...');
    
    await manager.checkCurrentIP();
    
    const success = await manager.updateEnvWithProxy();
    
    if (success) {
      console.log('üéâ –ü—Ä–æ–∫—Å–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω! –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: npm run dev');
    } else {
      console.log('üòî –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—á–∏–π –ø—Ä–æ–∫—Å–∏');
      console.log('üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:');
      console.log('1. –í–∫–ª—é—á–∏—Ç—å VPN –≤—Ä—É—á–Ω—É—é');
      console.log('2. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–∏—Å');
      console.log('3. –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ (–ø—Ä–æ–∫—Å–∏ —á–∞—Å—Ç–æ –º–µ–Ω—è—é—Ç—Å—è)');
    }
  })();
}

module.exports = ProxyManager;