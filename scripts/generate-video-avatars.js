require('dotenv').config({ path: '.env.local' });

const specialistsToGenerate = [
  {
    id: 'alex-ai',
    name: 'Alex AI',
    type: 'ai_specialist',
    style: 'professional'
  },
  {
    id: 'viktor-reels',
    name: 'Viktor Reels', 
    type: 'ai_specialist',
    style: 'creative'
  },
  {
    id: 'luna-design',
    name: 'Luna Design',
    type: 'ai_specialist', 
    style: 'modern'
  },
  {
    id: 'max-bot',
    name: 'Max Bot',
    type: 'ai_specialist',
    style: 'tech'
  }
];

async function generateVideoAvatars() {
  console.log('üé¨ –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—Ç–∏–ª—å–Ω—ã—Ö –≤–∏–¥–µ–æ –∞–≤–∞—Ç–∞—Ä–æ–∫...\n');

  for (const specialist of specialistsToGenerate) {
    try {
      console.log(`üìπ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∏–¥–µ–æ –∞–≤–∞—Ç–∞—Ä–∫—É –¥–ª—è ${specialist.name}...`);
      
      const response = await fetch('http://localhost:3000/api/generate-video-avatar', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          specialistId: specialist.id,
          specialistName: specialist.name,
          specialistType: specialist.type,
          style: specialist.style,
          duration: 5,
          resolution: '1080p'
        })
      });

      const result = await response.json();

      if (result.success) {
        console.log(`‚úÖ ${specialist.name}:`);
        console.log(`   üìπ –í–∏–¥–µ–æ: ${result.data.videoUrl}`);
        console.log(`   üñºÔ∏è  –ü—Ä–µ–≤—å—é: ${result.data.thumbnailUrl}`);
        console.log(`   üé® –°—Ç–∏–ª—å: ${result.data.style}`);
        console.log(`   ‚è±Ô∏è  –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${result.data.duration}—Å`);
        if (result.data.metadata) {
          console.log(`   üé≠ –õ–∏—á–Ω–æ—Å—Ç—å: ${result.data.metadata.personality}`);
          console.log(`   üíº –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: ${result.data.metadata.expertise}`);
        }
        console.log('');
      } else {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –¥–ª—è ${specialist.name}:`, result.error);
      }

      // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –≥–µ–Ω–µ—Ä–∞—Ü–∏—è–º–∏
      await new Promise(resolve => setTimeout(resolve, 1000));

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–ª—è ${specialist.name}:`, error.message);
    }
  }

  console.log('üéâ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤–∏–¥–µ–æ –∞–≤–∞—Ç–∞—Ä–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
}

async function testSingleAvatar() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–¥–Ω–æ–π –∞–≤–∞—Ç–∞—Ä–∫–∏...\n');
  
  try {
    const response = await fetch('http://localhost:3000/api/generate-video-avatar', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        specialistId: 'viktor-reels',
        specialistName: 'Viktor Reels',
        specialistType: 'ai_specialist',
        style: 'creative',
        duration: 5,
        resolution: '1080p'
      })
    });

    const result = await response.json();
    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç:', JSON.stringify(result, null, 2));

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error.message);
  }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const args = process.argv.slice(2);

if (args.includes('--test')) {
  testSingleAvatar();
} else if (args.includes('--all')) {
  generateVideoAvatars();
} else {
  console.log('üé¨ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –≤–∏–¥–µ–æ –∞–≤–∞—Ç–∞—Ä–æ–∫ –¥–ª—è AI —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤\n');
  console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:');
  console.log('  node scripts/generate-video-avatars.js --test   # –¢–µ—Å—Ç –æ–¥–Ω–æ–π –∞–≤–∞—Ç–∞—Ä–∫–∏');
  console.log('  node scripts/generate-video-avatars.js --all    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –∞–≤–∞—Ç–∞—Ä–æ–∫');
  console.log('');
  console.log('üí° –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ development —Å–µ—Ä–≤–µ—Ä: npm run dev');
}