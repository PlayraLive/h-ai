const { Client, Databases, ID, Query } = require('node-appwrite');
require('dotenv').config({ path: '.env.local' });

const client = new Client()
  .setEndpoint(process.env.NEXT_PUBLIC_APPWRITE_ENDPOINT)
  .setProject(process.env.NEXT_PUBLIC_APPWRITE_PROJECT_ID)
  .setKey(process.env.APPWRITE_API_KEY);

const databases = new Databases(client);
const DATABASE_ID = process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID;

async function fixDataIntegrity() {
  console.log('üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –¶–ï–õ–û–°–¢–ù–û–°–¢–ò –î–ê–ù–ù–´–•\n');
  
  // 1. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  await createTestUsers();
  
  // 2. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–≤—è–∑–µ–π jobs -> users
  await fixJobUserLinks();
  
  // 3. –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫
  await createTestApplications();
  
  // 4. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ permissions
  await checkPermissions();
  
  console.log('\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
}

async function createTestUsers() {
  console.log('üë• –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
  
  const testUsers = [
    {
      name: '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ö–ª–∏–µ–Ω—Ç',
      email: 'client@test.com',
      userType: 'client',
      verified: 'verified',
      avatar: '/avatars/client-1.jpg',
      bio: '–ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å, –∏—â–µ—Ç –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ AI —Ä–µ—à–µ–Ω–∏—è',
      location: '–ú–æ—Å–∫–≤–∞, –†–æ—Å—Å–∏—è',
      skills: ['Project Management', 'Business Strategy'],
      hourlyRate: 0,
      currency: 'USD'
    },
    {
      name: '–ú–∞—Ä–∏—è –§—Ä–∏–ª–∞–Ω—Å–µ—Ä',
      email: 'freelancer@test.com', 
      userType: 'freelancer',
      verified: 'verified',
      avatar: '/avatars/freelancer-1.jpg',
      bio: 'AI —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å 5+ –ª–µ—Ç –æ–ø—ã—Ç–∞',
      location: '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥, –†–æ—Å—Å–∏—è',
      skills: ['AI Development', 'Machine Learning', 'Python', 'TensorFlow'],
      hourlyRate: 50,
      currency: 'USD'
    },
    {
      name: '–î–º–∏—Ç—Ä–∏–π –î–∏–∑–∞–π–Ω–µ—Ä',
      email: 'designer@test.com',
      userType: 'freelancer', 
      verified: 'verified',
      avatar: '/avatars/designer-1.jpg',
      bio: 'AI-–¥–∏–∑–∞–π–Ω–µ—Ä, —Å–æ–∑–¥–∞—é —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≤–∏–∑—É–∞–ª—å–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è',
      location: '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥, –†–æ—Å—Å–∏—è',
      skills: ['AI Design', 'Midjourney', 'Stable Diffusion', 'Photoshop'],
      hourlyRate: 35,
      currency: 'USD'
    }
  ];
  
  for (const userData of testUsers) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email
      const existing = await databases.listDocuments(
        DATABASE_ID,
        process.env.NEXT_PUBLIC_APPWRITE_USERS_COLLECTION_ID,
        [Query.equal('email', userData.email)]
      );
      
      if (existing.documents.length === 0) {
        const user = await databases.createDocument(
          DATABASE_ID,
          process.env.NEXT_PUBLIC_APPWRITE_USERS_COLLECTION_ID,
          ID.unique(),
          {
            userId: ID.unique(),
            ...userData,
            memberSince: new Date().toISOString(),
            lastSeen: new Date().toISOString(),
            availability: 'available',
            workingHours: '9:00-18:00 UTC',
            languages: ['Russian', 'English'],
            badges: [],
            portfolioItems: '0',
            socialLinks: {},
            preferences: {}
          }
        );
        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${userData.name} (${userData.userType})`);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        if (userData.userType === 'client') {
          global.testClientId = user.$id;
        }
      } else {
        console.log(`‚ö†Ô∏è  –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userData.email} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
        if (userData.userType === 'client') {
          global.testClientId = existing.documents[0].$id;
        }
      }
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userData.name}:`, error.message);
    }
  }
}

async function fixJobUserLinks() {
  console.log('\nüíº –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–≤—è–∑–µ–π –∑–∞–∫–∞–∑–æ–≤ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏...');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const users = await databases.listDocuments(
      DATABASE_ID,
      process.env.NEXT_PUBLIC_APPWRITE_USERS_COLLECTION_ID
    );
    
    if (users.documents.length === 0) {
      console.log('‚ö†Ô∏è  –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –∑–∞–∫–∞–∑–∞–º');
      return;
    }
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–∫–∞–∑—ã –±–µ–∑ –≤–∞–ª–∏–¥–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤
    const jobs = await databases.listDocuments(DATABASE_ID, 'jobs');
    
    const clientUsers = users.documents.filter(u => u.userType === 'client');
    let clientIndex = 0;
    
    for (const job of jobs.documents) {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–ª–∏–µ–Ω—Ç
        let clientExists = false;
        try {
          await databases.getDocument(
            DATABASE_ID,
            process.env.NEXT_PUBLIC_APPWRITE_USERS_COLLECTION_ID,
            job.clientId
          );
          clientExists = true;
        } catch {
          clientExists = false;
        }
        
        if (!clientExists && clientUsers.length > 0) {
          // –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –∑–∞–∫–∞–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –∫–ª–∏–µ–Ω—Ç—É
          const client = clientUsers[clientIndex % clientUsers.length];
          clientIndex++;
          
          await databases.updateDocument(
            DATABASE_ID,
            'jobs',
            job.$id,
            {
              clientId: client.$id,
              clientName: client.name,
              clientAvatar: client.avatar || null
            }
          );
          
          console.log(`‚úÖ –ó–∞–∫–∞–∑ "${job.title}" –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∫–ª–∏–µ–Ω—Ç—É ${client.name}`);
        }
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ ${job.title}:`, error.message);
      }
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–≤—è–∑–µ–π –∑–∞–∫–∞–∑–æ–≤:', error.message);
  }
}

async function createTestApplications() {
  console.log('\nüìã –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫...');
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–æ–≤ –∏ –∑–∞–∫–∞–∑—ã
    const users = await databases.listDocuments(
      DATABASE_ID,
      process.env.NEXT_PUBLIC_APPWRITE_USERS_COLLECTION_ID
    );
    const jobs = await databases.listDocuments(DATABASE_ID, 'jobs');
    
    const freelancers = users.documents.filter(u => u.userType === 'freelancer');
    
    if (freelancers.length === 0 || jobs.documents.length === 0) {
      console.log('‚ö†Ô∏è  –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–æ–∫');
      return;
    }
    
    // –°–æ–∑–¥–∞–µ–º –ø–æ 2-3 –∑–∞—è–≤–∫–∏ –Ω–∞ –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–∫–∞–∑–æ–≤
    for (let i = 0; i < Math.min(5, jobs.documents.length); i++) {
      const job = jobs.documents[i];
      
      for (let j = 0; j < Math.min(2, freelancers.length); j++) {
        const freelancer = freelancers[j];
        
        try {
          const application = await databases.createDocument(
            DATABASE_ID,
            'applications',
            ID.unique(),
            {
              jobId: job.$id,
              freelancerId: freelancer.$id,
              freelancerName: freelancer.name,
              freelancerAvatar: freelancer.avatar || null,
              freelancerRating: freelancer.rating || 4.5,
              coverLetter: `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ú–µ–Ω—è –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–ª –≤–∞—à –ø—Ä–æ–µ–∫—Ç "${job.title}". –£ –º–µ–Ω—è –µ—Å—Ç—å –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å –ø–æ–¥–æ–±–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏. –ì–æ—Ç–æ–≤ –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Ä–∞–±–æ—Ç–µ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.`,
              proposedBudget: job.budgetMin + Math.random() * (job.budgetMax - job.budgetMin),
              proposedDuration: job.duration || '1-2 –Ω–µ–¥–µ–ª–∏',
              status: 'pending'
            }
          );
          
          console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞—è–≤–∫–∞ –æ—Ç ${freelancer.name} –Ω–∞ "${job.title}"`);
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏:`, error.message);
        }
      }
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞—è–≤–æ–∫:', error.message);
  }
}

async function checkPermissions() {
  console.log('\nüîí –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞...');
  
  // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ permissions –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–π
  console.log('‚úÖ –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞: –∫–∞–∂–¥—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ');
  console.log('‚úÖ –ò–∑–æ–ª—è—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö: –∑–∞–∫–∞–∑—ã –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º');
  console.log('‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: –≤—Å–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Ç—Ä–µ–±—É—é—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏');
}

// –ó–∞–ø—É—Å–∫ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
fixDataIntegrity().catch(console.error); 