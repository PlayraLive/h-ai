const { Client, Databases, ID } = require('node-appwrite');

// Initialize Appwrite client
const client = new Client()
  .setEndpoint(process.env.NEXT_PUBLIC_APPWRITE_ENDPOINT)
  .setProject(process.env.NEXT_PUBLIC_APPWRITE_PROJECT_ID)
  .setKey(process.env.APPWRITE_API_KEY); // Server API key

const databases = new Databases(client);
const DATABASE_ID = process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID;

// Collections that need proper permissions
const collections = [
  'user_profiles',
  'user_progress', 
  'achievements',
  'onboarding_steps',
  'ratings_reviews',
  'favorites',
  'jobs',
  'applications',
  'projects',
  'messages',
  'conversations',
  'notifications',
  'invitations'
];

async function setupCollectionPermissions() {
  console.log('üîê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–π...\n');
  
  for (const collectionId of collections) {
    try {
      console.log(`üìã –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∞–≤ –¥–ª—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏: ${collectionId}`);
      
      // Get collection details
      const collection = await databases.getCollection(DATABASE_ID, collectionId);
      console.log(`  ‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞: ${collection.name}`);
      
      // Update collection permissions
      // Allow read/write for authenticated users
      await databases.updateCollection(
        DATABASE_ID,
        collectionId,
        collection.name,
        undefined, // description
        undefined, // enabled
        undefined, // documentSecurity
        [
          // Allow read for any authenticated user
          {
            permission: 'read',
            roles: ['any']
          },
          // Allow write for authenticated users
          {
            permission: 'write', 
            roles: ['users']
          },
          // Allow update for document owners
          {
            permission: 'update',
            roles: ['users']
          },
          // Allow delete for document owners
          {
            permission: 'delete',
            roles: ['users']
          }
        ]
      );
      
      console.log(`  ‚úÖ –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è ${collectionId}`);
      
    } catch (error) {
      if (error.code === 404) {
        console.log(`  ‚ö†Ô∏è –ö–æ–ª–ª–µ–∫—Ü–∏—è ${collectionId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
      } else {
        console.error(`  ‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∞–≤ –¥–ª—è ${collectionId}:`, error.message);
      }
    }
  }
  
  console.log('\nüéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
  console.log('\nüìù –¢–µ–ø–µ—Ä—å –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–º–æ–≥—É—Ç:');
  console.log('   ‚úÖ –ß–∏—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤—Å–µ—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π');
  console.log('   ‚úÖ –°–æ–∑–¥–∞–≤–∞—Ç—å –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏');
  console.log('   ‚úÖ –û–±–Ω–æ–≤–ª—è—Ç—å —Å–≤–æ–∏ –∑–∞–ø–∏—Å–∏');
  console.log('   ‚úÖ –£–¥–∞–ª—è—Ç—å —Å–≤–æ–∏ –∑–∞–ø–∏—Å–∏');
}

setupCollectionPermissions().catch(console.error); 