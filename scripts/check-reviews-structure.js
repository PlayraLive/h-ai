const { Client, Databases } = require('node-appwrite');
require('dotenv').config({ path: '.env.local' });

const client = new Client()
  .setEndpoint(process.env.NEXT_PUBLIC_APPWRITE_ENDPOINT)
  .setProject(process.env.NEXT_PUBLIC_APPWRITE_PROJECT_ID)
  .setKey(process.env.APPWRITE_API_KEY);

const databases = new Databases(client);

async function checkReviewsStructure() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–æ–ª–ª–µ–∫—Ü–∏–∏ Reviews...\n');

    const reviewsCollection = 'reviews';
    
    // –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    const collection = await databases.getCollection(
      process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID,
      reviewsCollection
    );

    console.log('üìã –ê—Ç—Ä–∏–±—É—Ç—ã –∫–æ–ª–ª–µ–∫—Ü–∏–∏ Reviews:');
    collection.attributes.forEach(attr => {
      console.log(`  - ${attr.key}: ${attr.type}${attr.required ? ' (required)' : ''}`);
    });

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
    const reviews = await databases.listDocuments(
      process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID,
      reviewsCollection,
      undefined, // queries
      5 // limit
    );

    console.log(`\nüìù –ù–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: ${reviews.documents.length}`);
    
    if (reviews.documents.length > 0) {
      console.log('\nüìÑ –ü—Ä–∏–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞:');
      const sample = reviews.documents[0];
      Object.keys(sample).forEach(key => {
        if (!key.startsWith('$')) {
          console.log(`  ${key}: ${sample[key]}`);
        }
      });
    }

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
}

checkReviewsStructure();
