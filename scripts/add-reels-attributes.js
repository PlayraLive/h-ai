const { Client, Databases } = require('node-appwrite');
require('dotenv').config({ path: '.env.local' });

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Appwrite
const client = new Client()
    .setEndpoint(process.env.NEXT_PUBLIC_APPWRITE_ENDPOINT)
    .setProject(process.env.NEXT_PUBLIC_APPWRITE_PROJECT_ID)
    .setKey(process.env.APPWRITE_API_KEY);

const databases = new Databases(client);
const DATABASE_ID = process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID;
const COLLECTION_ID = 'reels';

// –°–ø–∏—Å–æ–∫ –∞—Ç—Ä–∏–±—É—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å
const missingAttributes = [
    { key: 'isPremium', type: 'boolean', required: false, default: false },
    { key: 'views', type: 'integer', required: false, default: 0 },
    { key: 'likes', type: 'integer', required: false, default: 0 },
    { key: 'rating', type: 'float', required: false, default: 0 },
    { key: 'duration', type: 'integer', required: false, default: 0 },
    { key: 'price', type: 'float', required: false, default: 0 },
    { key: 'deliveryTime', type: 'string', size: 100, required: false, default: '1-3 days' },
    { key: 'features', type: 'string', size: 2000, required: false, default: '[]' },
    { key: 'creatorAvatar', type: 'string', size: 500, required: false, default: '/images/default-avatar.png' },
    { key: 'requirements', type: 'string', size: 1000, required: false, default: '' }
];

async function addMissingAttributes() {
    try {
        console.log('üîß –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∞—Ç—Ä–∏–±—É—Ç—ã –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é reels...');

        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∞—Ç—Ä–∏–±—É—Ç—ã
        console.log('üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–æ–ª–ª–µ–∫—Ü–∏–∏...');
        const collection = await databases.getCollection(DATABASE_ID, COLLECTION_ID);
        const existingAttributes = collection.attributes.map(attr => attr.key);

        console.log('‚úÖ –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∞—Ç—Ä–∏–±—É—Ç—ã:', existingAttributes.join(', '));

        let addedCount = 0;
        let skippedCount = 0;

        for (const attr of missingAttributes) {
            if (existingAttributes.includes(attr.key)) {
                console.log(`‚è≠Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º "${attr.key}" - —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
                skippedCount++;
                continue;
            }

            try {
                console.log(`‚ûï –î–æ–±–∞–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç: ${attr.key} (${attr.type})`);

                if (attr.type === 'boolean') {
                    await databases.createBooleanAttribute(
                        DATABASE_ID,
                        COLLECTION_ID,
                        attr.key,
                        attr.required,
                        attr.default
                    );
                } else if (attr.type === 'integer') {
                    await databases.createIntegerAttribute(
                        DATABASE_ID,
                        COLLECTION_ID,
                        attr.key,
                        attr.required,
                        undefined, // min
                        undefined, // max
                        attr.default
                    );
                } else if (attr.type === 'float') {
                    await databases.createFloatAttribute(
                        DATABASE_ID,
                        COLLECTION_ID,
                        attr.key,
                        attr.required,
                        undefined, // min
                        undefined, // max
                        attr.default
                    );
                } else if (attr.type === 'string') {
                    await databases.createStringAttribute(
                        DATABASE_ID,
                        COLLECTION_ID,
                        attr.key,
                        attr.size,
                        attr.required,
                        attr.default
                    );
                }

                console.log(`‚úÖ –ê—Ç—Ä–∏–±—É—Ç "${attr.key}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω`);
                addedCount++;

                // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É —Å–æ–∑–¥–∞–Ω–∏–µ–º –∞—Ç—Ä–∏–±—É—Ç–æ–≤
                await new Promise(resolve => setTimeout(resolve, 500));

            } catch (error) {
                if (error.code === 409) {
                    console.log(`‚ö†Ô∏è  –ê—Ç—Ä–∏–±—É—Ç "${attr.key}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
                    skippedCount++;
                } else {
                    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞—Ç—Ä–∏–±—É—Ç–∞ "${attr.key}":`, error.message);
                }
            }
        }

        console.log(`\nüéâ –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–µ–Ω!`);
        console.log(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: ${addedCount} –∞—Ç—Ä–∏–±—É—Ç–æ–≤`);
        console.log(`‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ: ${skippedCount} –∞—Ç—Ä–∏–±—É—Ç–æ–≤`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
        console.log('\nüìã –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∫–æ–ª–ª–µ–∫—Ü–∏–∏...');
        const updatedCollection = await databases.getCollection(DATABASE_ID, COLLECTION_ID);
        console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã:');
        updatedCollection.attributes.forEach(attr => {
            console.log(`   ‚Ä¢ ${attr.key} (${attr.type}) - ${attr.required ? '–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π' : '–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π'}`);
        });

        console.log('\n‚ö†Ô∏è  –í–ê–ñ–ù–û: –ü–æ–¥–æ–∂–¥–∏—Ç–µ 1-2 –º–∏–Ω—É—Ç—ã, –ø–æ–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω—è—Ç—Å—è –≤ Appwrite, –∑–∞—Ç–µ–º –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.');

    } catch (error) {
        console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error.message);
        console.log('\nüîß –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:');
        console.log('   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å API –∫–ª—é—á–∞');
        console.log('   2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ API –∫–ª—é—á –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ö–µ–º—ã');
        console.log('   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ "reels"');
        console.log('   4. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∞—Ç—Ä–∏–±—É—Ç—ã –≤—Ä—É—á–Ω—É—é –≤ Appwrite Console');
    }
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞—Ç—Ä–∏–±—É—Ç–æ–≤
async function main() {
    try {
        console.log('üîó –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Appwrite...');
        console.log(`üì° Endpoint: ${process.env.NEXT_PUBLIC_APPWRITE_ENDPOINT}`);
        console.log(`üóÇÔ∏è  Project: ${process.env.NEXT_PUBLIC_APPWRITE_PROJECT_ID}`);
        console.log(`üíæ Database: ${process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID}`);
        console.log(`üì¶ Collection: ${COLLECTION_ID}`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        await databases.get(DATABASE_ID);
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ!\n');

        await addMissingAttributes();

    } catch (error) {
        console.error('üí• –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:', error.message);
        console.log('\nüîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:');
        console.log('   1. –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ .env.local');
        console.log('   2. –ù–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞ —Å –ø—Ä–∞–≤–∞–º–∏ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ö–µ–º—ã');
        console.log('   3. –°—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ reels');
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
main();
