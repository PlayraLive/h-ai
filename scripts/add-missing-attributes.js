const { Client, Databases } = require("node-appwrite");
require("dotenv").config({ path: ".env.local" });

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
const client = new Client()
  .setEndpoint(process.env.NEXT_PUBLIC_APPWRITE_ENDPOINT)
  .setProject(process.env.NEXT_PUBLIC_APPWRITE_PROJECT_ID)
  .setKey(process.env.APPWRITE_API_KEY);

const databases = new Databases(client);
const DATABASE_ID = process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID;

async function addMissingAttributes() {
  try {
    console.log("üöÄ Adding missing attributes to applications collection...");

    // –î–æ–±–∞–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç attachments –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é applications
    try {
      await databases.createStringAttribute(
        DATABASE_ID,
        "applications",
        "attachments",
        2000, // —Ä–∞–∑–º–µ—Ä
        false, // –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ
        null // –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      );
      console.log("‚úÖ Added attachments attribute to applications collection");
    } catch (error) {
      if (error.code === 409) {
        console.log("‚ÑπÔ∏è Attachments attribute already exists in applications collection");
      } else {
        console.error("‚ùå Error adding attachments attribute:", error);
      }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç clientResponse –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é applications
    try {
      await databases.createStringAttribute(
        DATABASE_ID,
        "applications",
        "clientResponse",
        2000, // —Ä–∞–∑–º–µ—Ä
        false, // –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ
        null // –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      );
      console.log("‚úÖ Added clientResponse attribute to applications collection");
    } catch (error) {
      if (error.code === 409) {
        console.log("‚ÑπÔ∏è ClientResponse attribute already exists in applications collection");
      } else {
        console.error("‚ùå Error adding clientResponse attribute:", error);
      }
    }

    console.log("üéâ Missing attributes check completed!");
  } catch (error) {
    console.error("‚ùå Error:", error);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
addMissingAttributes(); 