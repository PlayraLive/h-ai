#!/usr/bin/env node

const { Client, Databases } = require('node-appwrite');
require('dotenv').config({ path: '.env.local' });

const client = new Client()
  .setEndpoint(process.env.NEXT_PUBLIC_APPWRITE_ENDPOINT)
  .setProject(process.env.NEXT_PUBLIC_APPWRITE_PROJECT_ID)
  .setKey(process.env.APPWRITE_API_KEY);

const databases = new Databases(client);

async function checkCollections() {
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è—é —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏...\n');

    const collections = await databases.listCollections(process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID);
    
    console.log('üìã –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏:');
    collections.collections.forEach(c => {
      console.log(`  - ${c.name} (${c.$id})`);
    });

    console.log(`\n‚úÖ –í—Å–µ–≥–æ –∫–æ–ª–ª–µ–∫—Ü–∏–π: ${collections.collections.length}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
    const requiredCollections = ['Users', 'Jobs', 'Reviews', 'Projects', 'Notifications'];
    const existingNames = collections.collections.map(c => c.name);
    
    console.log('\nüéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–æ–≤:');
    requiredCollections.forEach(name => {
      const exists = existingNames.includes(name);
      console.log(`  ${exists ? '‚úÖ' : '‚ùå'} ${name}`);
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
  }
}

checkCollections();
