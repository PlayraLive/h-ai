const { Client, Databases } = require('node-appwrite');
require('dotenv').config({ path: '.env.local' });

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Appwrite
const client = new Client()
  .setEndpoint(process.env.NEXT_PUBLIC_APPWRITE_ENDPOINT)
  .setProject(process.env.NEXT_PUBLIC_APPWRITE_PROJECT_ID)
  .setKey('standard_795030ac0f195560203a1f5c28de7d52fd1adfa9b865f7be95ba0e4539ec8c398b59bd918403fbbf2b263a2b19d0d3085e1f2ff2aee7aff5124022b96027fca66eb3801848e971750804e99036a7022af2a181dd81be8f1485009203142bc0a7083b134a94623176659b14bde95e214470ea4f3d4b95ae9418752617d8da70f4');

const databases = new Databases(client);
const DATABASE_ID = process.env.NEXT_PUBLIC_APPWRITE_DATABASE_ID;

async function sleep(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

async function createCryptoEscrowsCollection() {
  try {
    console.log('üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ crypto_escrows...');

    // –°–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é
    await databases.createCollection(
      DATABASE_ID,
      'crypto_escrows',
      'Crypto Escrows',
      [
        'create("users")',
        'read("users")',
        'update("users")',
        'delete("users")'
      ]
    );

    console.log('‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è crypto_escrows —Å–æ–∑–¥–∞–Ω–∞');
    await sleep(2000); // –ñ–¥–µ–º 2 —Å–µ–∫—É–Ω–¥—ã

    // –î–æ–±–∞–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã
    const attributes = [
      { name: 'jobId', type: 'string', size: 255, required: true },
      { name: 'contractId', type: 'string', size: 255, required: true },
      { name: 'txHash', type: 'string', size: 255, required: true },
      { name: 'network', type: 'string', size: 50, required: true },
      { name: 'token', type: 'string', size: 20, required: true },
      { name: 'amount', type: 'double', required: true },
      { name: 'platformFee', type: 'double', required: true },
      { name: 'milestones', type: 'integer', required: false },
      { name: 'completedMilestones', type: 'integer', required: false },
      { name: 'deadline', type: 'string', size: 255, required: false },
      { name: 'clientAddress', type: 'string', size: 255, required: true },
      { name: 'freelancerAddress', type: 'string', size: 255, required: true },
      { name: 'status', type: 'string', size: 50, required: true },
      { name: 'events', type: 'string', size: 10000, required: false },
      { name: 'releasedAt', type: 'string', size: 255, required: false },
      { name: 'releaseTxHash', type: 'string', size: 255, required: false },
      { name: 'releaseType', type: 'string', size: 50, required: false },
      { name: 'createdAt', type: 'string', size: 255, required: true },
      { name: 'updatedAt', type: 'string', size: 255, required: true }
    ];

    for (const attr of attributes) {
      console.log(`  ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞—Ç—Ä–∏–±—É—Ç–∞: ${attr.name}`);
      
      if (attr.type === 'string') {
        await databases.createStringAttribute(
          DATABASE_ID,
          'crypto_escrows',
          attr.name,
          attr.size,
          attr.required
        );
      } else if (attr.type === 'double') {
        await databases.createFloatAttribute(
          DATABASE_ID,
          'crypto_escrows',
          attr.name,
          attr.required
        );
      } else if (attr.type === 'integer') {
        await databases.createIntegerAttribute(
          DATABASE_ID,
          'crypto_escrows',
          attr.name,
          attr.required
        );
      }
      
      await sleep(1000); // –ñ–¥–µ–º 1 —Å–µ–∫—É–Ω–¥—É –º–µ–∂–¥—É –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏
    }

    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
    console.log('  üìä –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤...');
    await sleep(2000);
    
    await databases.createIndex(
      DATABASE_ID,
      'crypto_escrows',
      'jobId_index',
      'key',
      ['jobId']
    );

    await sleep(1000);
    
    await databases.createIndex(
      DATABASE_ID,
      'crypto_escrows',
      'contractId_index',
      'key',
      ['contractId']
    );

    await sleep(1000);
    
    await databases.createIndex(
      DATABASE_ID,
      'crypto_escrows',
      'status_index',
      'key',
      ['status']
    );

    console.log('‚úÖ crypto_escrows –∫–æ–ª–ª–µ–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é');
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è crypto_escrows:', error.message);
    return false;
  }
}

async function createDisputesCollection() {
  try {
    console.log('üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ disputes...');

    await databases.createCollection(
      DATABASE_ID,
      'disputes',
      'Disputes',
      [
        'create("users")',
        'read("users")',
        'update("users")',
        'delete("users")'
      ]
    );

    console.log('‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è disputes —Å–æ–∑–¥–∞–Ω–∞');
    await sleep(2000);

    const attributes = [
      { name: 'jobId', type: 'string', size: 255, required: true },
      { name: 'contractId', type: 'string', size: 255, required: true },
      { name: 'escrowId', type: 'string', size: 255, required: true },
      { name: 'initiatorAddress', type: 'string', size: 255, required: true },
      { name: 'initiatorType', type: 'string', size: 20, required: true },
      { name: 'reason', type: 'string', size: 255, required: true },
      { name: 'description', type: 'string', size: 2000, required: false },
      { name: 'evidence', type: 'string', size: 5000, required: false },
      { name: 'status', type: 'string', size: 50, required: true },
      { name: 'resolution', type: 'string', size: 50, required: false },
      { name: 'clientPercentage', type: 'integer', required: false },
      { name: 'freelancerPercentage', type: 'integer', required: false },
      { name: 'arbitratorAddress', type: 'string', size: 255, required: false },
      { name: 'resolutionReason', type: 'string', size: 1000, required: false },
      { name: 'resolutionTxHash', type: 'string', size: 255, required: false },
      { name: 'txHash', type: 'string', size: 255, required: false },
      { name: 'createdAt', type: 'string', size: 255, required: true },
      { name: 'resolvedAt', type: 'string', size: 255, required: false },
      { name: 'updatedAt', type: 'string', size: 255, required: true }
    ];

    for (const attr of attributes) {
      console.log(`  ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞—Ç—Ä–∏–±—É—Ç–∞: ${attr.name}`);
      
      if (attr.type === 'string') {
        await databases.createStringAttribute(
          DATABASE_ID,
          'disputes',
          attr.name,
          attr.size,
          attr.required
        );
      } else if (attr.type === 'integer') {
        await databases.createIntegerAttribute(
          DATABASE_ID,
          'disputes',
          attr.name,
          attr.required
        );
      }
      
      await sleep(1000);
    }

    // –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
    console.log('  üìä –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤...');
    await sleep(2000);
    
    await databases.createIndex(
      DATABASE_ID,
      'disputes',
      'jobId_index',
      'key',
      ['jobId']
    );

    await sleep(1000);
    
    await databases.createIndex(
      DATABASE_ID,
      'disputes',
      'status_index',
      'key',
      ['status']
    );

    console.log('‚úÖ disputes –∫–æ–ª–ª–µ–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é');
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è disputes:', error.message);
    return false;
  }
}

async function main() {
  console.log('üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–π –¥–ª—è –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–µ–π...\n');

  console.log('üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Appwrite...');
  console.log(`   Endpoint: ${process.env.NEXT_PUBLIC_APPWRITE_ENDPOINT}`);
  console.log(`   Project: ${process.env.NEXT_PUBLIC_APPWRITE_PROJECT_ID}`);
  console.log(`   Database: ${DATABASE_ID}\n`);

  const escrowResult = await createCryptoEscrowsCollection();
  console.log(''); // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
  
  const disputeResult = await createDisputesCollection();
  
  console.log('\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:');
  console.log(`   crypto_escrows: ${escrowResult ? '‚úÖ –ì–æ—Ç–æ–≤–æ' : '‚ùå –û—à–∏–±–∫–∞'}`);
  console.log(`   disputes: ${disputeResult ? '‚úÖ –ì–æ—Ç–æ–≤–æ' : '‚ùå –û—à–∏–±–∫–∞'}`);
  
  if (escrowResult && disputeResult) {
    console.log('\nüéâ –í—Å–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    console.log('\nüìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:');
    console.log('1. –ó–∞–¥–µ–ø–ª–æ–π—Ç–µ —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã: cd blockchain && forge script script/DeployTestnet.s.sol --broadcast');
    console.log('2. –û–±–Ω–æ–≤–∏—Ç–µ –∞–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –≤ src/lib/web3/config.ts');
    console.log('3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –∫—Ä–∏–ø—Ç–æ–ø–ª–∞—Ç–µ–∂–∏ –Ω–∞ —Å–∞–π—Ç–µ');
  } else {
    console.log('\n‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å');
    process.exit(1);
  }
}

main().catch(console.error);
