import winston from 'winston';
import chalk from 'chalk';
import fs from 'fs-extra';
import path from 'path';
import { config } from '../config/config.js';

export class Logger {
  constructor(module = 'TestingBot') {
    this.module = module;
    this.winston = this.createWinstonLogger();
  }

  createWinstonLogger() {
    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤
    fs.ensureDirSync(config.paths.logs);

    const logFormat = winston.format.combine(
      winston.format.timestamp({ format: 'YYYY-MM-DD HH:mm:ss' }),
      winston.format.errors({ stack: true }),
      winston.format.printf(({ timestamp, level, message, module, stack }) => {
        const moduleStr = module ? `[${module}]` : '';
        const stackStr = stack ? `\n${stack}` : '';
        return `${timestamp} ${level.toUpperCase()} ${moduleStr} ${message}${stackStr}`;
      })
    );

    return winston.createLogger({
      level: config.logging.level,
      format: logFormat,
      transports: [
        // –§–∞–π–ª –¥–ª—è –≤—Å–µ—Ö –ª–æ–≥–æ–≤
        new winston.transports.File({
          filename: path.join(config.paths.logs, 'testing-bot.log'),
          maxsize: 10 * 1024 * 1024, // 10MB
          maxFiles: config.logging.maxFiles,
          tailable: true
        }),
        // –§–∞–π–ª —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—à–∏–±–æ–∫
        new winston.transports.File({
          filename: path.join(config.paths.logs, 'errors.log'),
          level: 'error',
          maxsize: 10 * 1024 * 1024,
          maxFiles: 5,
          tailable: true
        }),
        // –ö–æ–Ω—Å–æ–ª—å (–µ—Å–ª–∏ –Ω–µ –≤ CI)
        ...(config.environment.ci ? [] : [
          new winston.transports.Console({
            format: winston.format.combine(
              winston.format.colorize(),
              winston.format.simple()
            )
          })
        ])
      ]
    });
  }

  // –ú–µ—Ç–æ–¥—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å —Ü–≤–µ—Ç–Ω—ã–º –≤—ã–≤–æ–¥–æ–º –≤ –∫–æ–Ω—Å–æ–ª—å
  info(message, data = null) {
    console.log(chalk.blue(`‚ÑπÔ∏è  [${this.module}] ${message}`));
    this.winston.info(message, { module: this.module, data });
  }

  success(message, data = null) {
    console.log(chalk.green(`‚úÖ [${this.module}] ${message}`));
    this.winston.info(message, { module: this.module, data });
  }

  warn(message, data = null) {
    console.log(chalk.yellow(`‚ö†Ô∏è  [${this.module}] ${message}`));
    this.winston.warn(message, { module: this.module, data });
  }

  error(message, error = null, data = null) {
    console.log(chalk.red(`‚ùå [${this.module}] ${message}`));
    
    if (error instanceof Error) {
      console.log(chalk.red(`   ${error.message}`));
      if (config.environment.debug && error.stack) {
        console.log(chalk.gray(error.stack));
      }
    }

    this.winston.error(message, { 
      module: this.module, 
      error: error?.message || error,
      stack: error?.stack,
      data 
    });
  }

  debug(message, data = null) {
    if (config.environment.debug) {
      console.log(chalk.gray(`üîç [${this.module}] ${message}`));
    }
    this.winston.debug(message, { module: this.module, data });
  }

  test(testName, status, duration = null, error = null) {
    const statusIcon = {
      'passed': '‚úÖ',
      'failed': '‚ùå',
      'skipped': '‚è≠Ô∏è',
      'running': 'üß™'
    }[status] || '‚ùì';

    const statusColor = {
      'passed': chalk.green,
      'failed': chalk.red,
      'skipped': chalk.yellow,
      'running': chalk.blue
    }[status] || chalk.gray;

    const durationStr = duration ? ` (${duration}ms)` : '';
    const message = `${statusIcon} ${testName}${durationStr}`;
    
    console.log(statusColor(`[${this.module}] ${message}`));
    
    if (error) {
      console.log(chalk.red(`   Error: ${error}`));
    }

    this.winston.info(`Test ${status}: ${testName}`, {
      module: this.module,
      test: testName,
      status,
      duration,
      error
    });
  }

  // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
  testSuite(suiteName, action = 'start') {
    const actionIcon = {
      'start': 'üöÄ',
      'complete': 'üèÅ',
      'failed': 'üí•'
    }[action] || 'üìã';

    const message = `${actionIcon} Test Suite: ${suiteName}`;
    console.log(chalk.cyan(`[${this.module}] ${message}`));
    
    this.winston.info(`Test suite ${action}: ${suiteName}`, {
      module: this.module,
      suite: suiteName,
      action
    });
  }

  performance(metric, value, threshold = null) {
    const isGood = threshold ? value <= threshold : true;
    const icon = isGood ? 'üìà' : 'üìâ';
    const color = isGood ? chalk.green : chalk.red;
    
    const message = `${icon} ${metric}: ${value}${threshold ? ` (threshold: ${threshold})` : ''}`;
    console.log(color(`[${this.module}] ${message}`));
    
    this.winston.info(`Performance metric: ${metric}`, {
      module: this.module,
      metric,
      value,
      threshold,
      status: isGood ? 'good' : 'poor'
    });
  }

  network(method, url, status, duration) {
    const statusColor = status >= 200 && status < 300 ? chalk.green : chalk.red;
    const message = `üåê ${method} ${url} - ${status} (${duration}ms)`;
    
    console.log(statusColor(`[${this.module}] ${message}`));
    
    this.winston.info(`Network request: ${method} ${url}`, {
      module: this.module,
      method,
      url,
      status,
      duration
    });
  }

  screenshot(filename, path) {
    console.log(chalk.magenta(`üì∏ [${this.module}] Screenshot: ${filename}`));
    this.winston.info(`Screenshot taken: ${filename}`, {
      module: this.module,
      filename,
      path
    });
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è AI –∞–Ω–∞–ª–∏–∑–∞
  aiAnalysis(type, confidence, recommendations) {
    const confidenceColor = confidence > 80 ? chalk.green : confidence > 60 ? chalk.yellow : chalk.red;
    console.log(chalk.cyan(`ü§ñ [${this.module}] AI Analysis: ${type}`));
    console.log(confidenceColor(`   Confidence: ${confidence}%`));
    
    if (recommendations && recommendations.length > 0) {
      console.log(chalk.blue(`   Recommendations: ${recommendations.length}`));
    }

    this.winston.info(`AI analysis completed: ${type}`, {
      module: this.module,
      type,
      confidence,
      recommendations: recommendations?.length || 0
    });
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
  monitor(event, data = null) {
    console.log(chalk.purple(`üëÄ [${this.module}] Monitor: ${event}`));
    this.winston.info(`Monitor event: ${event}`, {
      module: this.module,
      event,
      data
    });
  }

  alert(level, message, data = null) {
    const levelIcons = {
      'critical': 'üö®',
      'warning': '‚ö†Ô∏è',
      'info': '‚ÑπÔ∏è'
    };

    const levelColors = {
      'critical': chalk.red.bold,
      'warning': chalk.yellow,
      'info': chalk.blue
    };

    const icon = levelIcons[level] || 'üì¢';
    const color = levelColors[level] || chalk.white;

    console.log(color(`${icon} [${this.module}] ALERT (${level.toUpperCase()}): ${message}`));
    
    this.winston.log(level === 'critical' ? 'error' : level === 'warning' ? 'warn' : 'info', 
      `Alert: ${message}`, {
        module: this.module,
        level,
        data
      }
    );
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
  report(type, data) {
    console.log(chalk.cyan(`üìä [${this.module}] Report: ${type}`));
    this.winston.info(`Report generated: ${type}`, {
      module: this.module,
      type,
      data
    });
  }

  // –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ª–æ–≥–æ–≤
  group(name) {
    console.log(chalk.bold(`\nüìÅ [${this.module}] ${name}`));
    console.log(chalk.gray('‚îÄ'.repeat(50)));
    
    this.winston.info(`Log group start: ${name}`, {
      module: this.module,
      group: name
    });
  }

  groupEnd(name) {
    console.log(chalk.gray('‚îÄ'.repeat(50)));
    console.log(chalk.bold(`üìÅ [${this.module}] End: ${name}\n`));
    
    this.winston.info(`Log group end: ${name}`, {
      module: this.module,
      group: name
    });
  }

  // –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä (–ø—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è)
  progress(current, total, message = '') {
    const percentage = Math.round((current / total) * 100);
    const progressBar = '‚ñà'.repeat(Math.round(percentage / 5)) + '‚ñë'.repeat(20 - Math.round(percentage / 5));
    
    process.stdout.write(`\rüîÑ [${this.module}] ${progressBar} ${percentage}% ${message}`);
    
    if (current === total) {
      console.log(''); // –ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    }
  }

  // –¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  table(title, data) {
    console.log(chalk.cyan(`\nüìã [${this.module}] ${title}`));
    console.table(data);
    
    this.winston.info(`Table: ${title}`, {
      module: this.module,
      title,
      data
    });
  }

  // –°–≤–æ–¥–∫–∞ —Ç–µ—Å—Ç–æ–≤
  summary(results) {
    const { total, passed, failed, skipped, duration } = results;
    
    console.log(chalk.cyan(`\nüìä [${this.module}] Test Summary`));
    console.log(chalk.gray('‚ïê'.repeat(40)));
    console.log(chalk.blue(`Total Tests: ${total}`));
    console.log(chalk.green(`Passed: ${passed}`));
    console.log(chalk.red(`Failed: ${failed}`));
    console.log(chalk.yellow(`Skipped: ${skipped}`));
    console.log(chalk.gray(`Duration: ${duration}ms`));
    console.log(chalk.gray('‚ïê'.repeat(40)));
    
    const successRate = total > 0 ? Math.round((passed / total) * 100) : 0;
    const rateColor = successRate >= 90 ? chalk.green : successRate >= 70 ? chalk.yellow : chalk.red;
    console.log(rateColor(`Success Rate: ${successRate}%\n`));

    this.winston.info('Test summary', {
      module: this.module,
      results
    });
  }

  // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤
  static async cleanupLogs(daysToKeep = 7) {
    try {
      const logsDir = config.paths.logs;
      const files = await fs.readdir(logsDir);
      const cutoffDate = new Date();
      cutoffDate.setDate(cutoffDate.getDate() - daysToKeep);

      for (const file of files) {
        const filePath = path.join(logsDir, file);
        const stats = await fs.stat(filePath);
        
        if (stats.mtime < cutoffDate) {
          await fs.remove(filePath);
          console.log(chalk.gray(`üóëÔ∏è  Removed old log file: ${file}`));
        }
      }
    } catch (error) {
      console.error(chalk.red(`‚ùå Error cleaning up logs: ${error.message}`));
    }
  }
}
