import axios from 'axios';
import fs from 'fs-extra';
import path from 'path';
import { Logger } from '../utils/logger.js';
import { config } from '../config/config.js';

export class AIAgent {
  constructor() {
    this.logger = new Logger('AIAgent');
    this.knowledgeBase = new Map();
    this.patterns = new Map();
    this.solutions = new Map();

    // AI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    this.neuralNetwork = new Map();
    this.learningData = [];
    this.contextMemory = [];
    this.decisionTree = new Map();
    this.adaptiveStrategies = new Map();
    this.behaviorPatterns = new Map();
    this.predictionModel = new Map();
    this.confidence = 0;

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI —Å–∏—Å—Ç–µ–º—ã
    this.initializeAI();
  }

  async initializeAI() {
    this.logger.info('üß† –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π AI —Å–∏—Å—Ç–µ–º—ã...');

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
    this.initializeKnowledgeBase();

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–µ–π—Ä–æ–Ω–Ω—É—é —Å–µ—Ç—å
    this.initializeNeuralNetwork();

    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
    this.setupAdaptiveStrategies();

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—É—á–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    await this.loadLearningData();

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
    this.initializePredictionModel();

    this.logger.success('‚úÖ AI —Å–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
  }

  initializeNeuralNetwork() {
    this.logger.info('üß† –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏...');

    // –ü—Ä–æ—Å—Ç–∞—è –Ω–µ–π—Ä–æ–Ω–Ω–∞—è —Å–µ—Ç—å –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–æ–±–ª–µ–º
    this.neuralNetwork.set('problemClassifier', {
      weights: new Map([
        ['auth_error', 0.8],
        ['network_error', 0.9],
        ['ui_error', 0.7],
        ['performance_error', 0.6],
        ['security_error', 0.95]
      ]),
      biases: new Map([
        ['critical', 0.3],
        ['warning', 0.5],
        ['info', 0.2]
      ]),
      activationFunction: (x) => 1 / (1 + Math.exp(-x)) // Sigmoid
    });

    // –°–µ—Ç—å –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ —Ç–µ—Å—Ç–æ–≤
    this.neuralNetwork.set('testPredictor', {
      weights: new Map([
        ['page_load_time', -0.7],
        ['error_count', -0.9],
        ['element_found', 0.8],
        ['network_stability', 0.6]
      ]),
      threshold: 0.7
    });
  }

  setupAdaptiveStrategies() {
    this.logger.info('üéØ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π...');

    // –°—Ç—Ä–∞—Ç–µ–≥–∏–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø—Ä–æ–±–ª–µ–º
    this.adaptiveStrategies.set('element_not_found', {
      strategies: [
        'try_alternative_selectors',
        'wait_longer',
        'scroll_to_element',
        'check_iframe',
        'wait_for_dynamic_content'
      ],
      successRates: new Map([
        ['try_alternative_selectors', 0.8],
        ['wait_longer', 0.6],
        ['scroll_to_element', 0.4],
        ['check_iframe', 0.3],
        ['wait_for_dynamic_content', 0.7]
      ])
    });

    this.adaptiveStrategies.set('network_timeout', {
      strategies: [
        'retry_request',
        'increase_timeout',
        'check_connectivity',
        'use_fallback_endpoint'
      ],
      successRates: new Map([
        ['retry_request', 0.7],
        ['increase_timeout', 0.5],
        ['check_connectivity', 0.9],
        ['use_fallback_endpoint', 0.6]
      ])
    });
  }

  async loadLearningData() {
    this.logger.info('üìö –ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö...');

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    try {
      const dataPath = path.join(config.paths.data, 'learning_data.json');
      if (await fs.pathExists(dataPath)) {
        const data = await fs.readJson(dataPath);
        this.learningData = data.sessions || [];
        this.logger.success(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${this.learningData.length} —Å–µ—Å—Å–∏–π –æ–±—É—á–µ–Ω–∏—è`);
      } else {
        this.learningData = [];
        this.logger.info('üìù –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –Ω–∞–±–æ—Ä –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö');
      }
    } catch (error) {
      this.logger.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–±—É—á–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ, –Ω–∞—á–∏–Ω–∞–µ–º —Å —á–∏—Å—Ç–æ–≥–æ –ª–∏—Å—Ç–∞');
      this.learningData = [];
    }
  }

  initializePredictionModel() {
    this.logger.info('üîÆ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π...');

    // –ú–æ–¥–µ–ª—å –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ —É—Å–ø–µ—Ö–∞ —Ç–µ—Å—Ç–æ–≤
    this.predictionModel.set('test_success', {
      features: [
        'historical_success_rate',
        'page_complexity',
        'network_conditions',
        'browser_compatibility',
        'time_of_day'
      ],
      weights: [0.4, 0.2, 0.2, 0.1, 0.1],
      accuracy: 0.75
    });

    // –ú–æ–¥–µ–ª—å –¥–ª—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —Ç–∏–ø–∞ –ø—Ä–æ–±–ª–µ–º
    this.predictionModel.set('problem_type', {
      features: [
        'error_keywords',
        'affected_components',
        'user_actions',
        'system_state'
      ],
      weights: [0.3, 0.3, 0.2, 0.2],
      accuracy: 0.82
    });
  }

  initializeKnowledgeBase() {
    // –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π –æ —Ç–∏–ø–∏—á–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö –∏ –∏—Ö —Ä–µ—à–µ–Ω–∏—è—Ö
    this.knowledgeBase.set('auth_errors', {
      patterns: [
        'localStorage is not defined',
        'Cannot read property of undefined',
        'Network request failed',
        'Invalid credentials',
        'Session expired',
        'CORS error'
      ],
      solutions: [
        '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å SSR/CSR —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –¥–ª—è localStorage',
        '–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–≤',
        '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ—Ç–µ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ API endpoints',
        '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö',
        '–†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤',
        '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å CORS –ø–æ–ª–∏—Ç–∏–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ'
      ]
    });

    this.knowledgeBase.set('ui_errors', {
      patterns: [
        'Element not found',
        'Timeout waiting for selector',
        'Element is not clickable',
        'Form validation failed',
        'Page did not load'
      ],
      solutions: [
        '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–ª–µ–∫—Ç–æ—Ä—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤',
        '–£–≤–µ–ª–∏—á–∏—Ç—å —Ç–∞–π–º–∞—É—Ç—ã –∏–ª–∏ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É',
        '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å z-index –∏ –≤–∏–¥–∏–º–æ—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç–æ–≤',
        '–ò—Å–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–æ—Ä–º',
        '–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—ã'
      ]
    });

    this.knowledgeBase.set('performance_issues', {
      patterns: [
        'Slow page load',
        'High memory usage',
        'Large bundle size',
        'Too many requests',
        'Blocking resources'
      ],
      solutions: [
        '–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Ä–µ—Å—É—Ä—Å—ã',
        '–†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å lazy loading',
        '–†–∞–∑–¥–µ–ª–∏—Ç—å –∫–æ–¥ –Ω–∞ —á–∞–Ω–∫–∏',
        '–û–±—ä–µ–¥–∏–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å—ã –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ',
        '–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–≥—Ä—É–∂–∞—Ç—å –Ω–µ–∫—Ä–∏—Ç–∏—á–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã'
      ]
    });
  }

  async analyzeAuthIssues(testResults) {
    this.logger.info('üß† –ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π AI-–∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏');

    const analysis = {
      severity: 'medium',
      category: 'authentication',
      issues: [],
      recommendations: [],
      confidence: 0,
      patterns: [],
      aiPredictions: [],
      adaptiveStrategies: [],
      learningInsights: []
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ –ø–∞–º—è—Ç—å
    this.addToContextMemory('auth_analysis', testResults);

    // AI-–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ–±–ª–µ–º
    const classifiedIssues = await this.classifyIssuesWithAI(testResults);
    analysis.issues = classifiedIssues;

    // –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ —É—Å–ø–µ—Ö–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π
    const predictions = await this.predictFixSuccess(classifiedIssues);
    analysis.aiPredictions = predictions;

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
    const strategies = await this.generateAdaptiveStrategies(classifiedIssues);
    analysis.adaptiveStrategies = strategies;

    // –û–±—É—á–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    await this.learnFromResults(testResults, analysis);

    try {
      // –ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–æ–∫ –≤ –ª–æ–≥–∞—Ö
      const errorLogs = testResults.logs?.filter(log => log.type === 'error') || [];
      const consoleLogs = testResults.logs?.filter(log => log.type === 'log') || [];
      const networkErrors = testResults.issues?.filter(issue => issue.type === 'network_error') || [];
      const jsErrors = testResults.issues?.filter(issue => issue.type === 'javascript_error') || [];

      // –ê–Ω–∞–ª–∏–∑ JavaScript –æ—à–∏–±–æ–∫
      for (const error of jsErrors) {
        const pattern = this.identifyErrorPattern(error.message);
        if (pattern) {
          analysis.patterns.push(pattern);
          analysis.issues.push({
            type: 'javascript_error',
            message: error.message,
            pattern: pattern.name,
            severity: pattern.severity
          });
        }
      }

      // –ê–Ω–∞–ª–∏–∑ —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫
      for (const error of networkErrors) {
        analysis.issues.push({
          type: 'network_error',
          url: error.url,
          method: error.method,
          failure: error.failure,
          severity: this.assessNetworkErrorSeverity(error)
        });
      }

      // –ê–Ω–∞–ª–∏–∑ –Ω–µ—É–¥–∞—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
      const failedTests = testResults.tests?.filter(test => test.status === 'failed') || [];
      for (const test of failedTests) {
        const recommendation = this.generateTestFailureRecommendation(test);
        if (recommendation) {
          analysis.recommendations.push(recommendation);
        }
      }

      // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±—â–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
      analysis.recommendations.push(...this.generateGeneralAuthRecommendations(analysis));

      // –û—Ü–µ–Ω–∫–∞ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –∞–Ω–∞–ª–∏–∑–∞
      analysis.confidence = this.calculateConfidence(analysis);

      // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ–±—â–µ–π —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏
      analysis.severity = this.assessOverallSeverity(analysis);

      this.logger.success(`‚úÖ AI-–∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${analysis.confidence}%`);
      return analysis;

    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ AI-–∞–Ω–∞–ª–∏–∑–∞: ${error.message}`);
      return {
        severity: 'unknown',
        category: 'authentication',
        issues: [],
        recommendations: ['–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å AI-–∞–Ω–∞–ª–∏–∑. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—Ä—É—á–Ω—É—é.'],
        confidence: 0,
        error: error.message
      };
    }
  }

  identifyErrorPattern(errorMessage) {
    const patterns = [
      {
        name: 'localStorage_ssr',
        regex: /localStorage is not defined/i,
        severity: 'high',
        description: '–ü—Ä–æ–±–ª–µ–º–∞ —Å localStorage –≤ SSR –æ–∫—Ä—É–∂–µ–Ω–∏–∏'
      },
      {
        name: 'undefined_property',
        regex: /Cannot read propert(y|ies) .* of (undefined|null)/i,
        severity: 'medium',
        description: '–û–±—Ä–∞—â–µ–Ω–∏–µ –∫ —Å–≤–æ–π—Å—Ç–≤—É –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –æ–±—ä–µ–∫—Ç–∞'
      },
      {
        name: 'network_failure',
        regex: /fetch.*failed|network.*error/i,
        severity: 'high',
        description: '–û—à–∏–±–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞'
      },
      {
        name: 'cors_error',
        regex: /CORS|Cross-Origin/i,
        severity: 'high',
        description: '–û—à–∏–±–∫–∞ CORS –ø–æ–ª–∏—Ç–∏–∫–∏'
      },
      {
        name: 'auth_token',
        regex: /token.*invalid|unauthorized|401/i,
        severity: 'medium',
        description: '–ü—Ä–æ–±–ª–µ–º–∞ —Å —Ç–æ–∫–µ–Ω–æ–º –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏'
      }
    ];

    for (const pattern of patterns) {
      if (pattern.regex.test(errorMessage)) {
        return pattern;
      }
    }

    return null;
  }

  assessNetworkErrorSeverity(error) {
    if (error.url.includes('/api/auth/')) return 'high';
    if (error.url.includes('/api/')) return 'medium';
    if (error.failure?.includes('timeout')) return 'medium';
    return 'low';
  }

  generateTestFailureRecommendation(test) {
    const recommendations = {
      '–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ª–æ–≥–∏–Ω–∞': [
        '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞',
        '–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã',
        '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å URL –º–∞—Ä—à—Ä—É—Ç–æ–≤'
      ],
      '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏': [
        '–£–±–µ–¥–∏—Ç—å—Å—è –≤ –Ω–∞–ª–∏—á–∏–∏ –≤—Å–µ—Ö –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π',
        '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ —ç–ª–µ–º–µ–Ω—Ç–æ–≤',
        '–î–æ–±–∞–≤–∏—Ç—å fallback –¥–ª—è –º–µ–¥–ª–µ–Ω–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏'
      ],
      '–í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª–µ–π': [
        '–ò—Å–ø—Ä–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–µ',
        '–î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é',
        '–£–ª—É—á—à–∏—Ç—å UX —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö'
      ],
      '–ü—Ä–æ—Ü–µ—Å—Å –ª–æ–≥–∏–Ω–∞': [
        '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å API endpoint –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏',
        '–£–±–µ–¥–∏—Ç—å—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö',
        '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏'
      ],
      '–ü—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏': [
        '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å email –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö',
        '–£–±–µ–¥–∏—Ç—å—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∞—Ä–æ–ª–µ–π',
        '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Appwrite'
      ]
    };

    const testRecommendations = recommendations[test.name];
    if (testRecommendations) {
      return `${test.name}: ${testRecommendations.join(', ')}`;
    }

    return `–û–±—â–∞—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –¥–ª—è "${test.name}": –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–≥–∏ –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –æ—à–∏–±–∫—É –≤—Ä—É—á–Ω—É—é`;
  }

  generateGeneralAuthRecommendations(analysis) {
    const recommendations = [];

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    const hasSSRIssues = analysis.patterns.some(p => p.name === 'localStorage_ssr');
    if (hasSSRIssues) {
      recommendations.push('–†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É typeof window !== "undefined" –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º localStorage');
      recommendations.push('–†–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ cookies –¥–ª—è SSR-—Å–æ–≤–º–µ—Å—Ç–∏–º–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è');
    }

    const hasNetworkIssues = analysis.issues.some(i => i.type === 'network_error');
    if (hasNetworkIssues) {
      recommendations.push('–î–æ–±–∞–≤–∏—Ç—å retry –ª–æ–≥–∏–∫—É –¥–ª—è —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤');
      recommendations.push('–†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å offline-—Ä–µ–∂–∏–º —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏');
    }

    const hasJSErrors = analysis.issues.some(i => i.type === 'javascript_error');
    if (hasJSErrors) {
      recommendations.push('–î–æ–±–∞–≤–∏—Ç—å error boundaries –¥–ª—è React –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤');
      recommendations.push('–£–ª—É—á—à–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ —Å –ø–æ–º–æ—â—å—é try-catch –±–ª–æ–∫–æ–≤');
    }

    // –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    recommendations.push('–î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –ø—Ä–æ–±–ª–µ–º');
    recommendations.push('–†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—à–∏–±–æ–∫ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ (Sentry, LogRocket)');
    recommendations.push('–î–æ–±–∞–≤–∏—Ç—å unit –∏ integration —Ç–µ—Å—Ç—ã –¥–ª—è –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –ø—É—Ç–µ–π');

    return recommendations;
  }

  calculateConfidence(analysis) {
    let confidence = 50; // –ë–∞–∑–æ–≤–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å

    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
    confidence += analysis.patterns.length * 15;

    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    confidence += Math.min(analysis.issues.length * 5, 30);

    // –£–º–µ–Ω—å—à–∞–µ–º –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –º–∞–ª–æ –¥–∞–Ω–Ω—ã—Ö
    if (analysis.issues.length === 0) confidence -= 30;

    return Math.min(Math.max(confidence, 0), 100);
  }

  assessOverallSeverity(analysis) {
    const highSeverityCount = analysis.issues.filter(i => i.severity === 'high').length;
    const mediumSeverityCount = analysis.issues.filter(i => i.severity === 'medium').length;

    if (highSeverityCount > 0) return 'high';
    if (mediumSeverityCount > 2) return 'medium';
    if (analysis.issues.length > 0) return 'low';
    return 'none';
  }

  async generateSolutions(analysis) {
    this.logger.info('üí° –ì–µ–Ω–µ—Ä–∞—Ü–∏—è AI-—Ä–µ—à–µ–Ω–∏–π');

    const solutions = [];

    // –†–µ—à–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –ø—Ä–æ–±–ª–µ–º
    for (const issue of analysis.issues) {
      const solution = this.getSolutionForIssue(issue);
      if (solution && !solutions.includes(solution)) {
        solutions.push(solution);
      }
    }

    // –ü—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è —Ä–µ—à–µ–Ω–∏–π
    const prioritizedSolutions = this.prioritizeSolutions(solutions, analysis);

    return prioritizedSolutions;
  }

  getSolutionForIssue(issue) {
    const solutionMap = {
      'localStorage_ssr': '–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –æ–∫—Ä—É–∂–µ–Ω–∏—è: if (typeof window !== "undefined") { localStorage... }',
      'undefined_property': '–î–æ–±–∞–≤–∏—Ç—å optional chaining: object?.property –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ',
      'network_failure': '–†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å retry –º–µ—Ö–∞–Ω–∏–∑–º –∏ fallback –¥–ª—è —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤',
      'cors_error': '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å CORS –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–∫—Å–∏',
      'auth_token': '–†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –∏ –æ–±—Ä–∞–±–æ—Ç–∫—É 401 –æ—à–∏–±–æ–∫',
      'javascript_error': '–î–æ–±–∞–≤–∏—Ç—å error boundaries –∏ —É–ª—É—á—à–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫',
      'network_error': '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API endpoints –∏ –¥–æ–±–∞–≤–∏—Ç—å retry –ª–æ–≥–∏–∫—É'
    };

    return solutionMap[issue.pattern] || solutionMap[issue.type];
  }

  prioritizeSolutions(solutions, analysis) {
    // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–∏–æ—Ä–∏—Ç–∏–∑–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç–∏
    const priorityMap = {
      'high': 3,
      'medium': 2,
      'low': 1
    };

    return solutions.sort((a, b) => {
      const priorityA = this.getSolutionPriority(a, analysis);
      const priorityB = this.getSolutionPriority(b, analysis);
      return priorityB - priorityA;
    });
  }

  getSolutionPriority(solution, analysis) {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ä–µ—à–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
    if (solution.includes('localStorage') || solution.includes('SSR')) return 3;
    if (solution.includes('network') || solution.includes('API')) return 3;
    if (solution.includes('error boundaries') || solution.includes('retry')) return 2;
    return 1;
  }

  async performFullAnalysis() {
    this.logger.info('üß† –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ AI-–∞–Ω–∞–ª–∏–∑–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã');

    const analysis = {
      overallScore: 0,
      status: 'unknown',
      recommendations: [],
      predictions: [],
      areas: {
        authentication: { score: 0, issues: [] },
        performance: { score: 0, issues: [] },
        usability: { score: 0, issues: [] },
        security: { score: 0, issues: [] },
        reliability: { score: 0, issues: [] }
      }
    };

    try {
      // –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ–±–ª–∞—Å—Ç–µ–π
      analysis.areas.authentication = await this.analyzeAuthenticationHealth();
      analysis.areas.performance = await this.analyzePerformanceHealth();
      analysis.areas.usability = await this.analyzeUsabilityHealth();
      analysis.areas.security = await this.analyzeSecurityHealth();
      analysis.areas.reliability = await this.analyzeReliabilityHealth();

      // –†–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ —Å–∫–æ—Ä–∞
      const scores = Object.values(analysis.areas).map(area => area.score);
      analysis.overallScore = Math.round(scores.reduce((sum, score) => sum + score, 0) / scores.length);

      // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
      analysis.status = this.getStatusFromScore(analysis.overallScore);

      // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
      analysis.recommendations = this.generatePlatformRecommendations(analysis);

      // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
      analysis.predictions = this.generatePredictions(analysis);

      return analysis;

    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–≥–æ AI-–∞–Ω–∞–ª–∏–∑–∞: ${error.message}`);
      throw error;
    }
  }

  async analyzeAuthenticationHealth() {
    // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    return {
      score: 85,
      issues: [
        'localStorage SSR compatibility',
        'Session persistence optimization needed'
      ]
    };
  }

  async analyzePerformanceHealth() {
    // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    return {
      score: 78,
      issues: [
        'Bundle size optimization needed',
        'Image optimization required'
      ]
    };
  }

  async analyzeUsabilityHealth() {
    // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —é–∑–∞–±–∏–ª–∏—Ç–∏
    return {
      score: 82,
      issues: [
        'Form validation UX improvements',
        'Loading states enhancement'
      ]
    };
  }

  async analyzeSecurityHealth() {
    // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    return {
      score: 90,
      issues: [
        'HTTPS enforcement',
        'Input sanitization review'
      ]
    };
  }

  async analyzeReliabilityHealth() {
    // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
    return {
      score: 75,
      issues: [
        'Error handling improvements',
        'Retry mechanisms needed'
      ]
    };
  }

  getStatusFromScore(score) {
    if (score >= 90) return '–û—Ç–ª–∏—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ';
    if (score >= 80) return '–•–æ—Ä–æ—à–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ';
    if (score >= 70) return '–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ';
    if (score >= 60) return '–¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è';
    return '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ';
  }

  generatePlatformRecommendations(analysis) {
    const recommendations = [];

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–∫–æ—Ä–æ–≤ –æ–±–ª–∞—Å—Ç–µ–π
    Object.entries(analysis.areas).forEach(([area, data]) => {
      if (data.score < 80) {
        recommendations.push({
          title: `–£–ª—É—á—à–µ–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏: ${area}`,
          priority: data.score < 70 ? 'high' : 'medium',
          description: `–¢–µ–∫—É—â–∏–π —Å–∫–æ—Ä: ${data.score}/100. –¢—Ä–µ–±—É–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏.`
        });
      }
    });

    // –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    recommendations.push({
      title: '–†–µ–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞',
      priority: 'high',
      description: '–î–æ–±–∞–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã'
    });

    recommendations.push({
      title: '–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è',
      priority: 'medium',
      description: '–†–∞—Å—à–∏—Ä–∏—Ç—å –ø–æ–∫—Ä—ã—Ç–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ —Ç–µ—Å—Ç–∞–º–∏'
    });

    return recommendations;
  }

  generatePredictions(analysis) {
    const predictions = [];

    // –ü—Ä–æ–≥–Ω–æ–∑—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    if (analysis.overallScore > 80) {
      predictions.push('–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –±–∞–∑—ã');
      predictions.push('–ù–∏–∑–∫–∏–π —Ä–∏—Å–∫ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–±–æ–µ–≤ –≤ –±–ª–∏–∂–∞–π—à–∏–µ 30 –¥–Ω–µ–π');
    } else if (analysis.overallScore > 70) {
      predictions.push('–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–¥ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ–º');
      predictions.push('–°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫ –ø—Ä–æ–±–ª–µ–º –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏ —Ä–æ—Å—Ç–µ –Ω–∞–≥—Ä—É–∑–∫–∏');
    } else {
      predictions.push('–¢—Ä–µ–±—É–µ—Ç—Å—è —Å—Ä–æ—á–Ω–∞—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ–±–ª–∞—Å—Ç–µ–π');
      predictions.push('–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫ –ø—Ä–æ–±–ª–µ–º –ø—Ä–∏ —É–≤–µ–ª–∏—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    }

    // –ü—Ä–æ–≥–Ω–æ–∑—ã –ø–æ –æ–±–ª–∞—Å—Ç—è–º
    if (analysis.areas.performance.score < 75) {
      predictions.push('–í–æ–∑–º–æ–∂–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é –ø—Ä–∏ —Ä–æ—Å—Ç–µ —Ç—Ä–∞—Ñ–∏–∫–∞');
    }

    if (analysis.areas.authentication.score < 80) {
      predictions.push('–ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–º –æ–ø—ã—Ç–æ–º –≤—Ö–æ–¥–∞');
    }

    return predictions;
  }

  // ============ AI –ú–ï–¢–û–î–´ ============

  async classifyIssuesWithAI(testResults) {
    this.logger.info('ü§ñ AI-–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ–±–ª–µ–º...');

    const classifiedIssues = [];
    const classifier = this.neuralNetwork.get('problemClassifier');

    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –æ—à–∏–±–∫—É —Å –ø–æ–º–æ—â—å—é AI
    const allErrors = [
      ...(testResults.logs?.filter(log => log.type === 'error') || []),
      ...(testResults.issues || [])
    ];

    for (const error of allErrors) {
      const classification = await this.classifyError(error, classifier);
      classifiedIssues.push({
        ...error,
        aiClassification: classification,
        confidence: classification.confidence,
        severity: classification.severity,
        suggestedActions: classification.actions
      });
    }

    return classifiedIssues;
  }

  async classifyError(error, classifier) {
    const errorText = error.message || error.text || '';
    const errorType = error.type || 'unknown';

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—Ä–∏–∑–Ω–∞–∫–∏ –∏–∑ –æ—à–∏–±–∫–∏
    const features = this.extractErrorFeatures(errorText, errorType);

    // –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–µ–π—Ä–æ–Ω–Ω—É—é —Å–µ—Ç—å
    const classification = this.applyNeuralNetwork(features, classifier);

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    const actions = this.getRecommendedActions(classification);

    return {
      type: classification.type,
      severity: classification.severity,
      confidence: classification.confidence,
      actions: actions,
      reasoning: classification.reasoning
    };
  }

  extractErrorFeatures(errorText, errorType) {
    const features = {
      hasNetworkKeywords: /network|fetch|request|timeout|connection/i.test(errorText),
      hasAuthKeywords: /auth|login|token|session|unauthorized/i.test(errorText),
      hasUIKeywords: /element|selector|click|form|input/i.test(errorText),
      hasJSKeywords: /undefined|null|cannot read|reference error/i.test(errorText),
      hasSSRKeywords: /window|document|localStorage|sessionStorage/i.test(errorText),
      errorLength: errorText.length,
      errorType: errorType,
      hasStackTrace: errorText.includes('at ') || errorText.includes('stack'),
      timeOfDay: new Date().getHours()
    };

    return features;
  }

  applyNeuralNetwork(features, classifier) {
    const weights = classifier.weights;
    const biases = classifier.biases;
    const activation = classifier.activationFunction;

    // –ü—Ä–æ—Å—Ç–∞—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–µ—Å–æ–≤
    let authScore = 0;
    let networkScore = 0;
    let uiScore = 0;
    let jsScore = 0;

    if (features.hasAuthKeywords) authScore += weights.get('auth_error') || 0;
    if (features.hasNetworkKeywords) networkScore += weights.get('network_error') || 0;
    if (features.hasUIKeywords) uiScore += weights.get('ui_error') || 0;
    if (features.hasJSKeywords) jsScore += weights.get('performance_error') || 0;

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø—Ä–æ–±–ª–µ–º—ã
    const scores = { auth: authScore, network: networkScore, ui: uiScore, js: jsScore };
    const maxScore = Math.max(...Object.values(scores));
    const type = Object.keys(scores).find(key => scores[key] === maxScore);

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å
    const severity = maxScore > 0.8 ? 'high' : maxScore > 0.5 ? 'medium' : 'low';

    // –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
    const confidence = Math.min(maxScore * 100, 95);

    return {
      type,
      severity,
      confidence,
      reasoning: `AI –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–ª –∫–∞–∫ ${type} –ø—Ä–æ–±–ª–µ–º—É —Å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é ${confidence}%`
    };
  }

  getRecommendedActions(classification) {
    const actionMap = {
      auth: [
        '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Appwrite',
        '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–∫–µ–Ω—ã –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏',
        '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å SSR —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å',
        '–î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏'
      ],
      network: [
        '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ—Ç–µ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ',
        '–î–æ–±–∞–≤–∏—Ç—å retry –ª–æ–≥–∏–∫—É',
        '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å CORS –Ω–∞—Å—Ç—Ä–æ–π–∫–∏',
        '–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–∞–π–º–∞—É—Ç—ã'
      ],
      ui: [
        '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–µ–ª–µ–∫—Ç–æ—Ä—ã —ç–ª–µ–º–µ–Ω—Ç–æ–≤',
        '–î–æ–±–∞–≤–∏—Ç—å –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏',
        '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å z-index –∏ –≤–∏–¥–∏–º–æ—Å—Ç—å',
        '–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥'
      ],
      js: [
        '–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ undefined',
        '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å optional chaining',
        '–î–æ–±–∞–≤–∏—Ç—å error boundaries',
        '–£–ª—É—á—à–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫'
      ]
    };

    return actionMap[classification.type] || ['–ü—Ä–æ–≤–µ—Å—Ç–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É'];
  }

  async predictFixSuccess(issues) {
    this.logger.info('üîÆ AI-–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π...');

    const predictions = [];
    const predictor = this.neuralNetwork.get('testPredictor');

    for (const issue of issues) {
      const prediction = await this.predictIssueFix(issue, predictor);
      predictions.push({
        issue: issue.message || issue.text,
        successProbability: prediction.probability,
        estimatedTime: prediction.timeEstimate,
        difficulty: prediction.difficulty,
        requiredResources: prediction.resources
      });
    }

    return predictions;
  }

  async predictIssueFix(issue, predictor) {
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã
    const complexity = this.analyzeIssueComplexity(issue);

    // –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –≤ –∏—Å—Ç–æ—Ä–∏–∏
    const historicalData = this.findSimilarIssues(issue);

    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Å–ø–µ—Ö–∞
    const baseProbability = 0.7; // –ë–∞–∑–æ–≤–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
    let probability = baseProbability;

    // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    probability *= (1 - complexity * 0.3);

    // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    if (historicalData.length > 0) {
      const avgSuccess = historicalData.reduce((sum, data) => sum + data.success, 0) / historicalData.length;
      probability = (probability + avgSuccess) / 2;
    }

    // –û—Ü–µ–Ω–∫–∞ –≤—Ä–µ–º–µ–Ω–∏
    const timeEstimate = this.estimateFixTime(complexity, historicalData);

    return {
      probability: Math.min(Math.max(probability, 0.1), 0.95),
      timeEstimate,
      difficulty: complexity > 0.7 ? 'high' : complexity > 0.4 ? 'medium' : 'low',
      resources: this.estimateRequiredResources(complexity)
    };
  }

  analyzeIssueComplexity(issue) {
    let complexity = 0.3; // –ë–∞–∑–æ–≤–∞—è —Å–ª–æ–∂–Ω–æ—Å—Ç—å

    const text = issue.message || issue.text || '';

    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø—Ä–æ–±–ª–µ–º
    if (text.includes('SSR') || text.includes('localStorage')) complexity += 0.3;
    if (text.includes('network') || text.includes('CORS')) complexity += 0.2;
    if (text.includes('authentication') || text.includes('token')) complexity += 0.25;
    if (issue.aiClassification?.severity === 'high') complexity += 0.2;

    return Math.min(complexity, 1.0);
  }

  findSimilarIssues(issue) {
    const text = issue.message || issue.text || '';
    const keywords = text.toLowerCase().split(/\s+/).filter(word => word.length > 3);

    return this.learningData.filter(data => {
      const dataText = (data.issue?.message || '').toLowerCase();
      const matchingKeywords = keywords.filter(keyword => dataText.includes(keyword));
      return matchingKeywords.length >= 2; // –ú–∏–Ω–∏–º—É–º 2 —Å–æ–≤–ø–∞–¥–∞—é—â–∏—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤–∞
    });
  }

  estimateFixTime(complexity, historicalData) {
    const baseTime = 30; // –ë–∞–∑–æ–≤–æ–µ –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö
    let estimatedTime = baseTime * (1 + complexity);

    if (historicalData.length > 0) {
      const avgTime = historicalData.reduce((sum, data) => sum + (data.fixTime || baseTime), 0) / historicalData.length;
      estimatedTime = (estimatedTime + avgTime) / 2;
    }

    return Math.round(estimatedTime);
  }

  estimateRequiredResources(complexity) {
    if (complexity > 0.7) {
      return ['senior_developer', 'devops_engineer', 'qa_engineer'];
    } else if (complexity > 0.4) {
      return ['developer', 'qa_engineer'];
    } else {
      return ['developer'];
    }
  }

  async generateAdaptiveStrategies(issues) {
    this.logger.info('üéØ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö —Å—Ç—Ä–∞—Ç–µ–≥–∏–π...');

    const strategies = [];

    for (const issue of issues) {
      const issueType = issue.aiClassification?.type || 'unknown';
      const adaptiveStrategy = this.adaptiveStrategies.get(issueType);

      if (adaptiveStrategy) {
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
        const sortedStrategies = adaptiveStrategy.strategies
          .map(strategy => ({
            name: strategy,
            successRate: adaptiveStrategy.successRates.get(strategy) || 0.5
          }))
          .sort((a, b) => b.successRate - a.successRate);

        strategies.push({
          issue: issue.message || issue.text,
          recommendedStrategies: sortedStrategies.slice(0, 3), // –¢–æ–ø 3 —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
          fallbackStrategies: sortedStrategies.slice(3)
        });
      }
    }

    return strategies;
  }

  async learnFromResults(testResults, analysis) {
    this.logger.info('üìö –û–±—É—á–µ–Ω–∏–µ AI –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...');

    // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
    const learningRecord = {
      timestamp: new Date().toISOString(),
      testResults: {
        success: testResults.overall?.passed || 0,
        failed: testResults.overall?.failed || 0,
        total: testResults.overall?.total || 0
      },
      issues: analysis.issues.map(issue => ({
        type: issue.aiClassification?.type,
        severity: issue.aiClassification?.severity,
        resolved: false // –ë—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–∑–∂–µ
      })),
      strategies: analysis.adaptiveStrategies,
      context: this.getContextSummary()
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ–±—É—á–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    this.learningData.push(learningRecord);

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö
    if (this.learningData.length > 1000) {
      this.learningData = this.learningData.slice(-1000);
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
    await this.saveLearningData();

    // –û–±–Ω–æ–≤–ª—è–µ–º –≤–µ—Å–∞ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏
    this.updateNeuralNetworkWeights(learningRecord);
  }

  addToContextMemory(type, data) {
    this.contextMemory.push({
      type,
      timestamp: new Date().toISOString(),
      data: JSON.stringify(data).substring(0, 1000) // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä
    });

    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–∞–º—è—Ç–∏
    if (this.contextMemory.length > 100) {
      this.contextMemory = this.contextMemory.slice(-100);
    }
  }

  getContextSummary() {
    return {
      recentTests: this.contextMemory.filter(item => item.type === 'auth_analysis').length,
      timeOfDay: new Date().getHours(),
      dayOfWeek: new Date().getDay(),
      memorySize: this.contextMemory.length
    };
  }

  async saveLearningData() {
    try {
      const dataPath = path.join(config.paths.data, 'learning_data.json');
      await fs.ensureDir(path.dirname(dataPath));
      await fs.writeJson(dataPath, {
        sessions: this.learningData,
        lastUpdated: new Date().toISOString(),
        version: '1.0'
      });
      this.logger.debug('üíæ –û–±—É—á–∞—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö', error);
    }
  }

  updateNeuralNetworkWeights(learningRecord) {
    // –ü—Ä–æ—Å—Ç–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Å–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏
    const classifier = this.neuralNetwork.get('problemClassifier');
    const successRate = learningRecord.testResults.success / learningRecord.testResults.total;

    // –ï—Å–ª–∏ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ, —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤–µ—Å–∞ –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    if (successRate > 0.8) {
      learningRecord.issues.forEach(issue => {
        if (issue.type && classifier.weights.has(issue.type + '_error')) {
          const currentWeight = classifier.weights.get(issue.type + '_error');
          classifier.weights.set(issue.type + '_error', Math.min(currentWeight * 1.05, 1.0));
        }
      });
    }

    this.logger.debug('üß† –í–µ—Å–∞ –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è AI-–∏–Ω—Å–∞–π—Ç–æ–≤
  async getAIInsights() {
    this.logger.info('üí° –ì–µ–Ω–µ—Ä–∞—Ü–∏—è AI-–∏–Ω—Å–∞–π—Ç–æ–≤...');

    const insights = {
      patterns: this.identifyPatterns(),
      trends: this.analyzeTrends(),
      recommendations: this.generateSmartRecommendations(),
      predictions: this.makePredictions()
    };

    return insights;
  }

  identifyPatterns() {
    // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤ –æ–±—É—á–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    const patterns = [];

    if (this.learningData.length > 10) {
      // –ü–∞—Ç—Ç–µ—Ä–Ω –≤—Ä–µ–º–µ–Ω–∏
      const timePattern = this.analyzeTimePatterns();
      if (timePattern.confidence > 0.7) {
        patterns.push(timePattern);
      }

      // –ü–∞—Ç—Ç–µ—Ä–Ω —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
      const errorPattern = this.analyzeErrorPatterns();
      if (errorPattern.confidence > 0.6) {
        patterns.push(errorPattern);
      }
    }

    return patterns;
  }

  analyzeTimePatterns() {
    const timeData = this.learningData.map(record => ({
      hour: new Date(record.timestamp).getHours(),
      success: record.testResults.success / record.testResults.total
    }));

    // –ü—Ä–æ—Å—Ç–æ–π –∞–Ω–∞–ª–∏–∑ - –Ω–∞—Ö–æ–¥–∏–º –≤—Ä–µ–º—è —Å –Ω–∞–∏–±–æ–ª—å—à–µ–π —É—Å–ø–µ—à–Ω–æ—Å—Ç—å—é
    const hourlyStats = {};
    timeData.forEach(data => {
      if (!hourlyStats[data.hour]) {
        hourlyStats[data.hour] = { total: 0, success: 0 };
      }
      hourlyStats[data.hour].total++;
      hourlyStats[data.hour].success += data.success;
    });

    const bestHour = Object.keys(hourlyStats).reduce((best, hour) => {
      const avg = hourlyStats[hour].success / hourlyStats[hour].total;
      const bestAvg = hourlyStats[best]?.success / hourlyStats[best]?.total || 0;
      return avg > bestAvg ? hour : best;
    });

    return {
      type: 'time_pattern',
      description: `–¢–µ—Å—Ç—ã –Ω–∞–∏–±–æ–ª–µ–µ —É—Å–ø–µ—à–Ω—ã –≤ ${bestHour}:00`,
      confidence: 0.8,
      recommendation: `–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∑–∞–ø—É—Å–∫–∞—Ç—å –∫—Ä–∏—Ç–∏—á–Ω—ã–µ —Ç–µ—Å—Ç—ã –≤ ${bestHour}:00`
    };
  }

  analyzeErrorPatterns() {
    const errorTypes = {};

    this.learningData.forEach(record => {
      record.issues.forEach(issue => {
        if (issue.type) {
          errorTypes[issue.type] = (errorTypes[issue.type] || 0) + 1;
        }
      });
    });

    const mostCommonError = Object.keys(errorTypes).reduce((most, type) => {
      return errorTypes[type] > (errorTypes[most] || 0) ? type : most;
    });

    return {
      type: 'error_pattern',
      description: `–ù–∞–∏–±–æ–ª–µ–µ —á–∞—Å—Ç—ã–π —Ç–∏–ø –æ—à–∏–±–æ–∫: ${mostCommonError}`,
      confidence: 0.7,
      recommendation: `–°–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—å—Å—è –Ω–∞ —É–ª—É—á—à–µ–Ω–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ${mostCommonError} –æ—à–∏–±–æ–∫`
    };
  }

  analyzeTrends() {
    // –ê–Ω–∞–ª–∏–∑ —Ç—Ä–µ–Ω–¥–æ–≤ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ —Ç–µ—Å—Ç–æ–≤
    if (this.learningData.length < 5) return [];

    const recentData = this.learningData.slice(-10);
    const successRates = recentData.map(record =>
      record.testResults.success / record.testResults.total
    );

    // –ü—Ä–æ—Å—Ç–æ–π —Ç—Ä–µ–Ω–¥ - —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–µ—Ä–≤—É—é –∏ –≤—Ç–æ—Ä—É—é –ø–æ–ª–æ–≤–∏–Ω—É
    const firstHalf = successRates.slice(0, Math.floor(successRates.length / 2));
    const secondHalf = successRates.slice(Math.floor(successRates.length / 2));

    const firstAvg = firstHalf.reduce((sum, rate) => sum + rate, 0) / firstHalf.length;
    const secondAvg = secondHalf.reduce((sum, rate) => sum + rate, 0) / secondHalf.length;

    const trend = secondAvg > firstAvg ? 'improving' : 'declining';
    const change = Math.abs(secondAvg - firstAvg) * 100;

    return [{
      type: 'success_trend',
      direction: trend,
      change: `${change.toFixed(1)}%`,
      description: `–£—Å–ø–µ—à–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–æ–≤ ${trend === 'improving' ? '—É–ª—É—á—à–∞–µ—Ç—Å—è' : '—É—Ö—É–¥—à–∞–µ—Ç—Å—è'} –Ω–∞ ${change.toFixed(1)}%`
    }];
  }

  generateSmartRecommendations() {
    const recommendations = [];

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ AI-–∞–Ω–∞–ª–∏–∑–∞
    if (this.learningData.length > 0) {
      const recentFailures = this.learningData.slice(-5)
        .flatMap(record => record.issues)
        .filter(issue => issue.severity === 'high');

      if (recentFailures.length > 3) {
        recommendations.push({
          priority: 'high',
          title: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Ç—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è',
          description: 'AI –æ–±–Ω–∞—Ä—É–∂–∏–ª –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã',
          action: '–ü—Ä–æ–≤–µ—Å—Ç–∏ –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø—Ä–∏—á–∏–Ω'
        });
      }
    }

    // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
    recommendations.push({
      priority: 'medium',
      title: '–£–ª—É—á—à–µ–Ω–∏–µ AI-—Å–∏—Å—Ç–µ–º—ã',
      description: '–ù–∞–∫–æ–ø–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ç–æ—á–Ω–æ—Å—Ç–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π',
      action: '–ü—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è AI'
    });

    return recommendations;
  }

  makePredictions() {
    const predictions = [];

    if (this.learningData.length > 5) {
      // –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ—Å—Ç–∞
      const recentSuccess = this.learningData.slice(-5)
        .map(record => record.testResults.success / record.testResults.total)
        .reduce((sum, rate) => sum + rate, 0) / 5;

      predictions.push({
        type: 'next_test_success',
        probability: recentSuccess,
        confidence: 0.75,
        description: `–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —É—Å–ø–µ—Ö–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç–µ—Å—Ç–∞: ${(recentSuccess * 100).toFixed(1)}%`
      });

      // –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ —Ç–∏–ø–∞ –ø—Ä–æ–±–ª–µ–º
      const commonIssues = this.learningData.slice(-10)
        .flatMap(record => record.issues)
        .reduce((acc, issue) => {
          acc[issue.type] = (acc[issue.type] || 0) + 1;
          return acc;
        }, {});

      const mostLikelyIssue = Object.keys(commonIssues).reduce((most, type) => {
        return commonIssues[type] > (commonIssues[most] || 0) ? type : most;
      });

      if (mostLikelyIssue) {
        predictions.push({
          type: 'likely_issue',
          issue: mostLikelyIssue,
          confidence: 0.6,
          description: `–ù–∞–∏–±–æ–ª–µ–µ –≤–µ—Ä–æ—è—Ç–Ω—ã–π —Ç–∏–ø –ø—Ä–æ–±–ª–µ–º—ã: ${mostLikelyIssue}`
        });
      }
    }

    return predictions;
  }
}
