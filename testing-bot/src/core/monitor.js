import axios from 'axios';
import { Logger } from '../utils/logger.js';
import { config } from '../config/config.js';

export class Monitor {
  constructor() {
    this.logger = new Logger('Monitor');
    this.isRunning = false;
    this.interval = null;
  }

  async start(options = {}) {
    this.logger.info('üëÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏');
    
    this.isRunning = true;
    this.onIssueDetected = options.onIssueDetected || (() => {});
    this.onStatusChange = options.onStatusChange || (() => {});

    // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    await this.checkPlatformHealth();

    // –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
    this.interval = setInterval(async () => {
      if (this.isRunning) {
        await this.checkPlatformHealth();
      }
    }, config.monitoring.interval);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    process.on('SIGINT', () => {
      this.stop();
    });

    // –î–µ—Ä–∂–∏–º –ø—Ä–æ—Ü–µ—Å—Å –∞–∫—Ç–∏–≤–Ω—ã–º
    return new Promise((resolve) => {
      process.on('SIGINT', () => {
        this.stop();
        resolve();
      });
    });
  }

  async stop() {
    this.logger.info('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞');
    this.isRunning = false;
    
    if (this.interval) {
      clearInterval(this.interval);
      this.interval = null;
    }
  }

  async checkPlatformHealth() {
    try {
      const results = {
        timestamp: new Date().toISOString(),
        healthy: true,
        issues: [],
        metrics: {}
      };

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å–Ω–æ–≤–Ω—ã—Ö endpoints
      for (const endpoint of config.monitoring.endpoints) {
        try {
          const startTime = Date.now();
          const response = await axios.get(`${config.app.baseUrl}${endpoint}`, {
            timeout: config.monitoring.healthChecks.response_time,
            validateStatus: (status) => config.monitoring.healthChecks.status_codes.includes(status)
          });
          
          const responseTime = Date.now() - startTime;
          
          results.metrics[endpoint] = {
            status: response.status,
            responseTime,
            healthy: responseTime < config.monitoring.healthChecks.response_time
          };

          if (responseTime > config.monitoring.healthChecks.response_time) {
            results.issues.push({
              type: 'slow_response',
              endpoint,
              responseTime,
              message: `–ú–µ–¥–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: ${responseTime}ms`
            });
            results.healthy = false;
          }

        } catch (error) {
          results.issues.push({
            type: 'endpoint_error',
            endpoint,
            error: error.message,
            message: `–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ ${endpoint}: ${error.message}`
          });
          results.healthy = false;
        }
      }

      // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö
      if (results.issues.length > 0) {
        results.issues.forEach(issue => {
          this.onIssueDetected(issue);
        });
      }

      // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ
      this.onStatusChange({
        healthy: results.healthy,
        message: results.healthy ? 
          '–í—Å–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ' : 
          `–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: ${results.issues.length}`
      });

      return results;

    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã', error);
      
      const criticalIssue = {
        type: 'monitor_error',
        message: `–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: ${error.message}`
      };
      
      this.onIssueDetected(criticalIssue);
      
      return {
        timestamp: new Date().toISOString(),
        healthy: false,
        issues: [criticalIssue],
        metrics: {}
      };
    }
  }
}
