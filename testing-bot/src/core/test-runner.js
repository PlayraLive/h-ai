import { chromium, firefox, webkit } from 'playwright';
import fs from 'fs-extra';
import path from 'path';
import chalk from 'chalk';
import { config } from '../config/config.js';
import { Logger } from '../utils/logger.js';
import { ScreenshotManager } from '../utils/screenshot-manager.js';

export class TestRunner {
  constructor() {
    this.browser = null;
    this.context = null;
    this.page = null;
    this.logger = new Logger('TestRunner');
    this.screenshotManager = new ScreenshotManager();
    this.results = {
      tests: [],
      issues: [],
      screenshots: [],
      logs: [],
      performance: {},
      startTime: null,
      endTime: null
    };
  }

  async initialize(browserType = 'chromium') {
    try {
      this.logger.info(`üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞: ${browserType}`);
      
      const browserEngine = {
        chromium: chromium,
        firefox: firefox,
        webkit: webkit
      }[browserType] || chromium;

      this.browser = await browserEngine.launch({
        headless: config.browser.headless,
        slowMo: config.browser.slowMo,
        args: [
          '--no-sandbox',
          '--disable-setuid-sandbox',
          '--disable-dev-shm-usage',
          '--disable-accelerated-2d-canvas',
          '--no-first-run',
          '--no-zygote',
          '--disable-gpu'
        ]
      });

      this.context = await this.browser.newContext({
        viewport: { width: 1920, height: 1080 },
        userAgent: 'H-AI-Testing-Bot/1.0.0 (Automated Testing)',
        recordVideo: config.recording.enabled ? {
          dir: config.recording.dir,
          size: { width: 1920, height: 1080 }
        } : undefined
      });

      // –ü–µ—Ä–µ—Ö–≤–∞—Ç –∫–æ–Ω—Å–æ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
      this.context.on('console', (msg) => {
        this.results.logs.push({
          type: msg.type(),
          text: msg.text(),
          timestamp: new Date().toISOString(),
          location: msg.location()
        });
      });

      // –ü–µ—Ä–µ—Ö–≤–∞—Ç –æ—à–∏–±–æ–∫
      this.context.on('pageerror', (error) => {
        this.results.issues.push({
          type: 'javascript_error',
          message: error.message,
          stack: error.stack,
          timestamp: new Date().toISOString()
        });
      });

      // –ü–µ—Ä–µ—Ö–≤–∞—Ç —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫
      this.context.on('requestfailed', (request) => {
        this.results.issues.push({
          type: 'network_error',
          url: request.url(),
          method: request.method(),
          failure: request.failure()?.errorText,
          timestamp: new Date().toISOString()
        });
      });

      this.page = await this.context.newPage();
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
      await this.page.route('**/*', (route) => {
        const request = route.request();
        
        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ API –∑–∞–ø—Ä–æ—Å–æ–≤
        if (request.url().includes('/api/')) {
          this.results.logs.push({
            type: 'api_request',
            method: request.method(),
            url: request.url(),
            headers: request.headers(),
            timestamp: new Date().toISOString()
          });
        }
        
        route.continue();
      });

      this.logger.success('‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      return true;
    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞: ${error.message}`);
      throw error;
    }
  }

  async runAuthTests() {
    this.logger.info('üîê –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏');
    this.results.startTime = new Date();

    try {
      await this.initialize();
      
      const authTests = [
        { name: '–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ª–æ–≥–∏–Ω–∞', test: () => this.testLoginPageLoad() },
        { name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', test: () => this.testRegistrationForm() },
        { name: '–í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª–µ–π', test: () => this.testFormValidation() },
        { name: '–ü—Ä–æ—Ü–µ—Å—Å –ª–æ–≥–∏–Ω–∞', test: () => this.testLoginProcess() },
        { name: '–ü—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', test: () => this.testRegistrationProcess() },
        { name: '–†–µ–¥–∏—Ä–µ–∫—Ç –ø–æ—Å–ª–µ –ª–æ–≥–∏–Ω–∞', test: () => this.testLoginRedirect() },
        { name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Å—Å–∏–∏', test: () => this.testSessionPersistence() }
      ];

      for (const testCase of authTests) {
        await this.runSingleTest(testCase);
      }

      this.results.endTime = new Date();
      this.results.duration = this.results.endTime - this.results.startTime;

      const failedTests = this.results.tests.filter(t => t.status === 'failed');
      
      return {
        success: failedTests.length === 0,
        duration: this.results.duration,
        tests: this.results.tests,
        issues: this.results.issues,
        logs: this.results.logs,
        screenshots: this.results.screenshots
      };

    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: ${error.message}`);
      throw error;
    } finally {
      await this.cleanup();
    }
  }

  async runSingleTest(testCase) {
    const startTime = Date.now();
    this.logger.info(`üß™ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞: ${testCase.name}`);

    try {
      await testCase.test();
      
      const duration = Date.now() - startTime;
      this.results.tests.push({
        name: testCase.name,
        status: 'passed',
        duration,
        timestamp: new Date().toISOString()
      });
      
      this.logger.success(`‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω: ${testCase.name} (${duration}ms)`);
    } catch (error) {
      const duration = Date.now() - startTime;
      const screenshot = await this.screenshotManager.takeScreenshot(this.page, `error-${testCase.name}`);
      
      this.results.tests.push({
        name: testCase.name,
        status: 'failed',
        duration,
        error: error.message,
        screenshot,
        timestamp: new Date().toISOString()
      });

      this.results.issues.push({
        type: 'test_failure',
        test: testCase.name,
        message: error.message,
        screenshot,
        timestamp: new Date().toISOString()
      });
      
      this.logger.error(`‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: ${testCase.name} - ${error.message}`);
    }
  }

  async testLoginPageLoad() {
    await this.page.goto(`${config.app.baseUrl}/en/auth/login`, { 
      waitUntil: 'networkidle',
      timeout: config.timeouts.pageLoad 
    });

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    await this.page.waitForSelector('form', { timeout: config.timeouts.element });
    await this.page.waitForSelector('input[type="email"]', { timeout: config.timeouts.element });
    await this.page.waitForSelector('input[type="password"]', { timeout: config.timeouts.element });
    await this.page.waitForSelector('button[type="submit"]', { timeout: config.timeouts.element });

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –æ—à–∏–±–æ–∫ –≤ –∫–æ–Ω—Å–æ–ª–∏
    const errors = this.results.logs.filter(log => log.type === 'error');
    if (errors.length > 0) {
      throw new Error(`–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏: ${errors.map(e => e.text).join(', ')}`);
    }

    // –°–∫—Ä–∏–Ω—à–æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ª–æ–≥–∏–Ω–∞
    await this.screenshotManager.takeScreenshot(this.page, 'login-page-loaded');
  }

  async testRegistrationForm() {
    await this.page.goto(`${config.app.baseUrl}/en/auth/register`, { 
      waitUntil: 'networkidle',
      timeout: config.timeouts.pageLoad 
    });

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª–µ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    const requiredFields = [
      'input[name="name"]',
      'input[name="email"]', 
      'input[name="password"]',
      'input[name="confirmPassword"]'
    ];

    for (const field of requiredFields) {
      const element = await this.page.$(field);
      if (!element) {
        throw new Error(`–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: ${field}`);
      }
    }

    await this.screenshotManager.takeScreenshot(this.page, 'registration-form');
  }

  async testFormValidation() {
    await this.page.goto(`${config.app.baseUrl}/en/auth/login`);

    // –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ email
    await this.page.fill('input[type="email"]', 'invalid-email');
    await this.page.click('button[type="submit"]');
    
    // –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
    const emailError = await this.page.waitForSelector('.error, .invalid, [role="alert"]', { 
      timeout: 2000 
    }).catch(() => null);

    if (!emailError) {
      throw new Error('–í–∞–ª–∏–¥–∞—Ü–∏—è email –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
    }

    // –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—É—Å—Ç—ã—Ö –ø–æ–ª–µ–π
    await this.page.fill('input[type="email"]', '');
    await this.page.fill('input[type="password"]', '');
    await this.page.click('button[type="submit"]');

    await this.screenshotManager.takeScreenshot(this.page, 'form-validation');
  }

  async testLoginProcess() {
    await this.page.goto(`${config.app.baseUrl}/en/auth/login`);

    // –ü–æ–ø—ã—Ç–∫–∞ –ª–æ–≥–∏–Ω–∞ —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    await this.page.fill('input[type="email"]', config.testData.validUser.email);
    await this.page.fill('input[type="password"]', config.testData.validUser.password);
    
    await this.screenshotManager.takeScreenshot(this.page, 'before-login');
    
    await this.page.click('button[type="submit"]');

    // –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
    try {
      await this.page.waitForURL('**/dashboard', { timeout: config.timeouts.navigation });
      await this.screenshotManager.takeScreenshot(this.page, 'after-successful-login');
    } catch (error) {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      const errorMessage = await this.page.$('.error, .alert-error, [role="alert"]');
      if (errorMessage) {
        const errorText = await errorMessage.textContent();
        await this.screenshotManager.takeScreenshot(this.page, 'login-error');
        throw new Error(`–û—à–∏–±–∫–∞ –ª–æ–≥–∏–Ω–∞: ${errorText}`);
      }
      throw error;
    }
  }

  async testRegistrationProcess() {
    await this.page.goto(`${config.app.baseUrl}/en/auth/register`);

    const testUser = {
      name: `Test User ${Date.now()}`,
      email: `test${Date.now()}@example.com`,
      password: 'TestPassword123!'
    };

    await this.page.fill('input[name="name"]', testUser.name);
    await this.page.fill('input[name="email"]', testUser.email);
    await this.page.fill('input[name="password"]', testUser.password);
    await this.page.fill('input[name="confirmPassword"]', testUser.password);

    await this.screenshotManager.takeScreenshot(this.page, 'before-registration');
    
    await this.page.click('button[type="submit"]');

    // –û–∂–∏–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–ª–∏ –æ—à–∏–±–∫–∏
    try {
      await this.page.waitForURL('**/dashboard', { timeout: config.timeouts.navigation });
      await this.screenshotManager.takeScreenshot(this.page, 'after-successful-registration');
    } catch (error) {
      const errorMessage = await this.page.$('.error, .alert-error, [role="alert"]');
      if (errorMessage) {
        const errorText = await errorMessage.textContent();
        await this.screenshotManager.takeScreenshot(this.page, 'registration-error');
        throw new Error(`–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${errorText}`);
      }
      throw error;
    }
  }

  async testLoginRedirect() {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞ –Ω–∞ –∑–∞—â–∏—â–µ–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    await this.page.goto(`${config.app.baseUrl}/en/dashboard`);
    
    // –î–æ–ª–∂–µ–Ω –ø—Ä–æ–∏–∑–æ–π—Ç–∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞
    await this.page.waitForURL('**/auth/login', { timeout: config.timeouts.navigation });
    
    await this.screenshotManager.takeScreenshot(this.page, 'login-redirect');
  }

  async testSessionPersistence() {
    // –¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    await this.page.goto(`${config.app.baseUrl}/en/auth/login`);
    
    // –õ–æ–≥–∏–Ω
    await this.page.fill('input[type="email"]', config.testData.validUser.email);
    await this.page.fill('input[type="password"]', config.testData.validUser.password);
    await this.page.click('button[type="submit"]');
    
    await this.page.waitForURL('**/dashboard', { timeout: config.timeouts.navigation });
    
    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    await this.page.reload({ waitUntil: 'networkidle' });
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å—Ç–∞–ª—Å—è –∑–∞–ª–æ–≥–∏–Ω–µ–Ω
    const currentUrl = this.page.url();
    if (currentUrl.includes('/auth/login')) {
      throw new Error('–°–µ—Å—Å–∏—è –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∞—Å—å –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏');
    }

    await this.screenshotManager.takeScreenshot(this.page, 'session-persistence');
  }

  async runFullTests() {
    this.logger.info('üß™ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã');
    
    const testSuites = [
      { name: '–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è', tests: () => this.runAuthTests() },
      { name: '–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ', tests: () => this.runPortfolioTests() },
      { name: '–ü—Ä–æ–µ–∫—Ç—ã –∏ –∑–∞—è–≤–∫–∏', tests: () => this.runJobTests() },
      { name: '–ê–¥–º–∏–Ω–∫–∞', tests: () => this.runAdminTests() },
      { name: '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', tests: () => this.runPerformanceTests() }
    ];

    const results = {
      suites: [],
      overall: {
        passed: 0,
        failed: 0,
        total: 0
      }
    };

    for (const suite of testSuites) {
      try {
        this.logger.info(`üìã –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤: ${suite.name}`);
        const suiteResult = await suite.tests();
        
        results.suites.push({
          name: suite.name,
          ...suiteResult
        });

        results.overall.total += suiteResult.tests.length;
        results.overall.passed += suiteResult.tests.filter(t => t.status === 'passed').length;
        results.overall.failed += suiteResult.tests.filter(t => t.status === 'failed').length;

      } catch (error) {
        this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö ${suite.name}: ${error.message}`);
        results.suites.push({
          name: suite.name,
          error: error.message,
          tests: [],
          issues: []
        });
        results.overall.failed++;
      }
    }

    return results;
  }

  async runPortfolioTests() {
    // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
    return { tests: [], issues: [], logs: [] };
  }

  async runJobTests() {
    // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–µ–∫—Ç–æ–≤
    return { tests: [], issues: [], logs: [] };
  }

  async runAdminTests() {
    // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –∞–¥–º–∏–Ω–∫–∏
    return { tests: [], issues: [], logs: [] };
  }

  async runPerformanceTests() {
    // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    return { tests: [], issues: [], logs: [] };
  }

  async cleanup() {
    try {
      if (this.page) await this.page.close();
      if (this.context) await this.context.close();
      if (this.browser) await this.browser.close();
      this.logger.info('üßπ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç');
    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞: ${error.message}`);
    }
  }
}
