import { chromium, firefox, webkit } from 'playwright';
import fs from 'fs-extra';
import path from 'path';
import chalk from 'chalk';
import { config } from '../config/config.js';
import { Logger } from '../utils/logger.js';
import { ScreenshotManager } from '../utils/screenshot-manager.js';
import { AIAgent } from './ai-agent.js';
import axios from 'axios';
import { spawn } from 'child_process';
import inquirer from 'inquirer';

export class TestRunner {
  constructor() {
    this.browser = null;
    this.context = null;
    this.page = null;
    this.logger = new Logger('TestRunner');
    this.screenshotManager = new ScreenshotManager();
    this.aiAgent = new AIAgent();
    this.results = {
      tests: [],
      issues: [],
      screenshots: [],
      logs: [],
      performance: {},
      startTime: null,
      endTime: null,
      aiAnalysis: null,
      aiPredictions: [],
      adaptiveStrategies: []
    };

    // –ö—ç—à –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
    this.visitedUrls = new Set();
    this.attemptedActions = new Set();
    this.foundPages = new Map();

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º AI –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    this.initializeAI();
  }

  async initializeAI() {
    try {
      await this.aiAgent.initializeAI();
      this.logger.success('ü§ñ AI —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ');
    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AI', error);
    }
  }

  // –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∞
  clearCache() {
    this.visitedUrls.clear();
    this.attemptedActions.clear();
    // –ù–µ –æ—á–∏—â–∞–µ–º foundPages - –æ–Ω–∏ –º–æ–≥—É—Ç –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω—ã –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
    this.logger.debug('üßπ –ö—ç—à –æ—á–∏—â–µ–Ω');
  }

  // –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤–∫–ª—é—á–∞—è –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  clearAllCache() {
    this.visitedUrls.clear();
    this.attemptedActions.clear();
    this.foundPages.clear();
    this.logger.debug('üßπ –í–µ—Å—å –∫—ç—à –æ—á–∏—â–µ–Ω');
  }

  async initialize(browserType = 'chromium') {
    try {
      this.logger.info(`üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞: ${browserType}`);
      
      const browserEngine = {
        chromium: chromium,
        firefox: firefox,
        webkit: webkit
      }[browserType] || chromium;

      this.browser = await browserEngine.launch({
        headless: config.browser.headless,
        slowMo: config.browser.slowMo,
        args: [
          '--no-sandbox',
          '--disable-setuid-sandbox',
          '--disable-dev-shm-usage',
          '--disable-accelerated-2d-canvas',
          '--no-first-run',
          '--no-zygote',
          '--disable-gpu'
        ]
      });

      this.context = await this.browser.newContext({
        viewport: { width: 1920, height: 1080 },
        userAgent: 'H-AI-Testing-Bot/1.0.0 (Automated Testing)',
        recordVideo: config.recording.enabled ? {
          dir: config.recording.dir,
          size: { width: 1920, height: 1080 }
        } : undefined
      });

      // –ü–µ—Ä–µ—Ö–≤–∞—Ç –∫–æ–Ω—Å–æ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
      this.context.on('console', (msg) => {
        this.results.logs.push({
          type: msg.type(),
          text: msg.text(),
          timestamp: new Date().toISOString(),
          location: msg.location()
        });
      });

      // –ü–µ—Ä–µ—Ö–≤–∞—Ç –æ—à–∏–±–æ–∫
      this.context.on('pageerror', (error) => {
        this.results.issues.push({
          type: 'javascript_error',
          message: error.message,
          stack: error.stack,
          timestamp: new Date().toISOString()
        });
      });

      // –ü–µ—Ä–µ—Ö–≤–∞—Ç —Å–µ—Ç–µ–≤—ã—Ö –æ—à–∏–±–æ–∫
      this.context.on('requestfailed', (request) => {
        this.results.issues.push({
          type: 'network_error',
          url: request.url(),
          method: request.method(),
          failure: request.failure()?.errorText,
          timestamp: new Date().toISOString()
        });
      });

      this.page = await this.context.newPage();
      
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ —Å–µ—Ç–µ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
      await this.page.route('**/*', (route) => {
        const request = route.request();
        
        // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ API –∑–∞–ø—Ä–æ—Å–æ–≤
        if (request.url().includes('/api/')) {
          this.results.logs.push({
            type: 'api_request',
            method: request.method(),
            url: request.url(),
            headers: request.headers(),
            timestamp: new Date().toISOString()
          });
        }
        
        route.continue();
      });

      this.logger.success('‚úÖ –ë—Ä–∞—É–∑–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      return true;
    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞: ${error.message}`);
      throw error;
    }
  }

  async runAuthTests() {
    this.logger.info('üîê –ó–∞–ø—É—Å–∫ AI-powered —Ç–µ—Å—Ç–æ–≤ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏');
    this.results.startTime = new Date();

    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∞–π—Ç–∞
      await this.checkSiteAvailability();

      await this.initialize();

      // AI –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–æ–≤
      this.logger.info('ü§ñ –ü–æ–ª—É—á–µ–Ω–∏–µ AI-–∏–Ω—Å–∞–π—Ç–æ–≤...');
      const aiInsights = await this.aiAgent.getAIInsights();
      this.results.aiInsights = aiInsights;

      const authTests = [
        { name: '–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ª–æ–≥–∏–Ω–∞', test: () => this.testLoginPageLoad() },
        { name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', test: () => this.testRegistrationForm() },
        { name: '–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏', test: () => this.testFullRegistrationFlow() },
        { name: '–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –ª–æ–≥–∏–Ω–∞', test: () => this.testFullLoginFlow() },
        { name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤–∞—Ç–∞—Ä–∫–∏ –≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏', test: () => this.testUserAvatarDisplay() }
      ];

      // AI –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤
      for (const testCase of authTests) {
        await this.runAIEnhancedTest(testCase);
      }

      // AI –∞–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      await this.performAIAnalysis();

      this.results.endTime = new Date();
      this.results.duration = this.results.endTime - this.results.startTime;

      const failedTests = this.results.tests.filter(t => t.status === 'failed');

      return {
        success: failedTests.length === 0,
        duration: this.results.duration,
        tests: this.results.tests,
        issues: this.results.issues,
        logs: this.results.logs,
        screenshots: this.results.screenshots,
        aiAnalysis: this.results.aiAnalysis,
        aiInsights: this.results.aiInsights
      };

    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: ${error.message}`);
      throw error;
    } finally {
      await this.cleanup();
    }
  }

  async runAIEnhancedTest(testCase) {
    this.logger.info(`üß™ AI-—Ç–µ—Å—Ç: ${testCase.name}`);

    // –û—á–∏—â–∞–µ–º –∫—ç—à –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º —Ç–µ—Å—Ç–æ–º (–∫—Ä–æ–º–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü)
    this.clearCache();

    const startTime = Date.now();
    let testResult = {
      name: testCase.name,
      status: 'running',
      startTime,
      endTime: null,
      duration: 0,
      error: null,
      aiEnhancements: {
        predictions: [],
        confidence: 0
      }
    };

    try {
      // AI –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
      const prediction = await this.aiAgent.predictFixSuccess([{
        message: `Test: ${testCase.name}`,
        type: 'test_execution'
      }]);

      testResult.aiEnhancements.predictions = prediction;
      testResult.aiEnhancements.confidence = prediction[0]?.successProbability || 0.7;

      // –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–µ—Å—Ç
      await testCase.test();

      testResult.status = 'passed';
      testResult.endTime = Date.now();
      testResult.duration = testResult.endTime - testResult.startTime;

      this.logger.success(`‚úÖ –¢–µ—Å—Ç "${testCase.name}" –ø—Ä–æ–π–¥–µ–Ω (${testResult.duration}ms)`);

    } catch (error) {
      testResult.status = 'failed';
      testResult.error = error.message;
      testResult.endTime = Date.now();
      testResult.duration = testResult.endTime - testResult.startTime;

      this.logger.error(`‚ùå –¢–µ—Å—Ç "${testCase.name}" –ø—Ä–æ–≤–∞–ª–µ–Ω: ${error.message}`);

      // AI –∞–Ω–∞–ª–∏–∑ –æ—à–∏–±–∫–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–π
      const adaptiveStrategies = await this.aiAgent.generateAdaptiveStrategies([{
        message: error.message,
        type: 'test_failure'
      }]);

      testResult.aiEnhancements.adaptiveStrategies = adaptiveStrategies;

      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
      this.results.issues.push({
        type: 'test_failure',
        message: error.message,
        test: testCase.name,
        timestamp: new Date().toISOString()
      });
    }

    this.results.tests.push(testResult);
  }

  async performAIAnalysis() {
    this.logger.info('üß† –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ AI-–∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤...');

    try {
      // –ü–æ–ª–Ω—ã–π AI –∞–Ω–∞–ª–∏–∑
      const aiAnalysis = await this.aiAgent.analyzeAuthIssues(this.results);
      this.results.aiAnalysis = aiAnalysis;

      this.logger.success(`‚úÖ AI-–∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: ${aiAnalysis.confidence}%`);

    } catch (error) {
      this.logger.error('‚ùå –û—à–∏–±–∫–∞ AI-–∞–Ω–∞–ª–∏–∑–∞', error);
      this.results.aiAnalysis = {
        error: error.message,
        confidence: 0
      };
    }
  }

  async runSingleTest(testCase) {
    const startTime = Date.now();
    this.logger.info(`üß™ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞: ${testCase.name}`);

    try {
      await testCase.test();
      
      const duration = Date.now() - startTime;
      this.results.tests.push({
        name: testCase.name,
        status: 'passed',
        duration,
        timestamp: new Date().toISOString()
      });
      
      this.logger.success(`‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω: ${testCase.name} (${duration}ms)`);
    } catch (error) {
      const duration = Date.now() - startTime;
      const screenshot = await this.screenshotManager.takeScreenshot(this.page, `error-${testCase.name}`);
      
      this.results.tests.push({
        name: testCase.name,
        status: 'failed',
        duration,
        error: error.message,
        screenshot,
        timestamp: new Date().toISOString()
      });

      this.results.issues.push({
        type: 'test_failure',
        test: testCase.name,
        message: error.message,
        screenshot,
        timestamp: new Date().toISOString()
      });
      
      this.logger.error(`‚ùå –¢–µ—Å—Ç –ø—Ä–æ–≤–∞–ª–µ–Ω: ${testCase.name} - ${error.message}`);
    }
  }

  async testLoginPageLoad() {
    this.logger.info('üîç –£–º–Ω—ã–π –ø–æ–∏—Å–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ª–æ–≥–∏–Ω–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫...');

    // –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö URL –¥–ª—è –ª–æ–≥–∏–Ω–∞
    const loginUrls = [
      '/en/login',
      '/en/auth/login',
      '/login',
      '/auth/login',
      '/signin',
      '/en/signin'
    ];

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–º–Ω—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    let workingUrl = await this.smartNavigateToPage(loginUrls, 'login');

    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —á–µ—Ä–µ–∑ –ø—Ä—è–º—ã–µ URL, –∏—â–µ–º —á–µ—Ä–µ–∑ –Ω–∞–≤–∏–≥–∞—Ü–∏—é
    if (!workingUrl) {
      this.logger.info('üîç –ü–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –Ω–∞–≤–∏–≥–∞—Ü–∏—é —Å–∞–π—Ç–∞...');

      // –°–Ω–∞—á–∞–ª–∞ –∏–¥–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é
      const homeSuccess = await this.goToHomePage();
      if (homeSuccess) {
        workingUrl = await this.findPageThroughNavigation('login');
      }
    }

    if (!workingUrl) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞ –Ω–∏ –æ–¥–Ω–∏–º —Å–ø–æ—Å–æ–±–æ–º');
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –æ—à–∏–±–æ–∫ –≤ –∫–æ–Ω—Å–æ–ª–∏
    const errors = this.results.logs.filter(log => log.type === 'error');
    if (errors.length > 0) {
      this.logger.warn(`–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏: ${errors.map(e => e.text).join(', ')}`);
    }

    // –°–∫—Ä–∏–Ω—à–æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ª–æ–≥–∏–Ω–∞
    await this.screenshotManager.takeScreenshot(this.page, 'login-page-loaded');

    this.logger.success(`‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ª–æ–≥–∏–Ω–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: ${workingUrl}`);
  }

  async checkForLoginForm() {
    try {
      // –ò—â–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ñ–æ—Ä–º –ª–æ–≥–∏–Ω–∞
      const loginSelectors = [
        'form[action*="login"]',
        'form[action*="signin"]',
        'form[action*="auth"]',
        'form:has(input[type="email"], input[type="password"])',
        'form:has(input[name*="email"], input[name*="password"])',
        '[data-testid="login-form"]',
        '.login-form',
        '#login-form'
      ];

      for (const selector of loginSelectors) {
        const form = await this.page.$(selector);
        if (form) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª–µ–π email –∏ password
          const hasEmail = await this.checkForEmailField();
          const hasPassword = await this.checkForPasswordField();

          if (hasEmail && hasPassword) {
            this.logger.success(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ñ–æ—Ä–º–∞ –ª–æ–≥–∏–Ω–∞: ${selector}`);
            return true;
          }
        }
      }

      return false;
    } catch (error) {
      return false;
    }
  }

  async checkForEmailField() {
    const emailSelectors = [
      'input[type="email"]',
      'input[name="email"]',
      'input[name="username"]',
      'input[placeholder*="email" i]',
      'input[placeholder*="–ø–æ—á—Ç–∞" i]',
      'input[id*="email"]'
    ];

    for (const selector of emailSelectors) {
      const field = await this.page.$(selector);
      if (field) return true;
    }
    return false;
  }

  async checkForPasswordField() {
    const passwordSelectors = [
      'input[type="password"]',
      'input[name="password"]',
      'input[placeholder*="password" i]',
      'input[placeholder*="–ø–∞—Ä–æ–ª—å" i]',
      'input[id*="password"]'
    ];

    for (const selector of passwordSelectors) {
      const field = await this.page.$(selector);
      if (field) return true;
    }
    return false;
  }

  async findLoginThroughNavigation() {
    try {
      this.logger.info('üîç –ò—â–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –ª–æ–≥–∏–Ω –≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏...');

      // –ò–¥–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
      await this.page.goto(`${config.app.baseUrl}`, {
        waitUntil: 'networkidle',
        timeout: config.timeouts.pageLoad
      });

      // –ò—â–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –ª–æ–≥–∏–Ω
      const loginLinkSelectors = [
        'a[href*="login"]',
        'a[href*="signin"]',
        'a[href*="auth"]',
        'a:has-text("Login")',
        'a:has-text("Sign In")',
        'a:has-text("–í–æ–π—Ç–∏")',
        'a:has-text("–í—Ö–æ–¥")',
        'button:has-text("Login")',
        'button:has-text("–í–æ–π—Ç–∏")',
        '[data-testid*="login"]'
      ];

      for (const selector of loginLinkSelectors) {
        try {
          const link = await this.page.$(selector);
          if (link) {
            const href = await link.getAttribute('href');
            this.logger.info(`üîó –ù–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –ª–æ–≥–∏–Ω: ${href}`);

            // –ö–ª–∏–∫–∞–µ–º –ø–æ —Å—Å—ã–ª–∫–µ
            await link.click();
            await this.page.waitForLoadState('networkidle');

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–æ—Ä–º–∞ –ª–æ–≥–∏–Ω–∞
            const hasLoginForm = await this.checkForLoginForm();
            if (hasLoginForm) {
              const currentUrl = this.page.url();
              this.logger.success(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ª–æ–≥–∏–Ω–∞ —á–µ—Ä–µ–∑ –Ω–∞–≤–∏–≥–∞—Ü–∏—é: ${currentUrl}`);
              return currentUrl.replace(config.app.baseUrl, '');
            }
          }
        } catch (error) {
          this.logger.debug(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –ø–æ —Å—Å—ã–ª–∫–µ ${selector}: ${error.message}`);
          continue;
        }
      }

      return null;
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ –Ω–∞–≤–∏–≥–∞—Ü–∏—é', error);
      return null;
    }
  }

  async testRegistrationForm() {
    this.logger.info('üîç –£–º–Ω—ã–π –ø–æ–∏—Å–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫...');

    // –°–ø–∏—Å–æ–∫ –≤–æ–∑–º–æ–∂–Ω—ã—Ö URL –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ä–∞–±–æ—á–∏–º)
    const registerUrls = [
      '/en/signup',    // –≠—Ç–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!
      '/signup',
      '/en/register',
      '/en/auth/register',
      '/register',
      '/auth/register',
      '/sign-up',
      '/en/sign-up'
    ];

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–º–Ω—É—é –Ω–∞–≤–∏–≥–∞—Ü–∏—é —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
    let workingUrl = await this.smartNavigateToPage(registerUrls, 'register');

    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —á–µ—Ä–µ–∑ –ø—Ä—è–º—ã–µ URL, –∏—â–µ–º —á–µ—Ä–µ–∑ –Ω–∞–≤–∏–≥–∞—Ü–∏—é
    if (!workingUrl) {
      this.logger.info('üîç –ü–æ–∏—Å–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –Ω–∞–≤–∏–≥–∞—Ü–∏—é —Å–∞–π—Ç–∞...');

      // –°–Ω–∞—á–∞–ª–∞ –∏–¥–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é
      const homeSuccess = await this.goToHomePage();
      if (homeSuccess) {
        workingUrl = await this.findPageThroughNavigation('register');
      }
    }

    if (!workingUrl) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∏ –æ–¥–Ω–∏–º —Å–ø–æ—Å–æ–±–æ–º');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—è —Ñ–æ—Ä–º—ã –∞–¥–∞–ø—Ç–∏–≤–Ω–æ
    await this.checkRegistrationFields();

    await this.screenshotManager.takeScreenshot(this.page, 'registration-form');
    this.logger.success(`‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞: ${workingUrl}`);
  }

  async checkForRegisterForm() {
    try {
      // –ò—â–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ñ–æ—Ä–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
      const registerSelectors = [
        'form[action*="register"]',
        'form[action*="signup"]',
        'form[action*="sign-up"]',
        'form:has(input[name*="name"], input[name*="email"], input[name*="password"])',
        '[data-testid="register-form"]',
        '[data-testid="signup-form"]',
        '.register-form',
        '.signup-form',
        '#register-form',
        '#signup-form'
      ];

      for (const selector of registerSelectors) {
        const form = await this.page.$(selector);
        if (form) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª–µ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
          const hasRequiredFields = await this.checkRegistrationFields();
          if (hasRequiredFields) {
            this.logger.success(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Ñ–æ—Ä–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${selector}`);
            return true;
          }
        }
      }

      return false;
    } catch (error) {
      return false;
    }
  }

  async checkRegistrationFields() {
    this.logger.info('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—è —Ñ–æ—Ä–º—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...');

    // –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª–µ–π
    const fieldChecks = {
      name: await this.findField(['name', 'fullName', 'firstName', 'username']),
      email: await this.findField(['email', 'emailAddress', 'mail']),
      password: await this.findField(['password', 'pwd']),
      confirmPassword: await this.findField(['confirmPassword', 'passwordConfirm', 'repeatPassword', 'password2'])
    };

    const foundFields = Object.entries(fieldChecks).filter(([key, found]) => found);
    const missingFields = Object.entries(fieldChecks).filter(([key, found]) => !found);

    this.logger.info(`‚úÖ –ù–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ–ª—è: ${foundFields.map(([key]) => key).join(', ')}`);

    if (missingFields.length > 0) {
      this.logger.warn(`‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è: ${missingFields.map(([key]) => key).join(', ')}`);
    }

    // –°—á–∏—Ç–∞–µ–º —Ñ–æ—Ä–º—É –≤–∞–ª–∏–¥–Ω–æ–π –µ—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã email –∏ password
    return fieldChecks.email && fieldChecks.password;
  }

  async findField(fieldNames) {
    for (const fieldName of fieldNames) {
      // –†–∞–∑–ª–∏—á–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–∏—Å–∫–∞ –ø–æ–ª—è
      const selectors = [
        `input[name="${fieldName}"]`,
        `input[name*="${fieldName}" i]`,
        `input[id="${fieldName}"]`,
        `input[id*="${fieldName}" i]`,
        `input[placeholder*="${fieldName}" i]`,
        `input[data-testid="${fieldName}"]`,
        `input[data-testid*="${fieldName}" i]`
      ];

      for (const selector of selectors) {
        const field = await this.page.$(selector);
        if (field) {
          this.logger.debug(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ ${fieldName}: ${selector}`);
          return true;
        }
      }
    }
    return false;
  }

  async findRegisterThroughNavigation() {
    try {
      this.logger.info('üîç –ò—â–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏...');

      // –ò–¥–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
      await this.page.goto(`${config.app.baseUrl}`, {
        waitUntil: 'networkidle',
        timeout: config.timeouts.pageLoad
      });

      // –ò—â–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
      const registerLinkSelectors = [
        'a[href*="register"]',
        'a[href*="signup"]',
        'a[href*="sign-up"]',
        'a:has-text("Register")',
        'a:has-text("Sign Up")',
        'a:has-text("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")',
        'a:has-text("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")',
        'button:has-text("Register")',
        'button:has-text("Sign Up")',
        'button:has-text("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")',
        '[data-testid*="register"]',
        '[data-testid*="signup"]'
      ];

      for (const selector of registerLinkSelectors) {
        try {
          const link = await this.page.$(selector);
          if (link) {
            const href = await link.getAttribute('href');
            this.logger.info(`üîó –ù–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é: ${href}`);

            // –ö–ª–∏–∫–∞–µ–º –ø–æ —Å—Å—ã–ª–∫–µ
            await link.click();
            await this.page.waitForLoadState('networkidle');

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ–æ—Ä–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            const hasRegisterForm = await this.checkForRegisterForm();
            if (hasRegisterForm) {
              const currentUrl = this.page.url();
              this.logger.success(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –Ω–∞–≤–∏–≥–∞—Ü–∏—é: ${currentUrl}`);
              return currentUrl.replace(config.app.baseUrl, '');
            }
          }
        } catch (error) {
          this.logger.debug(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –ø–æ —Å—Å—ã–ª–∫–µ ${selector}: ${error.message}`);
          continue;
        }
      }

      return null;
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –Ω–∞–≤–∏–≥–∞—Ü–∏—é', error);
      return null;
    }
  }

  async testFormValidation() {
    await this.page.goto(`${config.app.baseUrl}/en/auth/login`);

    // –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ email
    await this.page.fill('input[type="email"]', 'invalid-email');
    await this.page.click('button[type="submit"]');
    
    // –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
    const emailError = await this.page.waitForSelector('.error, .invalid, [role="alert"]', { 
      timeout: 2000 
    }).catch(() => null);

    if (!emailError) {
      throw new Error('–í–∞–ª–∏–¥–∞—Ü–∏—è email –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
    }

    // –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—É—Å—Ç—ã—Ö –ø–æ–ª–µ–π
    await this.page.fill('input[type="email"]', '');
    await this.page.fill('input[type="password"]', '');
    await this.page.click('button[type="submit"]');

    await this.screenshotManager.takeScreenshot(this.page, 'form-validation');
  }

  async testLoginProcess() {
    this.logger.info('üîê –£–º–Ω—ã–π —Ç–µ—Å—Ç –ø—Ä–æ—Ü–µ—Å—Å–∞ –ª–æ–≥–∏–Ω–∞...');

    // –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –Ω–∞–ø–∏—Å–∞–Ω–Ω—É—é –ª–æ–≥–∏–∫—É)
    await this.testLoginPageLoad();

    // –£–º–Ω–æ –Ω–∞—Ö–æ–¥–∏–º –ø–æ–ª—è –¥–ª—è –≤–≤–æ–¥–∞
    const emailField = await this.findEmailField();
    const passwordField = await this.findPasswordField();
    const submitButton = await this.findSubmitButton();

    if (!emailField) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª–µ –¥–ª—è email');
    }
    if (!passwordField) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª–µ –¥–ª—è –ø–∞—Ä–æ–ª—è');
    }
    if (!submitButton) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏');
    }

    this.logger.info('‚úÖ –í—Å–µ –ø–æ–ª—è —Ñ–æ—Ä–º—ã –Ω–∞–π–¥–µ–Ω—ã, –Ω–∞—á–∏–Ω–∞–µ–º –ª–æ–≥–∏–Ω...');

    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É
    await emailField.fill(config.testData.validUser.email);
    await passwordField.fill(config.testData.validUser.password);

    await this.screenshotManager.takeScreenshot(this.page, 'before-login');

    // –ö–ª–∏–∫–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
    await submitButton.click();

    // –£–º–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    await this.waitForLoginResult();
  }

  async findEmailField() {
    const emailSelectors = [
      'input[type="email"]',
      'input[name="email"]',
      'input[name="username"]',
      'input[placeholder*="email" i]',
      'input[placeholder*="–ø–æ—á—Ç–∞" i]',
      'input[id*="email"]',
      'input[data-testid*="email"]'
    ];

    for (const selector of emailSelectors) {
      const field = await this.page.$(selector);
      if (field) {
        this.logger.success(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ email: ${selector}`);
        return field;
      }
    }
    return null;
  }

  async findPasswordField() {
    const passwordSelectors = [
      'input[type="password"]',
      'input[name="password"]',
      'input[placeholder*="password" i]',
      'input[placeholder*="–ø–∞—Ä–æ–ª—å" i]',
      'input[id*="password"]',
      'input[data-testid*="password"]'
    ];

    for (const selector of passwordSelectors) {
      const field = await this.page.$(selector);
      if (field) {
        this.logger.success(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ –ø–∞—Ä–æ–ª—è: ${selector}`);
        return field;
      }
    }
    return null;
  }

  async findSubmitButton() {
    const submitSelectors = [
      'button[type="submit"]',
      'input[type="submit"]',
      'button:has-text("Login")',
      'button:has-text("Sign In")',
      'button:has-text("–í–æ–π—Ç–∏")',
      'button:has-text("–í—Ö–æ–¥")',
      '[data-testid*="login"]',
      '[data-testid*="submit"]',
      '.login-button',
      '#login-button'
    ];

    for (const selector of submitSelectors) {
      const button = await this.page.$(selector);
      if (button) {
        this.logger.success(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ${selector}`);
        return button;
      }
    }
    return null;
  }

  async waitForLoginResult() {
    this.logger.info('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ª–æ–≥–∏–Ω–∞...');

    // –í–æ–∑–º–æ–∂–Ω—ã–µ URL –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ª–æ–≥–∏–Ω–∞
    const successUrls = [
      '**/dashboard',
      '**/profile',
      '**/home',
      '**/main',
      '**/',
      '**/en/dashboard',
      '**/en/profile'
    ];

    // –í–æ–∑–º–æ–∂–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –æ—à–∏–±–æ–∫
    const errorSelectors = [
      '.error',
      '.alert-error',
      '.alert-danger',
      '[role="alert"]',
      '.notification-error',
      '.toast-error',
      '[data-testid*="error"]'
    ];

    try {
      // –ñ–¥–µ–º –ª–∏–±–æ —Ä–µ–¥–∏—Ä–µ–∫—Ç, –ª–∏–±–æ –ø–æ—è–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–∫–∏
      await Promise.race([
        // –ñ–¥–µ–º —É—Å–ø–µ—à–Ω—ã–π —Ä–µ–¥–∏—Ä–µ–∫—Ç
        Promise.all(successUrls.map(url =>
          this.page.waitForURL(url, { timeout: config.timeouts.navigation })
            .then(() => 'success')
            .catch(() => null)
        )).then(results => {
          const success = results.find(r => r === 'success');
          if (success) return 'success';
          throw new Error('No redirect');
        }),

        // –ñ–¥–µ–º –ø–æ—è–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–∫–∏
        Promise.race(errorSelectors.map(selector =>
          this.page.waitForSelector(selector, { timeout: config.timeouts.navigation })
            .then(() => 'error')
            .catch(() => null)
        )).then(result => {
          if (result === 'error') return 'error';
          throw new Error('No error');
        })
      ]);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ
      const currentUrl = this.page.url();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏
      for (const selector of errorSelectors) {
        const errorElement = await this.page.$(selector);
        if (errorElement) {
          const errorText = await errorElement.textContent();
          await this.screenshotManager.takeScreenshot(this.page, 'login-error');
          throw new Error(`–û—à–∏–±–∫–∞ –ª–æ–≥–∏–Ω–∞: ${errorText}`);
        }
      }

      // –ï—Å–ª–∏ –Ω–µ—Ç –æ—à–∏–±–æ–∫, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ –ª–æ–≥–∏–Ω —É—Å–ø–µ—à–µ–Ω
      await this.screenshotManager.takeScreenshot(this.page, 'after-successful-login');
      this.logger.success(`‚úÖ –õ–æ–≥–∏–Ω —É—Å–ø–µ—à–µ–Ω! –¢–µ–∫—É—â–∏–π URL: ${currentUrl}`);

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—è–≤–ª–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∫–∏ –∏–ª–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –∑–∞–ª–æ–≥–∏–Ω–µ–Ω–Ω–æ—Å—Ç–∏
      await this.checkUserLoggedIn();

    } catch (error) {
      await this.screenshotManager.takeScreenshot(this.page, 'login-timeout');
      throw new Error(`–¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ª–æ–≥–∏–Ω–∞: ${error.message}`);
    }
  }

  async checkUserLoggedIn() {
    this.logger.info('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —É—Å–ø–µ—à–Ω–æ–≥–æ –ª–æ–≥–∏–Ω–∞...');

    // –í–æ–∑–º–æ–∂–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ª–æ–≥–∏–Ω–µ–Ω
    const loggedInSelectors = [
      '.avatar',
      '.user-avatar',
      '.profile-picture',
      '[data-testid*="avatar"]',
      '[data-testid*="user"]',
      '.user-menu',
      '.profile-menu',
      'button:has-text("Logout")',
      'button:has-text("–í—ã–π—Ç–∏")',
      'a:has-text("Profile")',
      'a:has-text("–ü—Ä–æ—Ñ–∏–ª—å")'
    ];

    for (const selector of loggedInSelectors) {
      const element = await this.page.$(selector);
      if (element) {
        this.logger.success(`‚úÖ –ù–∞–π–¥–µ–Ω –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–ª–æ–≥–∏–Ω–µ–Ω–Ω–æ—Å—Ç–∏: ${selector}`);
        await this.screenshotManager.takeScreenshot(this.page, 'user-logged-in-indicator');
        return true;
      }
    }

    this.logger.warn('‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã —è–≤–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∑–∞–ª–æ–≥–∏–Ω–µ–Ω–Ω–æ—Å—Ç–∏ (–∞–≤–∞—Ç–∞—Ä–∫–∞, –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)');
    return false;
  }

  async testRegistrationProcess() {
    await this.page.goto(`${config.app.baseUrl}/en/auth/register`);

    const testUser = {
      name: `Test User ${Date.now()}`,
      email: `test${Date.now()}@example.com`,
      password: 'TestPassword123!'
    };

    await this.page.fill('input[name="name"]', testUser.name);
    await this.page.fill('input[name="email"]', testUser.email);
    await this.page.fill('input[name="password"]', testUser.password);
    await this.page.fill('input[name="confirmPassword"]', testUser.password);

    await this.screenshotManager.takeScreenshot(this.page, 'before-registration');
    
    await this.page.click('button[type="submit"]');

    // –û–∂–∏–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–ª–∏ –æ—à–∏–±–∫–∏
    try {
      await this.page.waitForURL('**/dashboard', { timeout: config.timeouts.navigation });
      await this.screenshotManager.takeScreenshot(this.page, 'after-successful-registration');
    } catch (error) {
      const errorMessage = await this.page.$('.error, .alert-error, [role="alert"]');
      if (errorMessage) {
        const errorText = await errorMessage.textContent();
        await this.screenshotManager.takeScreenshot(this.page, 'registration-error');
        throw new Error(`–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${errorText}`);
      }
      throw error;
    }
  }

  async testLoginRedirect() {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞ –Ω–∞ –∑–∞—â–∏—â–µ–Ω–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    await this.page.goto(`${config.app.baseUrl}/en/dashboard`);
    
    // –î–æ–ª–∂–µ–Ω –ø—Ä–æ–∏–∑–æ–π—Ç–∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞
    await this.page.waitForURL('**/auth/login', { timeout: config.timeouts.navigation });
    
    await this.screenshotManager.takeScreenshot(this.page, 'login-redirect');
  }

  async testSessionPersistence() {
    // –¢–µ—Å—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    await this.page.goto(`${config.app.baseUrl}/en/auth/login`);
    
    // –õ–æ–≥–∏–Ω
    await this.page.fill('input[type="email"]', config.testData.validUser.email);
    await this.page.fill('input[type="password"]', config.testData.validUser.password);
    await this.page.click('button[type="submit"]');
    
    await this.page.waitForURL('**/dashboard', { timeout: config.timeouts.navigation });
    
    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    await this.page.reload({ waitUntil: 'networkidle' });
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å—Ç–∞–ª—Å—è –∑–∞–ª–æ–≥–∏–Ω–µ–Ω
    const currentUrl = this.page.url();
    if (currentUrl.includes('/auth/login')) {
      throw new Error('–°–µ—Å—Å–∏—è –Ω–µ —Å–æ—Ö—Ä–∞–Ω–∏–ª–∞—Å—å –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏');
    }

    await this.screenshotManager.takeScreenshot(this.page, 'session-persistence');
  }

  async runFullTests() {
    this.logger.info('üß™ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã');
    
    const testSuites = [
      { name: '–ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è', tests: () => this.runAuthTests() },
      { name: '–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ', tests: () => this.runPortfolioTests() },
      { name: '–ü—Ä–æ–µ–∫—Ç—ã –∏ –∑–∞—è–≤–∫–∏', tests: () => this.runJobTests() },
      { name: '–ê–¥–º–∏–Ω–∫–∞', tests: () => this.runAdminTests() },
      { name: '–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å', tests: () => this.runPerformanceTests() }
    ];

    const results = {
      suites: [],
      overall: {
        passed: 0,
        failed: 0,
        total: 0
      }
    };

    for (const suite of testSuites) {
      try {
        this.logger.info(`üìã –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤: ${suite.name}`);
        const suiteResult = await suite.tests();
        
        results.suites.push({
          name: suite.name,
          ...suiteResult
        });

        results.overall.total += suiteResult.tests.length;
        results.overall.passed += suiteResult.tests.filter(t => t.status === 'passed').length;
        results.overall.failed += suiteResult.tests.filter(t => t.status === 'failed').length;

      } catch (error) {
        this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö ${suite.name}: ${error.message}`);
        results.suites.push({
          name: suite.name,
          error: error.message,
          tests: [],
          issues: []
        });
        results.overall.failed++;
      }
    }

    return results;
  }

  async runPortfolioTests() {
    // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ
    return { tests: [], issues: [], logs: [] };
  }

  async runJobTests() {
    // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–µ–∫—Ç–æ–≤
    return { tests: [], issues: [], logs: [] };
  }

  async runAdminTests() {
    // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –∞–¥–º–∏–Ω–∫–∏
    return { tests: [], issues: [], logs: [] };
  }

  async runPerformanceTests() {
    // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    return { tests: [], issues: [], logs: [] };
  }

  async cleanup() {
    try {
      if (this.page) await this.page.close();
      if (this.context) await this.context.close();
      if (this.browser) await this.browser.close();
      this.logger.info('üßπ –ë—Ä–∞—É–∑–µ—Ä –∑–∞–∫—Ä—ã—Ç');
    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞: ${error.message}`);
    }
  }

  // ============ –ü–†–û–í–ï–†–ö–ê –î–û–°–¢–£–ü–ù–û–°–¢–ò –°–ê–ô–¢–ê ============

  async checkSiteAvailability() {
    this.logger.info('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ H-AI Platform...');

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–∞–π—Ç–∞ –ø–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω–æ–º—É URL
      const response = await axios.get(config.app.baseUrl, {
        timeout: 5000,
        validateStatus: (status) => status < 500 // –ü—Ä–∏–Ω–∏–º–∞–µ–º –ª—é–±–æ–π —Å—Ç–∞—Ç—É—Å –∫—Ä–æ–º–µ 5xx
      });

      this.logger.success(`‚úÖ H-AI Platform –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ ${config.app.baseUrl}`);
      return true;

    } catch (error) {
      this.logger.warn(`‚ö†Ô∏è H-AI Platform –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ ${config.app.baseUrl}`);

      // –ü—Ä–æ–±—É–µ–º —É–º–Ω—ã–π –ø–æ–∏—Å–∫ –Ω–∞ –¥—Ä—É–≥–∏—Ö –ø–æ—Ä—Ç–∞—Ö
      this.logger.info('üîç –ü–æ–∏—Å–∫ H-AI Platform –Ω–∞ –¥—Ä—É–≥–∏—Ö –ø–æ—Ä—Ç–∞—Ö...');
      const found = await this.smartSiteDetection();

      if (found) {
        return true;
      }

      // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–∞–π—Ç
      await this.handleSiteUnavailable();
      return false;
    }
  }

  async handleSiteUnavailable() {
    this.logger.info('üöÄ H-AI Platform –Ω–µ –∑–∞–ø—É—â–µ–Ω–∞. –í–∞—Ä–∏–∞–Ω—Ç—ã –¥–µ–π—Å—Ç–≤–∏–π:');

    const choices = [
      {
        name: 'üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å H-AI Platform',
        value: 'auto_start'
      },
      {
        name: '‚è≥ –ü–æ–¥–æ–∂–¥–∞—Ç—å –ø–æ–∫–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—Å—è –≤—Ä—É—á–Ω—É—é (30 —Å–µ–∫)',
        value: 'wait'
      },
      {
        name: 'üìã –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∑–∞–ø—É—Å–∫—É',
        value: 'instructions'
      },
      {
        name: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ',
        value: 'cancel'
      }
    ];

    const answer = await inquirer.prompt([
      {
        type: 'list',
        name: 'action',
        message: '–ß—Ç–æ –¥–µ–ª–∞—Ç—å?',
        choices: choices
      }
    ]);

    switch (answer.action) {
      case 'auto_start':
        await this.autoStartSite();
        break;
      case 'wait':
        await this.waitForSite();
        break;
      case 'instructions':
        this.showStartInstructions();
        await this.waitForSite();
        break;
      case 'cancel':
        throw new Error('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
    }
  }

  async autoStartSite() {
    this.logger.info('üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—É—Å–∫ H-AI Platform...');

    try {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É (–Ω–∞ —É—Ä–æ–≤–µ–Ω—å –≤—ã—à–µ –æ—Ç testing-bot)
      const projectPath = path.resolve(process.cwd(), '..');

      this.logger.info(`üìÅ –ü—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É: ${projectPath}`);

      // –ó–∞–ø—É—Å–∫–∞–µ–º npm run dev –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
      const child = spawn('npm', ['run', 'dev'], {
        cwd: projectPath,
        detached: true,
        stdio: ['ignore', 'pipe', 'pipe']
      });

      this.logger.info('‚è≥ –ó–∞–ø—É—Å–∫ H-AI Platform...');

      // –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
      let attempts = 0;
      const maxAttempts = 30; // 30 —Å–µ–∫—É–Ω–¥

      while (attempts < maxAttempts) {
        try {
          await new Promise(resolve => setTimeout(resolve, 1000)); // –ñ–¥–µ–º 1 —Å–µ–∫—É–Ω–¥—É

          const response = await axios.get(config.app.baseUrl, {
            timeout: 2000,
            validateStatus: (status) => status < 500
          });

          this.logger.success('‚úÖ H-AI Platform —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞!');
          return true;

        } catch (error) {
          attempts++;
          process.stdout.write(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞... ${attempts}/${maxAttempts}\r`);
        }
      }

      throw new Error('–¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –∑–∞–ø—É—Å–∫–∞ H-AI Platform');

    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∑–∞–ø—É—Å–∫–∞: ${error.message}`);
      this.showStartInstructions();
      await this.waitForSite();
    }
  }

  async waitForSite() {
    this.logger.info('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ H-AI Platform...');

    let attempts = 0;
    const maxAttempts = 30; // 30 —Å–µ–∫—É–Ω–¥

    while (attempts < maxAttempts) {
      try {
        await new Promise(resolve => setTimeout(resolve, 1000)); // –ñ–¥–µ–º 1 —Å–µ–∫—É–Ω–¥—É

        const response = await axios.get(config.app.baseUrl, {
          timeout: 2000,
          validateStatus: (status) => status < 500
        });

        this.logger.success('‚úÖ H-AI Platform –¥–æ—Å—Ç—É–ø–Ω–∞!');
        return true;

      } catch (error) {
        attempts++;
        process.stdout.write(`‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏... ${attempts}/${maxAttempts}\r`);
      }
    }

    throw new Error('H-AI Platform —Ç–∞–∫ –∏ –Ω–µ —Å—Ç–∞–ª–∞ –¥–æ—Å—Ç—É–ø–Ω–∞');
  }

  showStartInstructions() {
    console.log('\nüìã –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∑–∞–ø—É—Å–∫—É H-AI Platform:');
    console.log('');
    console.log('1. –û—Ç–∫—Ä–æ–π—Ç–µ –Ω–æ–≤—ã–π —Ç–µ—Ä–º–∏–Ω–∞–ª');
    console.log('2. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∫–æ—Ä–Ω–µ–≤—É—é –ø–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞:');
    console.log('   cd /Users/alexandr/Desktop/CODeAPPs/H-Ai');
    console.log('3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:');
    console.log('   npm run dev');
    console.log('4. –î–æ–∂–¥–∏—Ç–µ—Å—å —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–ø—É—Å–∫–µ –Ω–∞ http://localhost:3000');
    console.log('5. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ —ç—Ç–æ–º—É –æ–∫–Ω—É - —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏');
    console.log('');
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ—Ä—Ç–∞
  async checkPort(port) {
    try {
      const response = await axios.get(`http://localhost:${port}`, {
        timeout: 2000,
        validateStatus: (status) => status < 500
      });
      return true;
    } catch (error) {
      return false;
    }
  }

  // –£–º–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –∏—â–µ–º —Å–∞–π—Ç –Ω–∞ —Ä–∞–∑–Ω—ã—Ö –ø–æ—Ä—Ç–∞—Ö
  async smartSiteDetection() {
    this.logger.info('üîç –£–º–Ω—ã–π –ø–æ–∏—Å–∫ H-AI Platform...');

    const commonPorts = [3001, 3000, 3002, 8000, 8080, 5000];

    for (const port of commonPorts) {
      this.logger.info(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—Ç ${port}...`);

      if (await this.checkPort(port)) {
        const newUrl = `http://localhost:${port}`;
        this.logger.success(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ H-AI Platform –Ω–∞ ${newUrl}`);

        // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config.app.baseUrl = newUrl;

        return true;
      }
    }

    return false;
  }

  // ============ –û–ë–†–ê–ë–û–¢–ö–ê –û–®–ò–ë–û–ö –°–¢–†–ê–ù–ò–¶ ============

  async checkForErrorPage() {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –æ—à–∏–±–æ–∫
      const errorIndicators = [
        // 404 –æ—à–∏–±–∫–∏
        'h1:has-text("404")',
        'h1:has-text("Not Found")',
        'h1:has-text("Page Not Found")',
        'h1:has-text("–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")',

        // 500 –æ—à–∏–±–∫–∏
        'h1:has-text("500")',
        'h1:has-text("Internal Server Error")',
        'h1:has-text("–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")',

        // –û–±—â–∏–µ –æ—à–∏–±–∫–∏
        '.error-page',
        '.error-container',
        '[data-testid="error-page"]',

        // Next.js –æ—à–∏–±–∫–∏
        'h1:has-text("This page could not be found")',
        'h2:has-text("404")',

        // –¢–µ–∫—Å—Ç–æ–≤—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã
        'text="404"',
        'text="Page not found"',
        'text="–°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"'
      ];

      for (const selector of errorIndicators) {
        try {
          const errorElement = await this.page.$(selector);
          if (errorElement) {
            const errorText = await errorElement.textContent();
            this.logger.warn(`üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: ${errorText}`);

            // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –æ—à–∏–±–∫–∏
            await this.screenshotManager.takeScreenshot(this.page, 'error-page-detected');

            return true;
          }
        } catch (error) {
          // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤
          continue;
        }
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–¥ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —á–µ—Ä–µ–∑ response
      const response = this.page.url();
      if (response.includes('404') || response.includes('error')) {
        this.logger.warn(`üö® –û—à–∏–±–∫–∞ –≤ URL: ${response}`);
        return true;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      const title = await this.page.title();
      const errorTitles = ['404', 'Not Found', 'Error', '–û—à–∏–±–∫–∞', 'Page Not Found'];

      for (const errorTitle of errorTitles) {
        if (title.toLowerCase().includes(errorTitle.toLowerCase())) {
          this.logger.warn(`üö® –û—à–∏–±–∫–∞ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ: ${title}`);
          return true;
        }
      }

      return false;

    } catch (error) {
      this.logger.debug(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞ –æ—à–∏–±–∫–∏: ${error.message}`);
      return false;
    }
  }

  async goToHomePage() {
    try {
      this.logger.info('üè† –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...');

      // –í–æ–∑–º–æ–∂–Ω—ã–µ URL –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
      const homeUrls = [
        '/',
        '/en',
        '/home',
        '/en/home',
        '/dashboard',
        '/en/dashboard'
      ];

      for (const homeUrl of homeUrls) {
        try {
          await this.page.goto(`${config.app.baseUrl}${homeUrl}`, {
            waitUntil: 'networkidle',
            timeout: 10000
          });

          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –Ω–µ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –æ—à–∏–±–∫–∏
          const isErrorPage = await this.checkForErrorPage();
          if (!isErrorPage) {
            this.logger.success(`‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ –≥–ª–∞–≤–Ω—É—é: ${homeUrl}`);

            // –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            await this.screenshotManager.takeScreenshot(this.page, 'homepage-recovery');

            return true;
          }
        } catch (error) {
          this.logger.debug(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ ${homeUrl}: ${error.message}`);
          continue;
        }
      }

      this.logger.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—á—É—é –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É');
      return false;

    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –Ω–∞ –≥–ª–∞–≤–Ω—É—é: ${error.message}`);
      return false;
    }
  }

  // –£–º–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
  async smartNavigateToPage(targetUrls, pageType) {
    this.logger.info(`üß≠ –£–º–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –∫ ${pageType}...`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
    if (this.foundPages.has(pageType)) {
      const cachedUrl = this.foundPages.get(pageType);
      this.logger.info(`‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–π URL –¥–ª—è ${pageType}: ${cachedUrl}`);
      return cachedUrl;
    }

    for (const url of targetUrls) {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ URL
      if (this.visitedUrls.has(url)) {
        this.logger.debug(`‚ö†Ô∏è URL ${url} —É–∂–µ –ø—Ä–æ–≤–µ—Ä—è–ª—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
        continue;
      }

      try {
        this.logger.info(`üîç –ü—Ä–æ–±—É–µ–º URL: ${url}`);
        this.visitedUrls.add(url);

        await this.page.goto(`${config.app.baseUrl}${url}`, {
          waitUntil: 'networkidle',
          timeout: 10000
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏
        const isErrorPage = await this.checkForErrorPage();
        if (isErrorPage) {
          this.logger.warn(`‚ö†Ô∏è –°—Ç—Ä–∞–Ω–∏—Ü–∞ ${url} —Å–æ–¥–µ—Ä–∂–∏—Ç –æ—à–∏–±–∫—É`);
          continue; // –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é –∫–∞–∂–¥—ã–π —Ä–∞–∑
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω—É–∂–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        const hasCorrectContent = await this.validatePageContent(pageType);
        if (hasCorrectContent) {
          this.logger.success(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ${pageType}: ${url}`);

          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
          this.foundPages.set(pageType, url);
          return url;
        }

      } catch (error) {
        this.logger.debug(`‚ùå –û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∫ ${url}: ${error.message}`);
        continue;
      }
    }

    // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ URL, –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ –Ω–∞–≤–∏–≥–∞—Ü–∏—é
    this.logger.info(`üîç –ü—Ä—è–º—ã–µ URL –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∏, –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ –Ω–∞–≤–∏–≥–∞—Ü–∏—é...`);
    const homeSuccess = await this.goToHomePage();
    if (homeSuccess) {
      const foundThroughNav = await this.findPageThroughNavigation(pageType);
      if (foundThroughNav) {
        this.foundPages.set(pageType, foundThroughNav);
        return foundThroughNav;
      }
    }

    return null;
  }

  async validatePageContent(pageType) {
    try {
      switch (pageType) {
        case 'login':
          return await this.checkForLoginForm();
        case 'register':
          return await this.checkForRegisterForm();
        default:
          return true;
      }
    } catch (error) {
      return false;
    }
  }

  async findPageThroughNavigation(pageType) {
    try {
      const cacheKey = `nav_search_${pageType}`;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
      if (this.attemptedActions.has(cacheKey)) {
        this.logger.debug(`‚ö†Ô∏è –ü–æ–∏—Å–∫ ${pageType} —á–µ—Ä–µ–∑ –Ω–∞–≤–∏–≥–∞—Ü–∏—é —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–ª—Å—è`);
        return this.foundPages.get(pageType) || null;
      }

      this.attemptedActions.add(cacheKey);
      this.logger.info(`üîç –ü–æ–∏—Å–∫ ${pageType} —á–µ—Ä–µ–∑ –Ω–∞–≤–∏–≥–∞—Ü–∏—é...`);

      const linkSelectors = this.getLinkSelectorsForPageType(pageType);

      for (const selector of linkSelectors) {
        try {
          const link = await this.page.$(selector);
          if (link) {
            const href = await link.getAttribute('href');

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ –ø–æ—Å–µ—â–∞–ª–∏ —ç—Ç–æ—Ç URL
            if (this.visitedUrls.has(href)) {
              this.logger.debug(`‚ö†Ô∏è URL ${href} —É–∂–µ –ø—Ä–æ–≤–µ—Ä—è–ª—Å—è`);
              continue;
            }

            this.logger.info(`üîó –ù–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞: ${href}`);
            this.visitedUrls.add(href);

            // –ö–ª–∏–∫–∞–µ–º –ø–æ —Å—Å—ã–ª–∫–µ
            await link.click();
            await this.page.waitForLoadState('networkidle');

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ –ø–æ–ø–∞–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ—à–∏–±–∫–∏
            const isErrorPage = await this.checkForErrorPage();
            if (isErrorPage) {
              this.logger.warn(`‚ö†Ô∏è –°—Å—ã–ª–∫–∞ ${href} –≤–µ–¥–µ—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ—à–∏–±–∫–∏`);
              await this.goToHomePage();
              continue;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
            const hasCorrectContent = await this.validatePageContent(pageType);
            if (hasCorrectContent) {
              const currentUrl = this.page.url();
              const relativePath = currentUrl.replace(config.app.baseUrl, '');

              // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
              this.foundPages.set(pageType, relativePath);

              this.logger.success(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ ${pageType} —á–µ—Ä–µ–∑ –Ω–∞–≤–∏–≥–∞—Ü–∏—é: ${currentUrl}`);
              return relativePath;
            }
          }
        } catch (error) {
          this.logger.debug(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –ø–æ —Å—Å—ã–ª–∫–µ ${selector}: ${error.message}`);
          await this.goToHomePage();
          continue;
        }
      }

      return null;
    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ –Ω–∞–≤–∏–≥–∞—Ü–∏—é: ${error.message}`);
      return null;
    }
  }

  getLinkSelectorsForPageType(pageType) {
    const selectorMap = {
      login: [
        'a[href*="login"]',
        'a[href*="signin"]',
        'a[href*="auth"]',
        'a:has-text("Login")',
        'a:has-text("Sign In")',
        'a:has-text("–í–æ–π—Ç–∏")',
        'a:has-text("–í—Ö–æ–¥")',
        'button:has-text("Login")',
        'button:has-text("–í–æ–π—Ç–∏")',
        '[data-testid*="login"]'
      ],
      register: [
        'a[href*="register"]',
        'a[href*="signup"]',
        'a[href*="sign-up"]',
        'a:has-text("Register")',
        'a:has-text("Sign Up")',
        'a:has-text("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")',
        'a:has-text("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")',
        'button:has-text("Register")',
        'button:has-text("Sign Up")',
        'button:has-text("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")',
        '[data-testid*="register"]',
        '[data-testid*="signup"]'
      ]
    };

    return selectorMap[pageType] || [];
  }

  // ============ –ü–û–õ–ù–´–ï –¶–ò–ö–õ–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø ============

  async testFullRegistrationFlow() {
    this.logger.info('üîÑ –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const timestamp = Date.now();
    const testUser = {
      name: `Test User ${timestamp}`,
      email: `test.user.${timestamp}@h-ai.com`,
      password: 'TestPassword123!'
    };

    this.logger.info(`üë§ –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${testUser.email}`);

    try {
      // 1. –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ä–∞–±–æ—á–∏–º)
      const registerUrls = [
        '/en/signup',    // –≠—Ç–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!
        '/signup',
        '/en/register',
        '/register'
      ];

      let workingUrl = await this.smartNavigateToPage(registerUrls, 'register');

      if (!workingUrl) {
        // –ò—â–µ–º —á–µ—Ä–µ–∑ –Ω–∞–≤–∏–≥–∞—Ü–∏—é
        const homeSuccess = await this.goToHomePage();
        if (homeSuccess) {
          workingUrl = await this.findPageThroughNavigation('register');
        }
      }

      if (!workingUrl) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
      }

      // 2. –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
      await this.fillRegistrationForm(testUser);

      // 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É
      await this.submitRegistrationForm();

      // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
      await this.verifyRegistrationSuccess();

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö —Ç–µ—Å—Ç–æ–≤
      this.testUser = testUser;

      this.logger.success(`‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${testUser.email} —É—Å–ø–µ—à–Ω–∞!`);

    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${error.message}`);
      throw error;
    }
  }

  async fillRegistrationForm(testUser) {
    this.logger.info('üìù –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...');

    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—è —Ñ–æ—Ä–º—ã
    const nameField = await this.findRegistrationField('name');
    const emailField = await this.findRegistrationField('email');
    const passwordField = await this.findRegistrationField('password');
    const confirmPasswordField = await this.findRegistrationField('confirmPassword');

    if (!nameField || !emailField || !passwordField) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è —Ñ–æ—Ä–º—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');
    }

    // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø–æ–ª—è
    await nameField.fill(testUser.name);
    await emailField.fill(testUser.email);
    await passwordField.fill(testUser.password);

    if (confirmPasswordField) {
      await confirmPasswordField.fill(testUser.password);
    }

    // –ü—Ä–∏–Ω–∏–º–∞–µ–º —É—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å
    const termsCheckbox = await this.page.$('input[type="checkbox"]');
    if (termsCheckbox) {
      await termsCheckbox.check();
    }

    await this.screenshotManager.takeScreenshot(this.page, 'registration-form-filled');
    this.logger.success('‚úÖ –§–æ—Ä–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞');
  }

  async findRegistrationField(fieldType) {
    const fieldSelectors = {
      name: [
        'input[name="name"]',
        'input[id="name"]',
        'input[placeholder*="name" i]',
        'input[placeholder*="–∏–º—è" i]'
      ],
      email: [
        'input[type="email"]',
        'input[name="email"]',
        'input[id="email"]',
        'input[placeholder*="email" i]'
      ],
      password: [
        'input[type="password"]:not([name*="confirm"])',
        'input[name="password"]:not([name*="confirm"])',
        'input[id="password"]:not([id*="confirm"])'
      ],
      confirmPassword: [
        'input[name*="confirm"]',
        'input[id*="confirm"]',
        'input[placeholder*="confirm" i]',
        'input[placeholder*="repeat" i]'
      ]
    };

    const selectors = fieldSelectors[fieldType] || [];

    for (const selector of selectors) {
      const field = await this.page.$(selector);
      if (field) {
        this.logger.debug(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª–µ ${fieldType}: ${selector}`);
        return field;
      }
    }

    return null;
  }

  async submitRegistrationForm() {
    this.logger.info('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...');

    // –ù–∞—Ö–æ–¥–∏–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
    const submitSelectors = [
      'button[type="submit"]',
      'input[type="submit"]',
      'button:has-text("Sign Up")',
      'button:has-text("Register")',
      'button:has-text("Create Account")',
      'button:has-text("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")',
      '.btn-primary',
      '.submit-button'
    ];

    let submitButton = null;
    for (const selector of submitSelectors) {
      submitButton = await this.page.$(selector);
      if (submitButton) {
        this.logger.debug(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ${selector}`);
        break;
      }
    }

    if (!submitButton) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã');
    }

    // –ö–ª–∏–∫–∞–µ–º –∫–Ω–æ–ø–∫—É
    await submitButton.click();
    this.logger.info('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...');

    // –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await this.page.waitForTimeout(3000);
  }

  async verifyRegistrationSuccess() {
    this.logger.info('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...');

    // –í–æ–∑–º–æ–∂–Ω—ã–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    const successIndicators = [
      // –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ dashboard
      () => this.page.url().includes('/dashboard'),
      // –†–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –ª–æ–≥–∏–Ω
      () => this.page.url().includes('/login'),
      // –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
      () => this.page.$('.success, .alert-success, [role="alert"]'),
      // –ü–æ—è–≤–ª–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∫–∏ (–µ—Å–ª–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ª–æ–≥–∏–Ω–∏–ª—Å—è)
      () => this.checkUserAvatarPresence()
    ];

    let registrationSuccessful = false;

    for (const indicator of successIndicators) {
      try {
        const result = await indicator();
        if (result) {
          registrationSuccessful = true;
          break;
        }
      } catch (error) {
        continue;
      }
    }

    if (!registrationSuccessful) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏
      const errorElement = await this.page.$('.error, .alert-error, [role="alert"]');
      if (errorElement) {
        const errorText = await errorElement.textContent();
        throw new Error(`–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: ${errorText}`);
      }

      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É—Å–ø–µ—à–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é');
    }

    await this.screenshotManager.takeScreenshot(this.page, 'registration-success');
    this.logger.success('‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  }

  async testFullLoginFlow() {
    this.logger.info('üîê –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –ª–æ–≥–∏–Ω–∞...');

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–ª–∏ —Ç–µ—Å—Ç–æ–≤—ã–µ
    const loginUser = this.testUser || {
      email: 'admin@h-ai.com',
      password: 'AdminH-AI2024!'
    };

    this.logger.info(`üîë –í—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${loginUser.email}`);

    try {
      // 1. –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞
      const loginUrls = [
        '/en/login',
        '/login',
        '/signin',
        '/en/signin'
      ];

      let workingUrl = await this.smartNavigateToPage(loginUrls, 'login');

      if (!workingUrl) {
        const homeSuccess = await this.goToHomePage();
        if (homeSuccess) {
          workingUrl = await this.findPageThroughNavigation('login');
        }
      }

      if (!workingUrl) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞');
      }

      // 2. –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –ª–æ–≥–∏–Ω–∞
      await this.fillLoginForm(loginUser);

      // 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É
      await this.submitLoginForm();

      // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω—ã–π –ª–æ–≥–∏–Ω
      await this.verifyLoginSuccess();

      this.logger.success(`‚úÖ –õ–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${loginUser.email} —É—Å–ø–µ—à–µ–Ω!`);

    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏–Ω–∞: ${error.message}`);
      throw error;
    }
  }

  async fillLoginForm(loginUser) {
    this.logger.info('üìù –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –ª–æ–≥–∏–Ω–∞...');

    const emailField = await this.findEmailField();
    const passwordField = await this.findPasswordField();

    if (!emailField || !passwordField) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—è —Ñ–æ—Ä–º—ã –ª–æ–≥–∏–Ω–∞');
    }

    await emailField.fill(loginUser.email);
    await passwordField.fill(loginUser.password);

    await this.screenshotManager.takeScreenshot(this.page, 'login-form-filled');
    this.logger.success('‚úÖ –§–æ—Ä–º–∞ –ª–æ–≥–∏–Ω–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞');
  }

  async submitLoginForm() {
    this.logger.info('üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ä–º—ã –ª–æ–≥–∏–Ω–∞...');

    const submitButton = await this.findSubmitButton();
    if (!submitButton) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏');
    }

    await submitButton.click();
    this.logger.info('‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–æ–≥–∏–Ω–∞...');

    // –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await this.page.waitForTimeout(3000);
  }

  async verifyLoginSuccess() {
    this.logger.info('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ª–æ–≥–∏–Ω–∞...');

    // –ñ–¥–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    await this.page.waitForTimeout(2000);

    const currentUrl = this.page.url();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ dashboard
    if (currentUrl.includes('/dashboard')) {
      this.logger.success('‚úÖ –£—Å–ø–µ—à–Ω—ã–π —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ dashboard');
      await this.screenshotManager.takeScreenshot(this.page, 'login-success-dashboard');
      return true;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—è–≤–ª–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∫–∏ –Ω–∞ –ª—é–±–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    const hasAvatar = await this.checkUserAvatarPresence();
    if (hasAvatar) {
      this.logger.success('‚úÖ –ê–≤–∞—Ç–∞—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–π–¥–µ–Ω–∞');
      await this.screenshotManager.takeScreenshot(this.page, 'login-success-avatar');
      return true;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –æ—à–∏–±–∫–∏
    const errorElement = await this.page.$('.error, .alert-error, [role="alert"]');
    if (errorElement) {
      const errorText = await errorElement.textContent();
      throw new Error(`–û—à–∏–±–∫–∞ –ª–æ–≥–∏–Ω–∞: ${errorText}`);
    }

    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É—Å–ø–µ—à–Ω—ã–π –ª–æ–≥–∏–Ω');
  }

  async testUserAvatarDisplay() {
    this.logger.info('üë§ –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–≤–∞—Ç–∞—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–≤–∞—Ç–∞—Ä–∫–∏
      const hasAvatar = await this.checkUserAvatarPresence();

      if (!hasAvatar) {
        throw new Error('–ê–≤–∞—Ç–∞—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏');
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∞–≤–∞—Ç–∞—Ä–∫–∏
      await this.testAvatarInteractivity();

      this.logger.success('‚úÖ –ê–≤–∞—Ç–∞—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');

    } catch (error) {
      this.logger.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏: ${error.message}`);
      throw error;
    }
  }

  async checkUserAvatarPresence() {
    this.logger.info('üîç –ü–æ–∏—Å–∫ –∞–≤–∞—Ç–∞—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');

    const avatarSelectors = [
      // –ö–æ–º–ø–æ–Ω–µ–Ω—Ç UserAvatar
      '.user-avatar img',
      '.user-avatar [class*="rounded-full"]',

      // –û–±—â–∏–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –∞–≤–∞—Ç–∞—Ä–æ–∫
      'img[alt*="avatar" i]',
      'img[alt*="user" i]',
      '[class*="avatar"] img',

      // –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∞–≤–∞—Ç–∞—Ä–∫–∏
      'nav img[class*="rounded"]',
      'header img[class*="rounded"]',

      // –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–µ –∞–≤–∞—Ç–∞—Ä–∫–∏ (fallback)
      '[class*="bg-gradient"][class*="rounded-full"]',
      '[class*="from-purple"][class*="rounded-full"]',

      // –ü–æ data-testid
      '[data-testid*="avatar"]',
      '[data-testid*="user"]'
    ];

    for (const selector of avatarSelectors) {
      const avatar = await this.page.$(selector);
      if (avatar) {
        this.logger.success(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∞–≤–∞—Ç–∞—Ä–∫–∞: ${selector}`);
        await this.screenshotManager.takeScreenshot(this.page, 'user-avatar-found');
        return true;
      }
    }

    this.logger.warn('‚ö†Ô∏è –ê–≤–∞—Ç–∞—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    await this.screenshotManager.takeScreenshot(this.page, 'user-avatar-not-found');
    return false;
  }

  async testAvatarInteractivity() {
    this.logger.info('üñ±Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∞–≤–∞—Ç–∞—Ä–∫–∏...');

    const interactiveSelectors = [
      'button:has(img[alt*="avatar" i])',
      'button:has([class*="avatar"])',
      '[role="button"]:has(img)',
      '.user-avatar',
      '[data-testid*="avatar"]'
    ];

    for (const selector of interactiveSelectors) {
      const element = await this.page.$(selector);
      if (element) {
        this.logger.info(`üñ±Ô∏è –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–ª–∏–∫ –ø–æ –∞–≤–∞—Ç–∞—Ä–∫–µ: ${selector}`);

        // –ö–ª–∏–∫–∞–µ–º –ø–æ –∞–≤–∞—Ç–∞—Ä–∫–µ
        await element.click();
        await this.page.waitForTimeout(1000);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—è–≤–ª–µ–Ω–∏–µ –º–µ–Ω—é
        const menuSelectors = [
          '.dropdown-menu',
          '[role="menu"]',
          '.user-menu',
          '.profile-menu',
          '[class*="absolute"][class*="menu"]'
        ];

        for (const menuSelector of menuSelectors) {
          const menu = await this.page.$(menuSelector);
          if (menu) {
            this.logger.success(`‚úÖ –ú–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–∫—Ä—ã–ª–æ—Å—å: ${menuSelector}`);
            await this.screenshotManager.takeScreenshot(this.page, 'user-menu-opened');

            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é –∫–ª–∏–∫–æ–º –≤ –¥—Ä—É–≥–æ–µ –º–µ—Å—Ç–æ
            await this.page.click('body');
            return true;
          }
        }
      }
    }

    this.logger.warn('‚ö†Ô∏è –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∞–≤–∞—Ç–∞—Ä–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    return false;
  }
}
