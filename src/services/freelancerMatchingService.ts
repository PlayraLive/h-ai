import { databases, DATABASE_ID, COLLECTIONS } from '@/lib/appwrite/database';
import { Query } from 'appwrite';

export interface FreelancerProfile {
  $id: string;
  name: string;
  email: string;
  avatar?: string;
  bio?: string;
  skills: string[];
  hourlyRate?: number;
  rating?: number;
  reviewsCount?: number;
  completedJobs?: number;
  location?: string;
  responseTime?: string;
  verification_status?: string;
  availability?: string;
  userType: string;
  languages?: string[];
  experienceLevel?: string;
  totalEarned?: number;
}

export interface JobRequirements {
  skills: string[];
  experienceLevel?: string;
  budgetMin?: number;
  budgetMax?: number;
  category?: string;
}

export interface MatchScore {
  freelancerId: string;
  score: number;
  skillsMatch: number;
  ratingScore: number;
  experienceScore: number;
  availabilityScore: number;
  budgetCompatibility: number;
  reasons: string[];
}

export class FreelancerMatchingService {
  /**
   * –ù–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–æ–≤ –¥–ª—è –¥–∂–æ–±–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º AI-–∞–ª–≥–æ—Ä–∏—Ç–º–∞
   */
  static async findMatchingFreelancers(
    jobRequirements: JobRequirements,
    limit: number = 10
  ): Promise<{ freelancers: FreelancerProfile[]; matches: MatchScore[] }> {
    try {
      console.log('üîç –ü–æ–∏—Å–∫ —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–æ–≤ –¥–ª—è —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π:', jobRequirements);
      
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–æ–≤
      const freelancersResponse = await databases.listDocuments(
        DATABASE_ID,
        COLLECTIONS.USERS,
        [
          Query.equal('userType', 'freelancer'),
          Query.limit(100), // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
          // Query.orderDesc('rating') // –£–±–∏—Ä–∞–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É –ø–æ–∫–∞ –Ω–µ –∏—Å–ø—Ä–∞–≤–∏–º
        ]
      );

      const freelancers = freelancersResponse.documents as FreelancerProfile[];
      
      console.log('üîç –ù–∞–π–¥–µ–Ω–æ —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–æ–≤ –≤ –±–∞–∑–µ:', freelancers.length);
      if (freelancers.length > 0) {
        console.log('üîç –ü–µ—Ä–≤—ã–π —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä:', {
          id: freelancers[0].$id,
          name: freelancers[0].name,
          skills: freelancers[0].skills,
          userType: freelancers[0].userType
        });
      }

      // –í—ã—á–∏—Å–ª—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–∞
      const matches: MatchScore[] = [];

      for (const freelancer of freelancers) {
        try {
          const matchScore = this.calculateMatchScore(freelancer, jobRequirements);
          if (matchScore.score > 0.1) { // –°–Ω–∏–∂–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –ø–æ—Ä–æ–≥ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
            matches.push(matchScore);
          }
        } catch (error) {
          console.warn('–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –º–∞—Ç—á–∞ –¥–ª—è —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–∞:', freelancer.$id, error);
        }
      }

      console.log('üîç –í—ã—á–∏—Å–ª–µ–Ω–æ –º–∞—Ç—á–µ–π:', matches.length);

      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Ä–µ–π—Ç–∏–Ω–≥–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
      matches.sort((a, b) => b.score - a.score);

      // –ë–µ—Ä–µ–º —Ç–æ–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
      const topMatches = matches.slice(0, limit);
      const matchingFreelancers = topMatches.map(match => 
        freelancers.find(f => f.$id === match.freelancerId)!
      ).filter(Boolean); // –£–±–∏—Ä–∞–µ–º undefined

      console.log('üîç –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–æ–≤:', matchingFreelancers.length);

      return {
        freelancers: matchingFreelancers,
        matches: topMatches
      };
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–æ–≤:', error);
      throw new Error('Failed to find matching freelancers');
    }
  }

  /**
   * –í—ã—á–∏—Å–ª–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–∞ —Å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º–∏ –¥–∂–æ–±–∞
   */
  private static calculateMatchScore(
    freelancer: FreelancerProfile,
    jobRequirements: JobRequirements
  ): MatchScore {
    console.log('üîç –í—ã—á–∏—Å–ª—è–µ–º –º–∞—Ç—á –¥–ª—è —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–∞:', freelancer.name, 'ID:', freelancer.$id);
    console.log('üîç –ù–∞–≤—ã–∫–∏ —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–∞:', freelancer.skills);
    console.log('üîç –¢—Ä–µ–±—É–µ–º—ã–µ –Ω–∞–≤—ã–∫–∏:', jobRequirements.skills);
    
    const reasons: string[] = [];
    let totalScore = 0;

    // 1. –°–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–æ–≤ (50% –æ—Ç –æ–±—â–µ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞)
    const skillsMatch = this.calculateSkillsMatch(freelancer.skills || [], jobRequirements.skills);
    const skillsScore = skillsMatch * 0.5;
    totalScore += skillsScore;

    if (skillsMatch > 0.7) {
      reasons.push('–û—Ç–ª–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–æ–≤');
    } else if (skillsMatch > 0.4) {
      reasons.push('–•–æ—Ä–æ—à–µ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–æ–≤');
    } else if (skillsMatch > 0.1) {
      reasons.push('–ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–æ–≤');
    }

    // 2. –†–µ–π—Ç–∏–Ω–≥ —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–∞ (20% –æ—Ç –æ–±—â–µ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞)
    const rating = freelancer.rating || 0;
    const ratingScore = (rating / 5) * 0.2;
    totalScore += ratingScore;

    if (rating >= 4.5) {
      reasons.push('–í—ã—Å–æ–∫–∏–π —Ä–µ–π—Ç–∏–Ω–≥');
    } else if (rating >= 4.0) {
      reasons.push('–•–æ—Ä–æ—à–∏–π —Ä–µ–π—Ç–∏–Ω–≥');
    } else if (rating > 0) {
      reasons.push('–ï—Å—Ç—å —Ä–µ–π—Ç–∏–Ω–≥');
    }

    // 3. –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã (20% –æ—Ç –æ–±—â–µ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞)
    const completedJobs = freelancer.completedJobs || 0;
    const experienceScore = Math.min(completedJobs / 20, 1) * 0.2; // –ú–∞–∫—Å–∏–º—É–º –ø—Ä–∏ 20+ –ø—Ä–æ–µ–∫—Ç–∞—Ö
    totalScore += experienceScore;

    if (completedJobs >= 10) {
      reasons.push('–ë–æ–ª—å—à–æ–π –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã');
    } else if (completedJobs >= 3) {
      reasons.push('–î–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –æ–ø—ã—Ç');
    } else if (completedJobs > 0) {
      reasons.push('–ï—Å—Ç—å –æ–ø—ã—Ç');
    }

    // 4. –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å (5% –æ—Ç –æ–±—â–µ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞)
    const availabilityScore = freelancer.availability === 'available' ? 0.05 : 0.025;
    totalScore += availabilityScore;

    if (freelancer.availability === 'available') {
      reasons.push('–î–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã');
    }

    // 5. –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –±—é–¥–∂–µ—Ç–∞ (5% –æ—Ç –æ–±—â–µ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞)
    let budgetCompatibility = 0;
    if (freelancer.hourlyRate && jobRequirements.budgetMax) {
      const hourlyRate = freelancer.hourlyRate;
      const maxBudget = jobRequirements.budgetMax;
      
      // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º 40 —á–∞—Å–æ–≤ —Ä–∞–±–æ—Ç—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
      const estimatedCost = hourlyRate * 40;
      
      if (estimatedCost <= maxBudget) {
        budgetCompatibility = 0.05;
        reasons.push('–ü–æ–¥—Ö–æ–¥—è—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å');
      } else if (estimatedCost <= maxBudget * 1.2) {
        budgetCompatibility = 0.025;
        reasons.push('–ü—Ä–∏–µ–º–ª–µ–º–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å');
      }
    } else {
      budgetCompatibility = 0.025; // –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π –±–∞–ª–ª –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
    }
    totalScore += budgetCompatibility;

    // –ë–æ–Ω—É—Å—ã
    if (freelancer.verification_status === 'verified') {
      totalScore += 0.05;
      reasons.push('–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–∫–∫–∞—É–Ω—Ç');
    }

    if (freelancer.responseTime && this.parseResponseTime(freelancer.responseTime) <= 4) {
      totalScore += 0.03;
      reasons.push('–ë—ã—Å—Ç—Ä—ã–π –æ—Ç–∫–ª–∏–∫');
    }

    const finalScore = Math.min(totalScore, 1);
    console.log('üîç –§–∏–Ω–∞–ª—å–Ω—ã–π –º–∞—Ç—á –¥–ª—è', freelancer.name, ':', finalScore, '–ü—Ä–∏—á–∏–Ω—ã:', reasons);
    
    return {
      freelancerId: freelancer.$id,
      score: finalScore, // –ú–∞–∫—Å–∏–º—É–º 1.0
      skillsMatch,
      ratingScore: rating / 5,
      experienceScore: Math.min(completedJobs / 20, 1),
      availabilityScore: freelancer.availability === 'available' ? 1 : 0.5,
      budgetCompatibility,
      reasons
    };
  }

  /**
   * –í—ã—á–∏—Å–ª–∏—Ç—å —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –Ω–∞–≤—ã–∫–æ–≤
   */
  private static calculateSkillsMatch(freelancerSkills: string[], jobSkills: string[]): number {
    if (jobSkills.length === 0) return 0.5; // –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π –±–∞–ª–ª –µ—Å–ª–∏ –Ω–∞–≤—ã–∫–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã
    if (freelancerSkills.length === 0) return 0; // –ù–µ—Ç –Ω–∞–≤—ã–∫–æ–≤ —É —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–∞

    const normalizedFreelancerSkills = freelancerSkills.map(skill => skill.toLowerCase().trim());
    const normalizedJobSkills = jobSkills.map(skill => skill.toLowerCase().trim());

    let matchCount = 0;
    let partialMatchCount = 0;

    for (const jobSkill of normalizedJobSkills) {
      // –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
      if (normalizedFreelancerSkills.includes(jobSkill)) {
        matchCount++;
        continue;
      }

      // –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ (—Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–¥—Å—Ç—Ä–æ–∫—É)
      const hasPartialMatch = normalizedFreelancerSkills.some(freelancerSkill =>
        freelancerSkill.includes(jobSkill) || jobSkill.includes(freelancerSkill)
      );

      if (hasPartialMatch) {
        partialMatchCount++;
      }
    }

    // –¢–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –≤–µ—Å—è—Ç –±–æ–ª—å—à–µ —á–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–µ
    const score = (matchCount + partialMatchCount * 0.5) / jobSkills.length;
    return Math.min(score, 1);
  }

  /**
   * –ü–∞—Ä—Å–∏—Ç—å –≤—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ –≤ —á–∞—Å—ã
   */
  private static parseResponseTime(responseTime: string): number {
    const time = responseTime.toLowerCase();
    
    if (time.includes('minute')) {
      const minutes = parseInt(time.match(/\d+/)?.[0] || '60');
      return minutes / 60;
    }
    
    if (time.includes('hour')) {
      return parseInt(time.match(/\d+/)?.[0] || '24');
    }
    
    if (time.includes('day')) {
      const days = parseInt(time.match(/\d+/)?.[0] || '1');
      return days * 24;
    }
    
    return 24; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 24 —á–∞—Å–∞
  }

  /**
   * –§–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–æ–≤ –ø–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º
   */
  static filterFreelancers(
    freelancers: FreelancerProfile[],
    filters: {
      minRating?: number;
      maxHourlyRate?: number;
      verified?: boolean;
      available?: boolean;
    }
  ): FreelancerProfile[] {
    let filtered = [...freelancers];

    if (filters.minRating && filters.minRating > 0) {
      filtered = filtered.filter(f => (f.rating || 0) >= filters.minRating!);
    }

    if (filters.maxHourlyRate && filters.maxHourlyRate < 1000) {
      filtered = filtered.filter(f => (f.hourlyRate || 0) <= filters.maxHourlyRate!);
    }

    if (filters.verified) {
      filtered = filtered.filter(f => f.verification_status === 'verified');
    }

    if (filters.available) {
      filtered = filtered.filter(f => f.availability === 'available');
    }

    return filtered;
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–æ–≤ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
   */
  static async getTopFreelancers(limit: number = 10): Promise<FreelancerProfile[]> {
    try {
      const response = await databases.listDocuments(
        DATABASE_ID,
        COLLECTIONS.USERS,
        [
          Query.equal('userType', 'freelancer'),
          Query.limit(limit),
          Query.orderDesc('$createdAt') // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è
        ]
      );

      return response.documents as FreelancerProfile[];
    } catch (error) {
      console.error('Error getting top freelancers:', error);
      return [];
    }
  }

  /**
   * –ü–æ–ª—É—á–∏—Ç—å —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–æ–≤ –ø–æ –Ω–∞–≤—ã–∫–∞–º
   */
  static async getFreelancersBySkills(skills: string[], limit: number = 10): Promise<FreelancerProfile[]> {
    try {
      const response = await databases.listDocuments(
        DATABASE_ID,
        COLLECTIONS.USERS,
        [
          Query.equal('userType', 'freelancer'),
          Query.limit(limit)
        ]
      );

      const freelancers = response.documents as FreelancerProfile[];
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –Ω–∞–≤—ã–∫–∞–º
      return freelancers.filter(freelancer => 
        freelancer.skills && freelancer.skills.some(skill =>
          skills.some(requiredSkill =>
            skill.toLowerCase().includes(requiredSkill.toLowerCase()) ||
            requiredSkill.toLowerCase().includes(skill.toLowerCase())
          )
        )
      );
    } catch (error) {
      console.error('Error getting freelancers by skills:', error);
      return [];
    }
  }
}
