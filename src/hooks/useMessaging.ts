// React —Ö—É–∫ –¥–ª—è –º–µ—Å—Å–µ–Ω–¥–∂–∏–Ω–≥–∞
'use client';

import { useState, useEffect, useCallback, useRef } from 'react';
import {
  messagingService,
  Message,
  Conversation,
  OrderAttachment,
  TimelineData,
  MilestoneData,
  TypingIndicator
} from '../services/messaging';

export interface UseMessagingOptions {
  conversationId?: string;
  userId: string;
  autoMarkAsRead?: boolean;
  enableTypingIndicator?: boolean;
}

export interface UseMessagingReturn {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ
  messages: Message[];
  conversations: Conversation[];
  currentConversation: Conversation | null;
  isLoading: boolean;
  isLoadingMessages: boolean;
  error: string | null;
  typingUsers: TypingIndicator[];
  
  // –î–µ–π—Å—Ç–≤–∏—è —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
  sendMessage: (content: string, options?: SendMessageOptions) => Promise<void>;
  sendOrderMessage: (orderData: OrderAttachment, message?: string) => Promise<void>;
  sendTimelineUpdate: (timelineData: TimelineData) => Promise<void>;
  sendMilestoneUpdate: (milestoneData: MilestoneData) => Promise<void>;
  editMessage: (messageId: string, newContent: string) => Promise<void>;
  deleteMessage: (messageId: string) => Promise<void>;
  forwardMessage: (messageId: string, toConversationId: string, receiverId: string) => Promise<void>;
  addReaction: (messageId: string, emoji: string) => Promise<void>;
  markAsRead: (messageId: string) => Promise<void>;
  
  // –î–µ–π—Å—Ç–≤–∏—è —Å –∫–æ–Ω–≤–µ—Ä—Å–∞—Ü–∏—è–º–∏
  createConversation: (participants: string[], options?: CreateConversationOptions) => Promise<Conversation>;
  loadConversations: () => Promise<void>;
  switchConversation: (conversationId: string) => Promise<void>;
  archiveConversation: (conversationId: string) => Promise<void>;
  
  // –ü–æ–∏—Å–∫ –∏ –∑–∞–≥—Ä—É–∑–∫–∞
  searchMessages: (query: string) => Promise<Message[]>;
  loadMoreMessages: () => Promise<void>;
  
  // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏
  setTyping: (isTyping: boolean) => void;
  
  // –£—Ç–∏–ª–∏—Ç—ã
  getUnreadCount: (conversationId: string) => number;
  isMessageFromCurrentUser: (message: Message) => boolean;
  formatMessageTime: (timestamp: string) => string;
  cleanup: () => void;
}

export interface SendMessageOptions {
  messageType?: Message['messageType'];
  attachments?: string[];
  replyTo?: string;
  isUrgent?: boolean;
  mentions?: string[];
}

export interface CreateConversationOptions {
  projectId?: string;
  contractId?: string;
  title?: string;
  conversationType?: Conversation['conversationType'];
}

export function useMessaging(options: UseMessagingOptions): UseMessagingReturn {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ
  const [messages, setMessages] = useState<Message[]>([]);
  const [conversations, setConversations] = useState<Conversation[]>([]);
  const [currentConversation, setCurrentConversation] = useState<Conversation | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [isLoadingMessages, setIsLoadingMessages] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [typingUsers, setTypingUsers] = useState<TypingIndicator[]>([]);
  const [hasMoreMessages, setHasMoreMessages] = useState(true);
  
  // Refs
  const unsubscribeRef = useRef<(() => void) | null>(null);
  const typingTimeoutRef = useRef<NodeJS.Timeout | null>(null);
  const messagesOffsetRef = useRef(0);

  // üì± –ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
  const loadMessages = useCallback(async (conversationId: string, offset = 0) => {
    if (!conversationId) return;
    
    try {
      setIsLoadingMessages(offset === 0);
      const newMessages = await messagingService.getMessages(conversationId, 50, offset);
      
      if (offset === 0) {
        setMessages(newMessages);
      } else {
        setMessages(prev => [...newMessages, ...prev]);
      }
      
      setHasMoreMessages(newMessages.length === 50);
      messagesOffsetRef.current = offset + newMessages.length;
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
      if (options.autoMarkAsRead !== false) {
        const unreadMessages = newMessages.filter(m => 
          !m.isRead && m.receiverId === options.userId
        );
        
        for (const message of unreadMessages) {
          await messagingService.markMessageAsRead(message.$id, options.userId);
        }
      }
    } catch (err) {
      setError(err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π');
    } finally {
      setIsLoadingMessages(false);
    }
  }, [options.userId, options.autoMarkAsRead]);

  // üìã –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω–≤–µ—Ä—Å–∞—Ü–∏–π
  const loadConversations = useCallback(async () => {
    try {
      setIsLoading(true);
      const userConversations = await messagingService.getUserConversations(options.userId);
      setConversations(userConversations);
    } catch (err) {
      setError(err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω–≤–µ—Ä—Å–∞—Ü–∏–π');
    } finally {
      setIsLoading(false);
    }
  }, [options.userId]);

  // üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Å–∞—Ü–∏–∏
  const switchConversation = useCallback(async (conversationId: string) => {
    try {
      // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–π –∫–æ–Ω–≤–µ—Ä—Å–∞—Ü–∏–∏
      if (unsubscribeRef.current) {
        unsubscribeRef.current();
      }

      // –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω–≤–µ—Ä—Å–∞—Ü–∏—é
      const conversation = conversations.find(c => c.$id === conversationId);
      if (!conversation) {
        throw new Error('–ö–æ–Ω–≤–µ—Ä—Å–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      }

      setCurrentConversation(conversation);
      messagesOffsetRef.current = 0;
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
      await loadMessages(conversationId, 0);

      // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      const unsubscribe = messagingService.subscribeToConversation(conversationId, {
        onMessage: (message) => {
          setMessages(prev => [...prev, message]);
          
          // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
          if (options.autoMarkAsRead !== false && message.receiverId === options.userId) {
            messagingService.markMessageAsRead(message.$id, options.userId);
          }
        },
        onMessageUpdate: (message) => {
          setMessages(prev => prev.map(m => m.$id === message.$id ? message : m));
        },
        onMessageDelete: (messageId) => {
          setMessages(prev => prev.filter(m => m.$id !== messageId));
        },
        onTyping: (typing) => {
          setTypingUsers(prev => {
            const filtered = prev.filter(t => t.userId !== typing.userId);
            return typing.isTyping ? [...filtered, typing] : filtered;
          });
        }
      });

      unsubscribeRef.current = unsubscribe;
    } catch (err) {
      setError(err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –∫–æ–Ω–≤–µ—Ä—Å–∞—Ü–∏–∏');
    }
  }, [conversations, loadMessages, options.userId, options.autoMarkAsRead]);

  // üí¨ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
  const sendMessage = useCallback(async (content: string, sendOptions?: SendMessageOptions) => {
    if (!currentConversation || !content.trim()) return;

    const receiverId = currentConversation.participants.find(p => p !== options.userId);
    if (!receiverId) return;

    try {
      await messagingService.sendMessage({
        conversationId: currentConversation.$id,
        senderId: options.userId,
        receiverId,
        content: content.trim(),
        messageType: sendOptions?.messageType,
        attachments: sendOptions?.attachments,
        replyTo: sendOptions?.replyTo,
        metadata: {
          isUrgent: sendOptions?.isUrgent,
          mentions: sendOptions?.mentions
        }
      });
    } catch (err) {
      setError(err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è');
    }
  }, [currentConversation, options.userId]);

  // üìã –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞
  const sendOrderMessage = useCallback(async (orderData: OrderAttachment, message?: string) => {
    if (!currentConversation) return;

    const receiverId = currentConversation.participants.find(p => p !== options.userId);
    if (!receiverId) return;

    try {
      await messagingService.sendOrderMessage({
        conversationId: currentConversation.$id,
        senderId: options.userId,
        receiverId,
        orderData,
        message
      });
    } catch (err) {
      setError(err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–∫–∞–∑–∞');
    }
  }, [currentConversation, options.userId]);

  // ‚è±Ô∏è –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–ª–∞–π–Ω–∞
  const sendTimelineUpdate = useCallback(async (timelineData: TimelineData) => {
    if (!currentConversation) return;

    const receiverId = currentConversation.participants.find(p => p !== options.userId);
    if (!receiverId) return;

    try {
      await messagingService.sendTimelineUpdate({
        conversationId: currentConversation.$id,
        senderId: options.userId,
        receiverId,
        timelineData
      });
    } catch (err) {
      setError(err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–ª–∞–π–Ω–∞');
    }
  }, [currentConversation, options.userId]);

  // üéØ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è milestone
  const sendMilestoneUpdate = useCallback(async (milestoneData: MilestoneData) => {
    if (!currentConversation) return;

    const receiverId = currentConversation.participants.find(p => p !== options.userId);
    if (!receiverId) return;

    try {
      await messagingService.sendMilestoneUpdate({
        conversationId: currentConversation.$id,
        senderId: options.userId,
        receiverId,
        milestoneData
      });
    } catch (err) {
      setError(err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è milestone');
    }
  }, [currentConversation, options.userId]);

  // üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  const editMessage = useCallback(async (messageId: string, newContent: string) => {
    try {
      await messagingService.editMessage(messageId, newContent);
    } catch (err) {
      setError(err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è');
    }
  }, []);

  // üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  const deleteMessage = useCallback(async (messageId: string) => {
    try {
      await messagingService.deleteMessage(messageId);
    } catch (err) {
      setError(err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è');
    }
  }, []);

  // üîÑ –ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
  const forwardMessage = useCallback(async (messageId: string, toConversationId: string, receiverId: string) => {
    try {
      await messagingService.forwardMessage(messageId, toConversationId, options.userId, receiverId);
    } catch (err) {
      setError(err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è');
    }
  }, [options.userId]);

  // üòÄ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∞–∫—Ü–∏–∏
  const addReaction = useCallback(async (messageId: string, emoji: string) => {
    try {
      await messagingService.addReaction(messageId, options.userId, emoji);
    } catch (err) {
      setError(err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∞–∫—Ü–∏–∏');
    }
  }, [options.userId]);

  // ‚úÖ –û—Ç–º–µ—Ç–∫–∞ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
  const markAsRead = useCallback(async (messageId: string) => {
    try {
      await messagingService.markMessageAsRead(messageId, options.userId);
    } catch (err) {
      setError(err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è');
    }
  }, [options.userId]);

  // üí¨ –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Å–∞—Ü–∏–∏
  const createConversation = useCallback(async (participants: string[], createOptions?: CreateConversationOptions) => {
    try {
      const conversation = await messagingService.createConversation({
        participants: [options.userId, ...participants],
        ...createOptions
      });
      
      setConversations(prev => [conversation, ...prev]);
      return conversation;
    } catch (err) {
      setError(err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω–≤–µ—Ä—Å–∞—Ü–∏–∏');
      throw err;
    }
  }, [options.userId]);

  // üîç –ü–æ–∏—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
  const searchMessages = useCallback(async (query: string) => {
    try {
      return await messagingService.searchMessages(query, currentConversation?.$id);
    } catch (err) {
      setError(err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π');
      return [];
    }
  }, [currentConversation]);

  // üìÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  const loadMoreMessages = useCallback(async () => {
    if (!currentConversation || !hasMoreMessages || isLoadingMessages) return;
    
    await loadMessages(currentConversation.$id, messagesOffsetRef.current);
  }, [currentConversation, hasMoreMessages, isLoadingMessages, loadMessages]);

  // ‚å®Ô∏è –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏
  const setTyping = useCallback((isTyping: boolean) => {
    if (!currentConversation || !options.enableTypingIndicator) return;

    messagingService.sendTypingIndicator(currentConversation.$id, options.userId, isTyping);

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–±–∏—Ä–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
    if (isTyping) {
      if (typingTimeoutRef.current) {
        clearTimeout(typingTimeoutRef.current);
      }
      
      typingTimeoutRef.current = setTimeout(() => {
        messagingService.sendTypingIndicator(currentConversation.$id, options.userId, false);
      }, 3000);
    }
  }, [currentConversation, options.userId, options.enableTypingIndicator]);

  // üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö
  const getUnreadCount = useCallback((conversationId: string) => {
    const conversation = conversations.find(c => c.$id === conversationId);
    return conversation?.unreadCount[options.userId] || 0;
  }, [conversations, options.userId]);

  // üë§ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
  const isMessageFromCurrentUser = useCallback((message: Message) => {
    return message.senderId === options.userId;
  }, [options.userId]);

  // ‚è∞ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
  const formatMessageTime = useCallback((timestamp: string) => {
    const date = new Date(timestamp);
    const now = new Date();
    const diffInHours = (now.getTime() - date.getTime()) / (1000 * 60 * 60);

    if (diffInHours < 24) {
      return date.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
    } else if (diffInHours < 24 * 7) {
      return date.toLocaleDateString('ru-RU', { weekday: 'short', hour: '2-digit', minute: '2-digit' });
    } else {
      return date.toLocaleDateString('ru-RU', { day: '2-digit', month: '2-digit', hour: '2-digit', minute: '2-digit' });
    }
  }, []);

  // üßπ –û—á–∏—Å—Ç–∫–∞
  const cleanup = useCallback(() => {
    if (unsubscribeRef.current) {
      unsubscribeRef.current();
    }
    if (typingTimeoutRef.current) {
      clearTimeout(typingTimeoutRef.current);
    }
    messagingService.cleanup();
  }, []);

  // üîÑ –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Å–∞—Ü–∏–∏
  const archiveConversation = useCallback(async (conversationId: string) => {
    // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è
    console.log('Archive conversation:', conversationId);
  }, []);

  // –≠—Ñ—Ñ–µ–∫—Ç—ã
  useEffect(() => {
    loadConversations();
  }, [loadConversations]);

  useEffect(() => {
    if (options.conversationId && conversations.length > 0) {
      switchConversation(options.conversationId);
    }
  }, [options.conversationId, conversations, switchConversation]);

  useEffect(() => {
    return cleanup;
  }, [cleanup]);

  return {
    // –°–æ—Å—Ç–æ—è–Ω–∏–µ
    messages,
    conversations,
    currentConversation,
    isLoading,
    isLoadingMessages,
    error,
    typingUsers,
    
    // –î–µ–π—Å—Ç–≤–∏—è —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    sendMessage,
    sendOrderMessage,
    sendTimelineUpdate,
    sendMilestoneUpdate,
    editMessage,
    deleteMessage,
    forwardMessage,
    addReaction,
    markAsRead,
    
    // –î–µ–π—Å—Ç–≤–∏—è —Å –∫–æ–Ω–≤–µ—Ä—Å–∞—Ü–∏—è–º–∏
    createConversation,
    loadConversations,
    switchConversation,
    archiveConversation,
    
    // –ü–æ–∏—Å–∫ –∏ –∑–∞–≥—Ä—É–∑–∫–∞
    searchMessages,
    loadMoreMessages,
    
    // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏
    setTyping,
    
    // –£—Ç–∏–ª–∏—Ç—ã
    getUnreadCount,
    isMessageFromCurrentUser,
    formatMessageTime,
    cleanup
  };
}
