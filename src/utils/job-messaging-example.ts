// üîê –ü—Ä–∏–º–µ—Ä –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Å–æ–æ–±—â–µ–Ω–∏–π —Å –¥–∂–æ–±–∞–º–∏
// –≠—Ç–æ—Ç —Ñ–∞–π–ª –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–∞–∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≤–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ

import { MessagingHelpers } from '../lib/messaging-integration';
import { messagingService } from '../services/messaging';

/**
 * üîê –ü—Ä–∏–º–µ—Ä 1: –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–∂–æ–±–∞
 */
export async function onJobPublished(jobData: {
  $id: string;
  title: string;
  clientId: string;
  budget: { min: number; max: number; currency: string };
}) {
  try {
    console.log('üíº Creating secure channel for job:', jobData.title);
    
    // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª –¥–ª—è –¥–∂–æ–±–∞
    const jobChannel = await MessagingHelpers.createJobChannel({
      $id: jobData.$id,
      title: jobData.title,
      clientId: jobData.clientId,
      status: 'open',
      budget: jobData.budget,
      freelancerId: undefined // –ë—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞—è–≤–∫–∏
    });
    
    console.log('‚úÖ Job channel created:', jobChannel.$id);
    return jobChannel;
    
  } catch (error) {
    console.error('‚ùå Failed to create job channel:', error);
    throw error;
  }
}

/**
 * ü§ù –ü—Ä–∏–º–µ—Ä 2: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞—è–≤–∫–∏  
 */
export async function onJobApplicationAccepted(jobId: string, freelancerId: string) {
  try {
    console.log('‚úÖ Adding freelancer to job channel...');
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–∞ –≤ –∫–∞–Ω–∞–ª –¥–∂–æ–±–∞
    await MessagingHelpers.addFreelancerToJob(jobId, freelancerId);
    
    console.log('‚úÖ Freelancer added to job channel');
    
  } catch (error) {
    console.error('‚ùå Failed to add freelancer to job channel:', error);
    throw error;
  }
}

/**
 * üèóÔ∏è –ü—Ä–∏–º–µ—Ä 3: –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∞–Ω–∏–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
 */
export async function onContractSigned(contractData: {
  $id: string;
  jobId: string;
  contractId: string;
  title: string;
  clientId: string;
  freelancerId: string;
}) {
  try {
    console.log('üìã Creating project channel for contract...');
    
    const projectChannel = await MessagingHelpers.createProjectChannel({
      $id: contractData.$id,
      jobId: contractData.jobId,
      contractId: contractData.contractId,
      title: contractData.title,
      clientId: contractData.clientId,
      freelancerId: contractData.freelancerId,
      status: 'active'
    });
    
    console.log('‚úÖ Project channel created:', projectChannel.$id);
    return projectChannel;
    
  } catch (error) {
    console.error('‚ùå Failed to create project channel:', error);
    throw error;
  }
}

/**
 * üí¨ –ü—Ä–∏–º–µ—Ä 4: –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
 */
export async function sendSecureMessage(data: {
  conversationId: string;
  senderId: string;
  receiverId: string;
  content: string;
  messageType?: 'text' | 'file' | 'system';
}) {
  try {
    console.log('üîí Sending secure message...');
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    const message = await messagingService.sendMessage({
      conversationId: data.conversationId,
      senderId: data.senderId,
      receiverId: data.receiverId,
      content: data.content,
      messageType: data.messageType || 'text'
    });
    
    console.log('‚úÖ Secure message sent:', message.$id);
    return message;
    
  } catch (error) {
    console.error('üö´ Message blocked by security check:', error);
    throw error;
  }
}

/**
 * üîç –ü—Ä–∏–º–µ—Ä 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É
 */
export async function checkChannelAccess(jobId: string, userId: string): Promise<boolean> {
  try {
    // –ù–∞—Ö–æ–¥–∏–º –∫–∞–Ω–∞–ª –¥–∂–æ–±–∞
    const jobChannel = await messagingService.findJobChannel(jobId);
    
    if (!jobChannel) {
      console.log('‚ùå Job channel not found');
      return false;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—á–∞—Å—Ç–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const hasAccess = jobChannel.participants.includes(userId);
    
    console.log(hasAccess ? '‚úÖ Access granted' : 'üö´ Access denied');
    return hasAccess;
    
  } catch (error) {
    console.error('‚ùå Error checking channel access:', error);
    return false;
  }
}

/**
 * üìä –ü—Ä–∏–º–µ—Ä 6: –ü–æ–ª—É—á–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
 */
export async function getSecureMessageHistory(conversationId: string, userId: string) {
  try {
    console.log('üîí Loading secure message history...');
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–æ—Å—Ç—É–ø–∞
    const messages = await messagingService.getMessages(conversationId, userId, 50, 0);
    
    console.log(`‚úÖ Loaded ${messages.length} secure messages`);
    return messages;
    
  } catch (error) {
    console.error('üö´ Access to messages denied:', error);
    return [];
  }
}

/**
 * üß™ –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã
 */
export async function testSecureMessagingSystem() {
  console.log('üß™ Testing secure messaging system...');
  
  try {
    // 1. –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –¥–∂–æ–±–∞
    const testJobData = {
      $id: 'test-job-123',
      title: '–¢–µ—Å—Ç–æ–≤—ã–π –¥–∂–æ–±',
      clientId: 'test-client-456',
      budget: { min: 1000, max: 5000, currency: 'USD' }
    };
    
    const jobChannel = await onJobPublished(testJobData);
    console.log('‚úÖ Test 1 passed: Job channel created');
    
    // 2. –¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–∞
    await onJobApplicationAccepted(testJobData.$id, 'test-freelancer-789');
    console.log('‚úÖ Test 2 passed: Freelancer added');
    
    // 3. –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞
    const hasAccess = await checkChannelAccess(testJobData.$id, testJobData.clientId);
    console.log('‚úÖ Test 3 passed: Access check works');
    
    // 4. –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    await sendSecureMessage({
      conversationId: jobChannel.$id,
      senderId: testJobData.clientId,
      receiverId: 'test-freelancer-789',
      content: '–ü—Ä–∏–≤–µ—Ç! –û–±—Å—É–¥–∏–º –ø—Ä–æ–µ–∫—Ç?'
    });
    console.log('‚úÖ Test 4 passed: Secure message sent');
    
    // 5. –¢–µ—Å—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏
    const messages = await getSecureMessageHistory(jobChannel.$id, testJobData.clientId);
    console.log('‚úÖ Test 5 passed: Message history loaded');
    
    console.log('üéâ ALL TESTS PASSED! Secure messaging system is working!');
    
  } catch (error) {
    console.error('‚ùå TEST FAILED:', error);
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏
export default {
  onJobPublished,
  onJobApplicationAccepted,
  onContractSigned,
  sendSecureMessage,
  checkChannelAccess,
  getSecureMessageHistory,
  testSecureMessagingSystem
};
