// –ì–ª–∞–≤–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞
'use client';

import React, { useState, useEffect } from 'react';
import { ConversationList } from './ConversationList';
import { ChatWindow } from './ChatWindow';
import { useMessaging } from '../../hooks/useMessaging';

interface MessagingAppProps {
  userId: string;
  initialConversationId?: string;
  className?: string;
}

export function MessagingApp({ 
  userId, 
  initialConversationId,
  className = '' 
}: MessagingAppProps) {
  const [selectedConversationId, setSelectedConversationId] = useState<string | undefined>(
    initialConversationId
  );
  const [showNewChatModal, setShowNewChatModal] = useState(false);
  const [isMobile, setIsMobile] = useState(false);
  const [showSidebar, setShowSidebar] = useState(true);

  const {
    conversations,
    isLoading,
    error,
    createConversation,
    loadConversations
  } = useMessaging({
    conversationId: selectedConversationId,
    userId
  });

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–æ–±–∏–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
  useEffect(() => {
    const checkMobile = () => {
      setIsMobile(window.innerWidth < 768);
      setShowSidebar(window.innerWidth >= 768);
    };
    
    checkMobile();
    window.addEventListener('resize', checkMobile);
    return () => window.removeEventListener('resize', checkMobile);
  }, []);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–≤–µ—Ä—Å–∞—Ü–∏–∏
  const handleSelectConversation = (conversationId: string) => {
    setSelectedConversationId(conversationId);
    
    // –ù–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —Å–∫—Ä—ã–≤–∞–µ–º —Å–∞–π–¥–±–∞—Ä –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —á–∞—Ç–∞
    if (isMobile) {
      setShowSidebar(false);
    }
  };

  // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–Ω–≤–µ—Ä—Å–∞—Ü–∏–∏
  const handleCreateConversation = async (participants: string[], options?: any) => {
    try {
      const conversation = await createConversation(participants, options);
      setSelectedConversationId(conversation.$id);
      setShowNewChatModal(false);
      
      if (isMobile) {
        setShowSidebar(false);
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω–≤–µ—Ä—Å–∞—Ü–∏–∏:', error);
    }
  };

  // –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É —á–∞—Ç–æ–≤ (–º–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)
  const handleBackToList = () => {
    setShowSidebar(true);
    setSelectedConversationId(undefined);
  };

  if (error) {
    return (
      <div className={`flex items-center justify-center h-full bg-red-50 ${className}`}>
        <div className="text-center text-red-600">
          <div className="text-4xl mb-4">‚ö†Ô∏è</div>
          <h3 className="text-lg font-medium mb-2">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h3>
          <p className="mb-4">{error}</p>
          <button
            onClick={loadConversations}
            className="px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600 transition-colors"
          >
            –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
          </button>
        </div>
      </div>
    );
  }

  return (
    <div className={`flex h-full bg-gray-100 ${className}`}>
      {/* –°–∞–π–¥–±–∞—Ä —Å –∫–æ–Ω–≤–µ—Ä—Å–∞—Ü–∏—è–º–∏ */}
      <div className={`
        ${isMobile ? 'absolute inset-0 z-10' : 'relative'}
        ${showSidebar ? 'block' : 'hidden'}
        ${isMobile ? 'w-full' : 'w-80'}
        flex-shrink-0
      `}>
        <ConversationList
          conversations={conversations}
          currentConversationId={selectedConversationId}
          onSelectConversation={handleSelectConversation}
          onCreateConversation={() => setShowNewChatModal(true)}
          userId={userId}
          isLoading={isLoading}
          className="h-full"
        />
      </div>

      {/* –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å —á–∞—Ç–∞ */}
      <div className={`
        flex-1 flex flex-col
        ${isMobile && showSidebar ? 'hidden' : 'block'}
      `}>
        {selectedConversationId ? (
          <>
            {/* –ú–æ–±–∏–ª—å–Ω–∞—è —à–∞–ø–∫–∞ */}
            {isMobile && (
              <div className="flex items-center gap-3 p-4 bg-white border-b border-gray-200">
                <button
                  onClick={handleBackToList}
                  className="p-2 text-gray-400 hover:text-gray-600 transition-colors"
                >
                  ‚Üê
                </button>
                <h2 className="font-semibold text-gray-900">–ß–∞—Ç</h2>
              </div>
            )}
            
            {/* –û–∫–Ω–æ —á–∞—Ç–∞ */}
            <ChatWindow
              conversationId={selectedConversationId}
              userId={userId}
              className="flex-1"
            />
          </>
        ) : (
          /* –ó–∞–≥–ª—É—à–∫–∞ –∫–æ–≥–¥–∞ —á–∞—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω */
          <div className="flex-1 flex items-center justify-center bg-gray-50">
            <div className="text-center text-gray-500 max-w-md mx-4">
              <div className="text-6xl mb-6">üí¨</div>
              <h3 className="text-xl font-medium mb-3">–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä!</h3>
              <p className="text-gray-400 mb-6">
                –í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ —Å–ª–µ–≤–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –∫–æ–Ω–≤–µ—Ä—Å–∞—Ü–∏—é –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—â–µ–Ω–∏—è.
              </p>
              <button
                onClick={() => setShowNewChatModal(true)}
                className="px-6 py-3 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors"
              >
                –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —á–∞—Ç
              </button>
            </div>
          </div>
        )}
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞ */}
      {showNewChatModal && (
        <NewChatModal
          onCreateConversation={handleCreateConversation}
          onClose={() => setShowNewChatModal(false)}
          userId={userId}
        />
      )}
    </div>
  );
}

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞
interface NewChatModalProps {
  onCreateConversation: (participants: string[], options?: any) => void;
  onClose: () => void;
  userId: string;
}

function NewChatModal({ onCreateConversation, onClose, userId }: NewChatModalProps) {
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedUsers, setSelectedUsers] = useState<string[]>([]);
  const [chatTitle, setChatTitle] = useState('');
  const [chatType, setChatType] = useState<'direct' | 'group' | 'project'>('direct');

  // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  const [users] = useState([
    { id: 'user1', name: '–ê–Ω–Ω–∞ –ò–≤–∞–Ω–æ–≤–∞', avatar: 'üë©', online: true },
    { id: 'user2', name: '–ü–µ—Ç—Ä –°–∏–¥–æ—Ä–æ–≤', avatar: 'üë®', online: false },
    { id: 'user3', name: '–ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–∞', avatar: 'üë©', online: true },
    { id: 'user4', name: '–ê–ª–µ–∫—Å–µ–π –ö–æ–∑–ª–æ–≤', avatar: 'üë®', online: true },
  ]);

  const filteredUsers = users.filter(user => 
    user.id !== userId && 
    user.name.toLowerCase().includes(searchQuery.toLowerCase())
  );

  const handleUserToggle = (userId: string) => {
    setSelectedUsers(prev => 
      prev.includes(userId) 
        ? prev.filter(id => id !== userId)
        : [...prev, userId]
    );
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    if (selectedUsers.length === 0) return;

    const options = {
      title: chatTitle || undefined,
      conversationType: chatType
    };

    onCreateConversation(selectedUsers, options);
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-white rounded-lg w-full max-w-md">
        <div className="flex items-center justify-between p-6 border-b border-gray-200">
          <h3 className="text-lg font-semibold">–ù–æ–≤—ã–π —á–∞—Ç</h3>
          <button
            onClick={onClose}
            className="text-gray-400 hover:text-gray-600 transition-colors"
          >
            ‚úï
          </button>
        </div>

        <form onSubmit={handleSubmit} className="p-6 space-y-4">
          {/* –¢–∏–ø —á–∞—Ç–∞ */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              –¢–∏–ø —á–∞—Ç–∞
            </label>
            <div className="flex gap-2">
              {[
                { value: 'direct', label: '–õ–∏—á–Ω—ã–π', icon: 'üë§' },
                { value: 'group', label: '–ì—Ä—É–ø–ø–∞', icon: 'üë•' },
                { value: 'project', label: '–ü—Ä–æ–µ–∫—Ç', icon: 'üìã' }
              ].map(({ value, label, icon }) => (
                <button
                  key={value}
                  type="button"
                  onClick={() => setChatType(value as any)}
                  className={`flex items-center gap-2 px-3 py-2 rounded-lg border transition-colors ${
                    chatType === value
                      ? 'border-blue-500 bg-blue-50 text-blue-700'
                      : 'border-gray-300 hover:bg-gray-50'
                  }`}
                >
                  <span>{icon}</span>
                  <span className="text-sm">{label}</span>
                </button>
              ))}
            </div>
          </div>

          {/* –ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞ (–¥–ª—è –≥—Ä—É–ø–ø) */}
          {chatType !== 'direct' && (
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                –ù–∞–∑–≤–∞–Ω–∏–µ —á–∞—Ç–∞
              </label>
              <input
                type="text"
                value={chatTitle}
                onChange={(e) => setChatTitle(e.target.value)}
                placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ..."
                className="w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
            </div>
          )}

          {/* –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π */}
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">
              –£—á–∞—Å—Ç–Ω–∏–∫–∏
            </label>
            <input
              type="text"
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              placeholder="–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π..."
              className="w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            />
          </div>

          {/* –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π */}
          <div className="max-h-48 overflow-y-auto border border-gray-200 rounded-md">
            {filteredUsers.length === 0 ? (
              <div className="p-4 text-center text-gray-500">
                –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã
              </div>
            ) : (
              filteredUsers.map(user => (
                <label
                  key={user.id}
                  className="flex items-center gap-3 p-3 hover:bg-gray-50 cursor-pointer"
                >
                  <input
                    type="checkbox"
                    checked={selectedUsers.includes(user.id)}
                    onChange={() => handleUserToggle(user.id)}
                    className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                  />
                  <div className="flex items-center gap-2 flex-1">
                    <div className="relative">
                      <span className="text-2xl">{user.avatar}</span>
                      {user.online && (
                        <div className="absolute -bottom-1 -right-1 w-3 h-3 bg-green-500 border border-white rounded-full"></div>
                      )}
                    </div>
                    <div>
                      <div className="font-medium text-gray-900">{user.name}</div>
                      <div className="text-sm text-gray-500">
                        {user.online ? '–æ–Ω–ª–∞–π–Ω' : '–Ω–µ –≤ —Å–µ—Ç–∏'}
                      </div>
                    </div>
                  </div>
                </label>
              ))
            )}
          </div>

          {/* –í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ */}
          {selectedUsers.length > 0 && (
            <div>
              <div className="text-sm font-medium text-gray-700 mb-2">
                –í—ã–±—Ä–∞–Ω–æ: {selectedUsers.length}
              </div>
              <div className="flex flex-wrap gap-2">
                {selectedUsers.map(userId => {
                  const user = users.find(u => u.id === userId);
                  return user ? (
                    <div
                      key={userId}
                      className="flex items-center gap-1 bg-blue-100 text-blue-700 px-2 py-1 rounded-full text-sm"
                    >
                      <span>{user.avatar}</span>
                      <span>{user.name}</span>
                      <button
                        type="button"
                        onClick={() => handleUserToggle(userId)}
                        className="ml-1 text-blue-500 hover:text-blue-700"
                      >
                        ‚úï
                      </button>
                    </div>
                  ) : null;
                })}
              </div>
            </div>
          )}

          {/* –ö–Ω–æ–ø–∫–∏ */}
          <div className="flex gap-3 pt-4">
            <button
              type="submit"
              disabled={selectedUsers.length === 0}
              className="flex-1 bg-blue-500 text-white py-2 px-4 rounded-md hover:bg-blue-600 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
            >
              –°–æ–∑–¥–∞—Ç—å —á–∞—Ç
            </button>
            <button
              type="button"
              onClick={onClose}
              className="px-4 py-2 border border-gray-300 text-gray-700 rounded-md hover:bg-gray-50 transition-colors"
            >
              –û—Ç–º–µ–Ω–∞
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}
