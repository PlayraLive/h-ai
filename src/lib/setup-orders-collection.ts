import { databases, Permission, Role, DATABASE_ID, COLLECTIONS } from './appwrite/database';

export class OrdersCollectionSetup {
  private readonly DATABASE_ID = DATABASE_ID;
  private readonly ORDERS_COLLECTION = COLLECTIONS.ORDERS;

  // –°–æ–∑–¥–∞—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏—é –∑–∞–∫–∞–∑–æ–≤ —Å –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏
  async createOrdersCollection() {
    try {
      console.log('üì¶ Creating orders collection...');

      // –°–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é
      const collection = await databases.createCollection(
        this.DATABASE_ID,
        this.ORDERS_COLLECTION,
        'Orders',
        [
          Permission.read(Role.any()),
          Permission.create(Role.users()),
          Permission.update(Role.users()),
          Permission.delete(Role.users())
        ]
      );

      console.log('‚úÖ Orders collection created, adding attributes...');

      // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ —á—Ç–æ–±—ã –∫–æ–ª–ª–µ–∫—Ü–∏—è –±—ã–ª–∞ –≥–æ—Ç–æ–≤–∞
      await new Promise(resolve => setTimeout(resolve, 1000));

      // –°–æ–∑–¥–∞–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã –ø–æ –æ–¥–Ω–æ–º—É —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏
      const attributes = [
        { key: 'userId', type: 'string', size: 50, required: true },
        { key: 'client_id', type: 'string', size: 50, required: false },
        { key: 'specialist_id', type: 'string', size: 50, required: false },
        { key: 'specialistId', type: 'string', size: 50, required: true },
        { key: 'specialistName', type: 'string', size: 100, required: true },
        { key: 'specialistTitle', type: 'string', size: 150, required: true },
        { key: 'tariffId', type: 'string', size: 50, required: true },
        { key: 'tariffName', type: 'string', size: 100, required: true },
        { key: 'amount', type: 'float', required: true },
        { key: 'conversationId', type: 'string', size: 100, required: false },
        { key: 'requirements', type: 'string', size: 2000, required: false },
        { key: 'timeline', type: 'string', size: 100, required: false },
        { key: 'status', type: 'enum', elements: ['pending', 'active', 'completed', 'cancelled'], required: true, default: 'pending' },
        { key: 'createdAt', type: 'datetime', required: true },
        { key: 'updatedAt', type: 'datetime', required: true }
      ];

      for (const attr of attributes) {
        try {
          console.log(`  Adding attribute: ${attr.key}`);

          if (attr.type === 'string') {
            await databases.createStringAttribute(
              this.DATABASE_ID,
              this.ORDERS_COLLECTION,
              attr.key,
              attr.size!,
              attr.required,
              attr.default
            );
          } else if (attr.type === 'float') {
            await databases.createFloatAttribute(
              this.DATABASE_ID,
              this.ORDERS_COLLECTION,
              attr.key,
              attr.required,
              attr.min,
              attr.max,
              attr.default
            );
          } else if (attr.type === 'datetime') {
            await databases.createDatetimeAttribute(
              this.DATABASE_ID,
              this.ORDERS_COLLECTION,
              attr.key,
              attr.required,
              attr.default
            );
          } else if (attr.type === 'boolean') {
            await databases.createBooleanAttribute(
              this.DATABASE_ID,
              this.ORDERS_COLLECTION,
              attr.key,
              attr.required,
              attr.default
            );
          } else if (attr.type === 'enum') {
            await databases.createEnumAttribute(
              this.DATABASE_ID,
              this.ORDERS_COLLECTION,
              attr.key,
              attr.elements!,
              attr.required,
              attr.default
            );
          }

          // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏
          await new Promise(resolve => setTimeout(resolve, 500));
        } catch (attrError: any) {
          console.warn(`‚ö†Ô∏è Could not create attribute ${attr.key}:`, attrError.message);
        }
      }

      console.log('‚úÖ Orders collection setup completed');
      return collection;
    } catch (error: any) {
      if (error.code === 409) {
        console.log('‚ö†Ô∏è Orders collection already exists');
        return null;
      }

      throw error;
    }
  }

  // –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –∞—Ç—Ä–∏–±—É—Ç status –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏
  async addStatusAttribute() {
    try {
      console.log('üì¶ Adding status attribute to orders collection...');

      await databases.createEnumAttribute(
        this.DATABASE_ID,
        this.ORDERS_COLLECTION,
        'status',
        ['pending', 'active', 'completed', 'cancelled'],
        true, // required
        'pending' // default value
      );

      console.log('‚úÖ Status attribute added successfully');
      return true;
    } catch (error: any) {
      if (error.code === 409) {
        console.log('‚ö†Ô∏è Status attribute already exists');
        return true;
      }
      
      console.error('‚ùå Failed to add status attribute:', error.message);
      throw error;
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∞—Ç—Ä–∏–±—É—Ç—ã
  async ensureAllAttributes() {
    try {
      console.log('üîç Adding status attribute to orders collection...');

      // –ü—Ä–æ—Å—Ç–æ –ø—ã—Ç–∞–µ–º—Å—è –¥–æ–±–∞–≤–∏—Ç—å –∞—Ç—Ä–∏–±—É—Ç status
      await databases.createEnumAttribute(
        this.DATABASE_ID,
        this.ORDERS_COLLECTION,
        'status',
        ['pending', 'active', 'completed', 'cancelled'],
        true, // required
        'pending' // default value
      );

      console.log('‚úÖ Status attribute added successfully');
      return true;
    } catch (error: any) {
      if (error.code === 409) {
        console.log('‚ö†Ô∏è Status attribute already exists - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ!');
        return true;
      }
      
      console.error('‚ùå Failed to add status attribute:', error.message);
      return false; // –ù–µ –±—Ä–æ—Å–∞–µ–º –æ—à–∏–±–∫—É, –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º false
    }
  }
}