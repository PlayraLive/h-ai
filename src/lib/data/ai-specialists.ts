import { AISpecialist } from '@/types';
import { databases, DATABASE_ID, COLLECTIONS, Query } from '../appwrite/database';

// Fallback mock data for when database is not available
const mockSpecialists: AISpecialist[] = [
  {
    id: 'alex-ai',
    name: 'Alex AI',
    title: 'AI Avatar Creator',
    description: '–°–æ–∑–¥–∞—é –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ AI –∞–≤–∞—Ç–∞—Ä—ã –¥–ª—è –±–∏–∑–Ω–µ—Å–∞, –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π –∏ –±—Ä–µ–Ω–¥–∏–Ω–≥–∞. –ò—Å–ø–æ–ª—å–∑—É—é –ø–µ—Ä–µ–¥–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã—Ö –∏ —Å—Ç–∏–ª—å–Ω—ã—Ö –∞–≤–∞—Ç–∞—Ä–æ–≤.',
    shortDescription: '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ AI –∞–≤–∞—Ç–∞—Ä—ã –¥–ª—è –±–∏–∑–Ω–µ—Å–∞',
    category: 'Business',
    avatar: 'https://api.dicebear.com/7.x/avataaars/svg?seed=AlexAI',
    videoUrl: '/videos/specialists/alex-ai-intro.mp4',
    voiceIntro: '–ü—Ä–∏–≤–µ—Ç! –Ø Alex AI. –°–æ–∑–¥–∞—é –ø–æ—Ç—Ä—è—Å–∞—é—â–∏–µ AI –∞–≤–∞—Ç–∞—Ä—ã –¥–ª—è –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞. –û—Ç –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã—Ö –ø–æ—Ä—Ç—Ä–µ—Ç–æ–≤ –¥–æ –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π - —è –≤–æ–ø–ª–æ—â—É –≤–∞—à–∏ –∏–¥–µ–∏ –≤ –∂–∏–∑–Ω—å!',
    skills: ['AI Avatar Generation', 'Business Branding', 'Portrait Creation', 'Character Design'],
    aiProviders: ['openai', 'anthropic'],
    monthlyPrice: 30,
    taskPrice: 5,
    currency: 'USD',
    capabilities: [
      '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –∞–≤–∞—Ç–∞—Ä—ã',
      '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø–æ—Ä—Ç—Ä–µ—Ç—ã',
      '–ë—Ä–µ–Ω–¥–∏–Ω–≥ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π',
      '–°—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è',
      '–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã'
    ],
    deliveryTime: '2-4 —á–∞—Å–∞',
    examples: [
      '–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ LinkedIn –∞–≤–∞—Ç–∞—Ä—ã',
      '–ü–µ—Ä—Å–æ–Ω–∞–∂–∏ –¥–ª—è –±—Ä–µ–Ω–¥–∏–Ω–≥–∞',
      '–ê–≤–∞—Ç–∞—Ä—ã –¥–ª—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π'
    ],
    rating: 4.9,
    completedTasks: 847,
    responseTime: '5 –º–∏–Ω—É—Ç',
    isActive: true,
    isPopular: true,
    isFeatured: true
  },
  {
    id: 'luna-design',
    name: 'Luna Design',
    title: 'AI Graphic Designer',
    description: '–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–∏ –ª–æ–≥–æ—Ç–∏–ø–æ–≤, –±—Ä–µ–Ω–¥–∏–Ω–≥–∞ –∏ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ —Å –ø–æ–º–æ—â—å—é AI. –û—Ç –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –¥–æ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞.',
    shortDescription: 'AI –¥–∏–∑–∞–π–Ω –ª–æ–≥–æ—Ç–∏–ø–æ–≤ –∏ –±—Ä–µ–Ω–¥–∏–Ω–≥–∞',
    category: 'Design',
    avatar: 'https://api.dicebear.com/7.x/avataaars/svg?seed=LunaDesign',
    videoUrl: '/videos/specialists/luna-design-intro.mp4',
    voiceIntro: '–ü—Ä–∏–≤–µ—Ç! –Ø Luna Design. –°–æ–∑–¥–∞—é –ø–æ—Ç—Ä—è—Å–∞—é—â–∏–µ –ª–æ–≥–æ—Ç–∏–ø—ã –∏ –±—Ä–µ–Ω–¥–∏–Ω–≥ —Å –ø–æ–º–æ—â—å—é AI. –í–∞—à –±—Ä–µ–Ω–¥ –±—É–¥–µ—Ç –≤—ã–¥–µ–ª—è—Ç—å—Å—è —Å—Ä–µ–¥–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤!',
    skills: ['Logo Design', 'Brand Identity', 'Marketing Materials', 'Print Design'],
    aiProviders: ['openai', 'anthropic'],
    monthlyPrice: 35,
    taskPrice: 8,
    currency: 'USD',
    capabilities: [
      '–õ–æ–≥–æ—Ç–∏–ø—ã –∏ —Ñ–∏—Ä–º–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å',
      '–ë—Ä–µ–Ω–¥–±—É–∫–∏ –∏ –≥–∞–π–¥–ª–∞–π–Ω—ã',
      '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã',
      '–£–ø–∞–∫–æ–≤–∫–∞ –∏ —ç—Ç–∏–∫–µ—Ç–∫–∏',
      '–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –º–µ–¥–∏–∞ –¥–∏–∑–∞–π–Ω'
    ],
    deliveryTime: '1-3 –¥–Ω—è',
    examples: [
      '–õ–æ–≥–æ—Ç–∏–ø—ã –¥–ª—è —Å—Ç–∞—Ä—Ç–∞–ø–æ–≤',
      '–§–∏—Ä–º–µ–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏',
      '–ú–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ –±—É–∫–ª–µ—Ç—ã'
    ],
    rating: 4.8,
    completedTasks: 692,
    responseTime: '10 –º–∏–Ω—É—Ç',
    isActive: true,
    isPopular: true,
    isFeatured: false
  },
  {
    id: 'viktor-reels',
    name: 'Viktor Reels',
    title: 'AI Reels Creator',
    description: '–°–æ–∑–¥–∞—é –≤–∏—Ä—É—Å–Ω—ã–µ –≤–∏–¥–µ–æ –¥–ª—è TikTok, Instagram Reels –∏ YouTube Shorts. AI-–≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–≤–ª–µ–∫–∞–µ—Ç –≤–Ω–∏–º–∞–Ω–∏–µ –∏ –Ω–∞–±–∏—Ä–∞–µ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä—ã.',
    shortDescription: '–í–∏—Ä—É—Å–Ω—ã–µ AI –≤–∏–¥–µ–æ –¥–ª—è —Å–æ—Ü—Å–µ—Ç–µ–π',
    category: 'Content',
    avatar: 'https://api.dicebear.com/7.x/avataaars/svg?seed=ViktorReels',
    videoUrl: '/videos/specialists/viktor-reels-intro.mp4',
    voiceIntro: 'Yo! –Ø Viktor Reels. –°–æ–∑–¥–∞—é –≤–∏—Ä—É—Å–Ω—ã–µ –≤–∏–¥–µ–æ, –∫–æ—Ç–æ—Ä—ã–µ –≤–∑—Ä—ã–≤–∞—é—Ç —Å–æ—Ü—Å–µ—Ç–∏! TikTok, Instagram, YouTube - –≤–∞—à –∫–æ–Ω—Ç–µ–Ω—Ç –±—É–¥–µ—Ç –Ω–∞ —Ç–æ–ø–µ!',
    skills: ['Video Creation', 'Content Strategy', 'Social Media', 'Viral Marketing'],
    aiProviders: ['openai'],
    monthlyPrice: 25,
    taskPrice: 6,
    currency: 'USD',
    capabilities: [
      'TikTok –∏ Instagram Reels',
      'YouTube Shorts',
      '–í–∏—Ä—É—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç',
      '–¢—Ä–µ–Ω–¥—ã –∏ —Ö–µ—à—Ç–µ–≥–∏',
      '–ú–æ–Ω—Ç–∞–∂ –∏ —ç—Ñ—Ñ–µ–∫—Ç—ã'
    ],
    deliveryTime: '1-2 –¥–Ω—è',
    examples: [
      '–í–∏—Ä—É—Å–Ω—ã–µ TikTok –≤–∏–¥–µ–æ',
      'Instagram Reels –∫–∞–º–ø–∞–Ω–∏–∏',
      'YouTube Shorts —Å–µ—Ä–∏–∏'
    ],
    rating: 4.7,
    completedTasks: 1243,
    responseTime: '15 –º–∏–Ω—É—Ç',
    isActive: true,
    isPopular: false,
    isFeatured: true
  },
  {
    id: 'max-bot',
    name: 'Max Bot',
    title: 'AI Telegram Bot Creator',
    description: '–†–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞—é —É–º–Ω—ã—Ö Telegram –±–æ—Ç–æ–≤ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –±–∏–∑–Ω–µ—Å–∞. –û—Ç –ø—Ä–æ—Å—Ç—ã—Ö —á–∞—Ç-–±–æ—Ç–æ–≤ –¥–æ —Å–ª–æ–∂–Ω—ã—Ö —Å–∏—Å—Ç–µ–º —Å AI –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º.',
    shortDescription: '–£–º–Ω—ã–µ Telegram –±–æ—Ç—ã —Å AI',
    category: 'Development',
    avatar: 'https://api.dicebear.com/7.x/avataaars/svg?seed=MaxBot',
    videoUrl: '/videos/specialists/max-bot-intro.mp4',
    voiceIntro: '–ü—Ä–∏–≤–µ—Ç! –Ø Max Bot. –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä—É—é —É–º–Ω—ã—Ö Telegram –±–æ—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —ç–∫–æ–Ω–æ–º—è—Ç –≤–∞—à–µ –≤—Ä–µ–º—è –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä—É—é—Ç —Ä—É—Ç–∏–Ω—É. –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –±–æ—Ç–∞ –¥–ª—è –≤–∞—à–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞!',
    skills: ['Bot Development', 'AI Integration', 'Automation', 'Python'],
    aiProviders: ['openai', 'anthropic', 'grok'],
    monthlyPrice: 40,
    taskPrice: 12,
    currency: 'USD',
    capabilities: [
      '–ß–∞—Ç-–±–æ—Ç—ã —Å AI',
      '–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–≤',
      '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Å–µ—Ä–≤–∏—Å–∞–º–∏',
      '–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã',
      '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø'
    ],
    deliveryTime: '3-7 –¥–Ω–µ–π',
    examples: [
      '–ë–æ—Ç—ã –¥–ª—è –º–∞–≥–∞–∑–∏–Ω–æ–≤',
      '–°–∏—Å—Ç–µ–º—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏',
      '–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –∑–∞–¥–∞—á'
    ],
    rating: 4.9,
    completedTasks: 456,
    responseTime: '30 –º–∏–Ω—É—Ç',
    isActive: true,
    isPopular: false,
    isFeatured: false
  }
];

// Get all AI specialists from database
export const getAISpecialists = async (): Promise<AISpecialist[]> => {
  try {
    console.log('üîç Attempting to fetch AI specialists from database...');
    
    const response = await databases.listDocuments(
      DATABASE_ID,
      COLLECTIONS.AI_SPECIALISTS,
      [Query.orderDesc('$createdAt')]
    );
    
    console.log(`‚úÖ Successfully fetched ${response.documents.length} specialists from database`);
    
    const specialists = response.documents.map(doc => ({
      id: doc.$id,
      name: doc.name,
      title: doc.title,
      description: doc.description,
      shortDescription: doc.shortDescription,
      category: doc.category,
      avatar: doc.avatar,
      videoUrl: doc.videoUrl,
      voiceIntro: doc.voiceIntro,
      skills: doc.skills || [],
      aiProviders: doc.aiProviders || [],
      monthlyPrice: doc.monthlyPrice,
      taskPrice: doc.taskPrice,
      currency: 'USD', // Default since not in database
      capabilities: doc.capabilities || [],
      deliveryTime: doc.deliveryTime,
      examples: doc.examples || [],
      rating: 4.8, // Default since not in database
      completedTasks: Math.floor(Math.random() * 2000) + 500, // Random for demo
      responseTime: doc.responseTime,
      isActive: true, // Default since not in database
      isPopular: Math.random() > 0.5, // Random for demo
      isFeatured: Math.random() > 0.7 // Random for demo
    })) as AISpecialist[];

    // If database is empty, use mock data
    if (specialists.length === 0) {
      console.log('‚ö†Ô∏è Database is empty, using fallback mock data');
      return mockSpecialists;
    }

    return specialists;
  } catch (error) {
    console.error('‚ùå Error fetching AI specialists from database:', error);
    console.log('üîÑ Falling back to mock data for better user experience');
    return mockSpecialists;
  }
};

// Get featured specialists for homepage
export const getFeaturedSpecialists = async (limit: number = 4): Promise<AISpecialist[]> => {
  const specialists = await getAISpecialists();
  return specialists
    .filter(specialist => specialist.isFeatured || specialist.isPopular)
    .sort((a, b) => {
      if (a.isFeatured && !b.isFeatured) return -1;
      if (!a.isFeatured && b.isFeatured) return 1;
      return b.rating - a.rating;
    })
    .slice(0, limit);
};

// Get specialist by ID
export const getSpecialistById = async (id: string): Promise<AISpecialist | undefined> => {
  try {
    console.log(`üîç Attempting to fetch specialist with ID: ${id}`);
    
    const doc = await databases.getDocument(DATABASE_ID, COLLECTIONS.AI_SPECIALISTS, id);
    
    console.log(`‚úÖ Successfully fetched specialist: ${doc.name}`);
    
    return {
      id: doc.$id,
      name: doc.name,
      title: doc.title,
      description: doc.description,
      shortDescription: doc.shortDescription,
      category: doc.category,
      avatar: doc.avatar,
      videoUrl: doc.videoUrl,
      voiceIntro: doc.voiceIntro,
      skills: doc.skills || [],
      aiProviders: doc.aiProviders || [],
      monthlyPrice: doc.monthlyPrice,
      taskPrice: doc.taskPrice,
      currency: 'USD',
      capabilities: doc.capabilities || [],
      deliveryTime: doc.deliveryTime,
      examples: doc.examples || [],
      rating: 4.8,
      completedTasks: Math.floor(Math.random() * 2000) + 500,
      responseTime: doc.responseTime,
      isActive: true,
      isPopular: Math.random() > 0.5,
      isFeatured: Math.random() > 0.7
    } as AISpecialist;
  } catch (error) {
    console.error(`‚ùå Error fetching specialist by ID ${id}:`, error);
    console.log('üîÑ Falling back to mock data');
    return mockSpecialists.find(specialist => specialist.id === id);
  }
};

// Get specialists by category
export const getSpecialistsByCategory = async (category: string): Promise<AISpecialist[]> => {
  try {
    console.log(`üîç Attempting to fetch specialists for category: ${category}`);
    
    const response = await databases.listDocuments(
      DATABASE_ID,
      COLLECTIONS.AI_SPECIALISTS,
      [
        Query.equal('category', category),
        Query.orderDesc('$createdAt')
      ]
    );
    
    console.log(`‚úÖ Successfully fetched ${response.documents.length} specialists for category: ${category}`);
    
    const specialists = response.documents.map(doc => ({
      id: doc.$id,
      name: doc.name,
      title: doc.title,
      description: doc.description,
      shortDescription: doc.shortDescription,
      category: doc.category,
      avatar: doc.avatar,
      videoUrl: doc.videoUrl,
      voiceIntro: doc.voiceIntro,
      skills: doc.skills || [],
      aiProviders: doc.aiProviders || [],
      monthlyPrice: doc.monthlyPrice,
      taskPrice: doc.taskPrice,
      currency: 'USD',
      capabilities: doc.capabilities || [],
      deliveryTime: doc.deliveryTime,
      examples: doc.examples || [],
      rating: 4.8,
      completedTasks: Math.floor(Math.random() * 2000) + 500,
      responseTime: doc.responseTime,
      isActive: true,
      isPopular: Math.random() > 0.5,
      isFeatured: Math.random() > 0.7
    })) as AISpecialist[];

    // If no specialists found in database, filter mock data
    if (specialists.length === 0) {
      console.log(`‚ö†Ô∏è No specialists found in database for category ${category}, using mock data`);
      return mockSpecialists.filter(specialist => specialist.category.toLowerCase() === category.toLowerCase());
    }

    return specialists;
  } catch (error) {
    console.error(`‚ùå Error fetching specialists by category ${category}:`, error);
    console.log('üîÑ Falling back to mock data');
    return mockSpecialists.filter(specialist => specialist.category.toLowerCase() === category.toLowerCase());
  }
}; 