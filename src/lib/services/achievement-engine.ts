import { databases, DATABASE_ID, ID, Query } from '@/lib/appwrite/database';

interface AchievementDefinition {
  id: string;
  name: string;
  description: string;
  icon: string;
  category: string;
  xpReward: number;
  rarity: 'common' | 'uncommon' | 'rare' | 'epic' | 'legendary';
  condition: (userData: any) => boolean;
  progressTracker?: (userData: any) => { current: number; required: number };
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤—Å–µ—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –≤ —Å–∏—Å—Ç–µ–º–µ
const ACHIEVEMENT_DEFINITIONS: AchievementDefinition[] = [
  // Onboarding Achievements
  {
    id: 'welcome_onboard',
    name: 'üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!',
    description: '–ó–∞–≤–µ—Ä—à–∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø—Ä–æ—Ñ–∏–ª—è',
    icon: 'üéâ',
    category: 'onboarding',
    xpReward: 50,
    rarity: 'common',
    condition: (data) => data.onboardingCompleted
  },
  
  // Client Achievements  
  {
    id: 'first_job_post',
    name: 'üìù –ü–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑',
    description: '–°–æ–∑–¥–∞–ª–∏ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑',
    icon: 'üìù',
    category: 'client',
    xpReward: 25,
    rarity: 'common',
    condition: (data) => data.jobsCreated >= 1
  },
  {
    id: 'active_client',
    name: 'üíº –ê–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∏–µ–Ω—Ç',
    description: '–°–æ–∑–¥–∞–ª–∏ 5 –∑–∞–∫–∞–∑–æ–≤',
    icon: 'üíº',
    category: 'client',
    xpReward: 100,
    rarity: 'uncommon',
    condition: (data) => data.jobsCreated >= 5,
    progressTracker: (data) => ({ current: data.jobsCreated || 0, required: 5 })
  },
  {
    id: 'job_master',
    name: 'üèÜ –ú–∞—Å—Ç–µ—Ä –∑–∞–∫–∞–∑–æ–≤',
    description: '–°–æ–∑–¥–∞–ª–∏ 25 –∑–∞–∫–∞–∑–æ–≤',
    icon: 'üèÜ',
    category: 'client',
    xpReward: 250,
    rarity: 'rare',
    condition: (data) => data.jobsCreated >= 25,
    progressTracker: (data) => ({ current: data.jobsCreated || 0, required: 25 })
  },
  
  // Freelancer Achievements
  {
    id: 'first_application',
    name: 'üöÄ –ü–µ—Ä–≤–∞—è –∑–∞—è–≤–∫–∞',
    description: '–ü–æ–¥–∞–ª–∏ –ø–µ—Ä–≤—É—é –∑–∞—è–≤–∫—É –Ω–∞ —Ä–∞–±–æ—Ç—É',
    icon: 'üöÄ',
    category: 'freelancer',
    xpReward: 25,
    rarity: 'common',
    condition: (data) => data.applicationsSubmitted >= 1
  },
  {
    id: 'first_job_completed',
    name: '‚úÖ –ü–µ—Ä–≤—ã–π —É—Å–ø–µ—Ö',
    description: '–ó–∞–≤–µ—Ä—à–∏–ª–∏ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑',
    icon: '‚úÖ',
    category: 'freelancer',
    xpReward: 75,
    rarity: 'uncommon',
    condition: (data) => data.jobsCompleted >= 1
  },
  {
    id: 'reliable_freelancer',
    name: '‚≠ê –ù–∞–¥—ë–∂–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å',
    description: '–ó–∞–≤–µ—Ä—à–∏–ª–∏ 10 –∑–∞–∫–∞–∑–æ–≤ —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º 4+',
    icon: '‚≠ê',
    category: 'freelancer',
    xpReward: 200,
    rarity: 'rare',
    condition: (data) => data.jobsCompleted >= 10 && data.averageRating >= 4,
    progressTracker: (data) => ({ current: data.jobsCompleted || 0, required: 10 })
  },
  
  // Social Achievements
  {
    id: 'first_like',
    name: '‚ù§Ô∏è –ü–µ—Ä–≤—ã–π –ª–∞–π–∫',
    description: '–ü–æ—Å—Ç–∞–≤–∏–ª–∏ –ø–µ—Ä–≤—ã–π –ª–∞–π–∫',
    icon: '‚ù§Ô∏è',
    category: 'social',
    xpReward: 10,
    rarity: 'common',
    condition: (data) => data.likesGiven >= 1
  },
  {
    id: 'socializer',
    name: 'ü§ù –°–æ—Ü–∏–∞–ª—å–Ω–∞—è –±–∞–±–æ—á–∫–∞',
    description: '–ü–æ—Å—Ç–∞–≤–∏–ª–∏ 50 –ª–∞–π–∫–æ–≤',
    icon: 'ü§ù',
    category: 'social',
    xpReward: 100,
    rarity: 'uncommon',
    condition: (data) => data.likesGiven >= 50,
    progressTracker: (data) => ({ current: data.likesGiven || 0, required: 50 })
  },
  {
    id: 'five_star_reviewer',
    name: '‚≠ê –©–µ–¥—Ä—ã–π –Ω–∞ –ø–æ—Ö–≤–∞–ª—É',
    description: '–ü–æ—Å—Ç–∞–≤–∏–ª–∏ –ø–µ—Ä–≤—É—é 5-–∑–≤–µ–∑–¥–æ—á–Ω—É—é –æ—Ü–µ–Ω–∫—É',
    icon: '‚≠ê',
    category: 'social',
    xpReward: 25,
    rarity: 'uncommon',
    condition: (data) => data.fiveStarReviews >= 1
  },
  
  // AI Achievements
  {
    id: 'ai_explorer',
    name: 'ü§ñ AI –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å',
    description: '–°–¥–µ–ª–∞–ª–∏ –ø–µ—Ä–≤—ã–π AI –∑–∞–∫–∞–∑',
    icon: 'ü§ñ',
    category: 'ai',
    xpReward: 50,
    rarity: 'common',
    condition: (data) => data.aiOrdersCreated >= 1
  },
  {
    id: 'ai_enthusiast',
    name: 'üß† AI —ç–Ω—Ç—É–∑–∏–∞—Å—Ç',
    description: '–°–¥–µ–ª–∞–ª–∏ 10 AI –∑–∞–∫–∞–∑–æ–≤',
    icon: 'üß†',
    category: 'ai',
    xpReward: 150,
    rarity: 'uncommon',
    condition: (data) => data.aiOrdersCreated >= 10,
    progressTracker: (data) => ({ current: data.aiOrdersCreated || 0, required: 10 })
  },
  
  // Level Achievements
  {
    id: 'level_5',
    name: 'ü•â –û–ø—ã—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
    description: '–î–æ—Å—Ç–∏–≥–ª–∏ 5 —É—Ä–æ–≤–Ω—è',
    icon: 'ü•â',
    category: 'level',
    xpReward: 100,
    rarity: 'uncommon',
    condition: (data) => data.currentLevel >= 5
  },
  {
    id: 'level_10',
    name: 'ü•à –≠–∫—Å–ø–µ—Ä—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã',
    description: '–î–æ—Å—Ç–∏–≥–ª–∏ 10 —É—Ä–æ–≤–Ω—è',
    icon: 'ü•à',
    category: 'level',
    xpReward: 200,
    rarity: 'rare',
    condition: (data) => data.currentLevel >= 10
  },
  {
    id: 'level_20',
    name: 'ü•á –ú–∞—Å—Ç–µ—Ä –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã',
    description: '–î–æ—Å—Ç–∏–≥–ª–∏ 20 —É—Ä–æ–≤–Ω—è',
    icon: 'ü•á',
    category: 'level',
    xpReward: 500,
    rarity: 'epic',
    condition: (data) => data.currentLevel >= 20
  },
  
  // Special Achievements
  {
    id: 'early_bird',
    name: 'üåÖ –†–∞–Ω–Ω—è—è –ø—Ç–∞—à–∫–∞',
    description: '–ê–∫—Ç–∏–≤–Ω—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏',
    icon: 'üåÖ',
    category: 'special',
    xpReward: 100,
    rarity: 'rare',
    condition: (data) => data.streakDays >= 7,
    progressTracker: (data) => ({ current: data.streakDays || 0, required: 7 })
  },
  {
    id: 'perfectionist',
    name: 'üíé –ü–µ—Ä—Ñ–µ–∫—Ü–∏–æ–Ω–∏—Å—Ç',
    description: '–°—Ä–µ–¥–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ 4.8+ –∑–∞ 20+ –∑–∞–∫–∞–∑–æ–≤',
    icon: 'üíé',
    category: 'special',
    xpReward: 300,
    rarity: 'epic',
    condition: (data) => data.jobsCompleted >= 20 && data.averageRating >= 4.8,
    progressTracker: (data) => ({ current: data.jobsCompleted || 0, required: 20 })
  }
];

export class AchievementEngine {
  
  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –≤—ã–¥–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  static async checkAndAwardAchievements(userId: string, userData: any) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —É–∂–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
      const existingAchievements = await databases.listDocuments(
        DATABASE_ID,
        'achievements',
        [Query.equal('user_id', userId)]
      );

      const unlockedIds = existingAchievements.documents.map(a => a.achievement_id);
      const newAchievements = [];

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
      for (const achievement of ACHIEVEMENT_DEFINITIONS) {
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
        if (unlockedIds.includes(achievement.id)) continue;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ
        if (achievement.condition(userData)) {
          // –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ
          const newAchievement = await databases.createDocument(
            DATABASE_ID,
            'achievements',
            ID.unique(),
            {
              user_id: userId,
              achievement_id: achievement.id,
              achievement_name: achievement.name,
              achievement_description: achievement.description,
              achievement_icon: achievement.icon,
              achievement_category: achievement.category,
              xp_reward: achievement.xpReward,
              rarity: achievement.rarity,
              unlocked_at: new Date().toISOString(),
              progress_current: 1,
              progress_required: 1
            }
          );

          newAchievements.push(newAchievement);

          // –ù–∞–≥—Ä–∞–∂–¥–∞–µ–º XP
          await this.awardXP(userId, achievement.xpReward, `achievement_${achievement.id}`);
        }
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
      if (newAchievements.length > 0) {
        const progressResponse = await databases.listDocuments(
          DATABASE_ID,
          'user_progress',
          [Query.equal('user_id', userId)]
        );

        if (progressResponse.documents.length > 0) {
          const currentProgress = progressResponse.documents[0];
          await databases.updateDocument(
            DATABASE_ID,
            'user_progress',
            currentProgress.$id,
            {
              achievements_count: currentProgress.achievements_count + newAchievements.length
            }
          );
        }
      }

      return newAchievements;
    } catch (error) {
      console.error('Error checking achievements:', error);
      return [];
    }
  }

  // –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º
  static async getAchievementProgress(userId: string, userData: any) {
    try {
      const existingAchievements = await databases.listDocuments(
        DATABASE_ID,
        'achievements',
        [Query.equal('user_id', userId)]
      );

      const unlockedIds = existingAchievements.documents.map(a => a.achievement_id);
      const progress = [];

      for (const achievement of ACHIEVEMENT_DEFINITIONS) {
        const isUnlocked = unlockedIds.includes(achievement.id);
        let progressData = { current: 0, required: 1 };

        if (!isUnlocked && achievement.progressTracker) {
          progressData = achievement.progressTracker(userData);
        }

        progress.push({
          ...achievement,
          isUnlocked,
          progress: progressData
        });
      }

      return progress;
    } catch (error) {
      console.error('Error getting achievement progress:', error);
      return [];
    }
  }

  // –ù–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ XP —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —É—Ä–æ–≤–Ω—è
  private static async awardXP(userId: string, amount: number, reason: string) {
    try {
      const progressResponse = await databases.listDocuments(
        DATABASE_ID,
        'user_progress',
        [Query.equal('user_id', userId)]
      );

      if (progressResponse.documents.length > 0) {
        const progress = progressResponse.documents[0];
        const newCurrentXP = progress.current_xp + amount;
        const newTotalXP = progress.total_xp + amount;
        
        let newLevel = progress.current_level;
        let newNextLevelXP = progress.next_level_xp;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è
        if (newCurrentXP >= progress.next_level_xp) {
          newLevel += 1;
          newNextLevelXP = this.calculateXPRequirement(newLevel);
        }

        await databases.updateDocument(
          DATABASE_ID,
          'user_progress',
          progress.$id,
          {
            current_xp: newCurrentXP >= progress.next_level_xp ? newCurrentXP - progress.next_level_xp : newCurrentXP,
            total_xp: newTotalXP,
            current_level: newLevel,
            next_level_xp: newNextLevelXP
          }
        );

        return { newLevel: newLevel > progress.current_level, level: newLevel };
      }
    } catch (error) {
      console.error('Error awarding XP:', error);
    }
  }

  // –†–∞—Å—á–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π XP –¥–ª—è —É—Ä–æ–≤–Ω—è
  private static calculateXPRequirement(level: number): number {
    // –ü—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è —Ñ–æ—Ä–º—É–ª–∞: –±–∞–∑–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ + (—É—Ä–æ–≤–µ–Ω—å^1.5 * 50)
    return Math.floor(100 + Math.pow(level, 1.5) * 50);
  }

  // –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
  static async getUserDataForAchievements(userId: string) {
    try {
      // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π
      const [progress, profile, jobs, applications, orders, interactions, reviews] = await Promise.all([
        databases.listDocuments(DATABASE_ID, 'user_progress', [Query.equal('user_id', userId)]),
        databases.listDocuments(DATABASE_ID, 'user_profiles', [Query.equal('user_id', userId)]),
        databases.listDocuments(DATABASE_ID, 'jobs', [Query.equal('clientId', userId)]),
        databases.listDocuments(DATABASE_ID, 'applications', [Query.equal('freelancerId', userId)]),
        databases.listDocuments(DATABASE_ID, 'orders', [Query.equal('userId', userId)]),
        databases.listDocuments(DATABASE_ID, 'interactions', [Query.equal('user_id', userId)]),
        databases.listDocuments(DATABASE_ID, 'ratings_reviews', [Query.equal('reviewer_id', userId)])
      ]);

      const userData = {
        // Progress data
        currentLevel: progress.documents[0]?.current_level || 1,
        streakDays: progress.documents[0]?.streak_days || 0,
        jobsCompleted: progress.documents[0]?.completed_jobs || 0,
        averageRating: progress.documents[0]?.average_rating || 0,
        
        // Profile data
        onboardingCompleted: profile.documents[0]?.onboarding_completed || false,
        
        // Activity data
        jobsCreated: jobs.documents.length,
        applicationsSubmitted: applications.documents.length,
        aiOrdersCreated: orders.documents.length,
        
        // Social data
        likesGiven: interactions.documents.filter(i => i.interaction_type === 'like').length,
        fiveStarReviews: reviews.documents.filter(r => r.overall_rating === 5).length
      };

      return userData;
    } catch (error) {
      console.error('Error collecting user data:', error);
      return {};
    }
  }

  // –¢—Ä–∏–≥–≥–µ—Ä –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π –ø–æ—Å–ª–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
  static async triggerAchievementCheck(userId: string, action: string) {
    try {
      const userData = await this.getUserDataForAchievements(userId);
      const newAchievements = await this.checkAndAwardAchievements(userId, userData);
      
      if (newAchievements.length > 0) {
        console.log(`üèÜ User ${userId} unlocked ${newAchievements.length} new achievements:`, 
          newAchievements.map(a => a.achievement_name));
      }
      
      return newAchievements;
    } catch (error) {
      console.error('Error triggering achievement check:', error);
      return [];
    }
  }
} 