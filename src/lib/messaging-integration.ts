// üîê –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã —Å–æ–æ–±—â–µ–Ω–∏–π —Å –¥–∂–æ–±–∞–º–∏ –∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏
// –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–æ–º

import { messagingService } from '../services/messaging';
import type { Conversation } from '../services/messaging';

export interface JobData {
  $id: string;
  title: string;
  clientId: string;
  freelancerId?: string;
  status: 'open' | 'in_progress' | 'completed' | 'cancelled';
  budget: {
    min: number;
    max: number;
    currency: string;
  };
}

export interface ProjectData {
  $id: string;
  jobId: string;
  contractId: string;
  title: string;
  clientId: string;
  freelancerId: string;
  status: 'active' | 'completed' | 'cancelled';
  milestones?: any[];
}

/**
 * üîê –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞–º–∏
 */
export class MessagingIntegrationService {
  
  /**
   * üíº –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∂–æ–±–∞
   * –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–æ–≤–æ–≥–æ –¥–∂–æ–±–∞
   */
  async onJobCreated(jobData: JobData): Promise<Conversation> {
    try {
      console.log(`üÜï Creating channel for new job: ${jobData.title}`);
      
      const channel = await messagingService.createJobChannel({
        jobId: jobData.$id,
        jobTitle: jobData.title,
        clientId: jobData.clientId,
        // –ü–æ–∫–∞ —Ç–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç, —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä –¥–æ–±–∞–≤–∏—Ç—Å—è –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞—è–≤–∫–∏
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      await messagingService.sendSystemMessage({
        conversationId: channel.$id,
        content: `üéâ –°–æ–∑–¥–∞–Ω –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª –¥–ª—è –¥–∂–æ–±–∞ "${jobData.title}"\n\n` +
                `üí∞ –ë—é–¥–∂–µ—Ç: ${jobData.budget.min}-${jobData.budget.max} ${jobData.budget.currency}\n` +
                `üîê –≠—Ç–æ—Ç –∫–∞–Ω–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –ø—Ä–æ–µ–∫—Ç–∞`,
        participants: [jobData.clientId],
        metadata: {
          jobCreated: true,
          jobId: jobData.$id
        }
      });

      console.log(`‚úÖ Job channel created successfully: ${channel.$id}`);
      return channel;
    } catch (error) {
      console.error('‚ùå Error creating job channel:', error);
      throw error;
    }
  }

  /**
   * üë§ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞—è–≤–∫–∏
   */
  async onJobApplicationAccepted(jobId: string, freelancerId: string): Promise<void> {
    try {
      console.log(`‚úÖ Adding freelancer ${freelancerId} to job ${jobId}`);
      
      await messagingService.addFreelancerToJobChannel(jobId, freelancerId);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç–∞—Ä—Ç–µ —Ä–∞–±–æ—Ç—ã
      const jobChannel = await messagingService.findJobChannel(jobId);
      if (jobChannel) {
        await messagingService.sendSystemMessage({
          conversationId: jobChannel.$id,
          content: `ü§ù –§—Ä–∏–ª–∞–Ω—Å–µ—Ä –ø—Ä–∏–Ω—è–ª –∑–∞—è–≤–∫—É –Ω–∞ –ø—Ä–æ–µ–∫—Ç!\n\n` +
                  `üöÄ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–±—Å—É–∂–¥–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞ –≤ —ç—Ç–æ–º –ø—Ä–∏–≤–∞—Ç–Ω–æ–º –∫–∞–Ω–∞–ª–µ`,
          participants: jobChannel.participants,
          metadata: {
            freelancerAccepted: true,
            freelancerId
          }
        });
      }

      console.log(`‚úÖ Freelancer added to job channel successfully`);
    } catch (error) {
      console.error('‚ùå Error adding freelancer to job channel:', error);
      throw error;
    }
  }

  /**
   * üèóÔ∏è –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∞–Ω–∏–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
   */
  async onContractSigned(projectData: ProjectData): Promise<Conversation> {
    try {
      console.log(`üìã Creating project channel for contract: ${projectData.contractId}`);
      
      const channel = await messagingService.createProjectChannel({
        projectId: projectData.$id,
        contractId: projectData.contractId,
        projectTitle: projectData.title,
        clientId: projectData.clientId,
        freelancerId: projectData.freelancerId,
        milestones: projectData.milestones
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–æ–µ–∫—Ç–∞
      await messagingService.sendSystemMessage({
        conversationId: channel.$id,
        content: `üèóÔ∏è –ü—Ä–æ–µ–∫—Ç "${projectData.title}" –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ –∑–∞–ø—É—â–µ–Ω!\n\n` +
                `üìã –ö–æ–Ω—Ç—Ä–∞–∫—Ç: ${projectData.contractId}\n` +
                `üéØ –≠—Ç–∞–ø—ã: ${projectData.milestones?.length || 0}\n` +
                `üîê –≠—Ç–æ –∑–∞—â–∏—â–µ–Ω–Ω—ã–π –∫–∞–Ω–∞–ª –ø—Ä–æ–µ–∫—Ç–∞`,
        participants: [projectData.clientId, projectData.freelancerId],
        metadata: {
          projectStarted: true,
          contractId: projectData.contractId
        }
      });

      // –ï—Å–ª–∏ –µ—Å—Ç—å milestone, —Å–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ
      if (projectData.milestones) {
        for (const [index, milestone] of projectData.milestones.entries()) {
          await messagingService.sendMessage({
            conversationId: channel.$id,
            senderId: 'system',
            receiverId: projectData.freelancerId,
            content: `üéØ –≠—Ç–∞–ø ${index + 1}: ${milestone.title}`,
            messageType: 'milestone',
            milestoneData: {
              ...milestone,
              milestoneId: milestone.$id || `milestone_${index}`,
              status: 'pending'
            }
          });
        }
      }

      console.log(`‚úÖ Project channel created successfully: ${channel.$id}`);
      return channel;
    } catch (error) {
      console.error('‚ùå Error creating project channel:', error);
      throw error;
    }
  }

  /**
   * ü§ñ –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –¥–ª—è AI —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
   */
  async onAISpecialistOrdered(data: {
    specialistId: string;
    specialistName: string;
    clientId: string;
    orderType: 'monthly' | 'task';
    orderDetails: any;
  }): Promise<Conversation> {
    try {
      console.log(`ü§ñ Creating AI specialist channel: ${data.specialistName}`);
      
      const channel = await messagingService.createAISpecialistChannel({
        specialistId: data.specialistId,
        specialistName: data.specialistName,
        clientId: data.clientId,
        orderType: data.orderType
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç AI
      await messagingService.sendMessage({
        conversationId: channel.$id,
        senderId: data.specialistId,
        receiverId: data.clientId,
        content: `–ü—Ä–∏–≤–µ—Ç! –Ø ${data.specialistName} ü§ñ\n\n` +
                `–ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º —Å ${data.orderType === 'monthly' ? '–º–µ—Å—è—á–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π' : '—Ä–∞–∑–æ–≤–æ–π –∑–∞–¥–∞—á–µ–π'}.\n\n` +
                `üí° –û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ, –∏ —è —Å—Ä–∞–∑—É –ø—Ä–∏—Å—Ç—É–ø–ª—é –∫ —Ä–∞–±–æ—Ç–µ!`,
        messageType: 'ai_response',
        metadata: {
          isWelcomeMessage: true,
          orderType: data.orderType
        }
      });

      console.log(`‚úÖ AI specialist channel created: ${channel.$id}`);
      return channel;
    } catch (error) {
      console.error('‚ùå Error creating AI specialist channel:', error);
      throw error;
    }
  }

  /**
   * üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ–µ–∫—Ç–∞
   */
  async onProjectStatusChanged(projectId: string, newStatus: string, metadata?: any): Promise<void> {
    try {
      const channel = await messagingService.findProjectChannel(projectId);
      if (!channel) return;

      let statusMessage = '';
      let statusIcon = '';

      switch (newStatus) {
        case 'in_progress':
          statusIcon = 'üöÄ';
          statusMessage = '–ü—Ä–æ–µ–∫—Ç –ø–µ—Ä–µ—à–µ–ª –≤ –∞–∫—Ç–∏–≤–Ω—É—é —Ñ–∞–∑—É —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏';
          break;
        case 'review':
          statusIcon = 'üëÄ';
          statusMessage = '–ü—Ä–æ–µ–∫—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –∫–ª–∏–µ–Ω—Ç—É';
          break;
        case 'completed':
          statusIcon = '‚úÖ';
          statusMessage = '–ü—Ä–æ–µ–∫—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω! –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! üéâ';
          break;
        case 'cancelled':
          statusIcon = '‚ùå';
          statusMessage = '–ü—Ä–æ–µ–∫—Ç –±—ã–ª –æ—Ç–º–µ–Ω–µ–Ω';
          break;
        default:
          statusIcon = 'üìã';
          statusMessage = `–°—Ç–∞—Ç—É—Å –ø—Ä–æ–µ–∫—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: ${newStatus}`;
      }

      await messagingService.sendSystemMessage({
        conversationId: channel.$id,
        content: `${statusIcon} ${statusMessage}`,
        participants: channel.participants,
        metadata: {
          statusUpdate: true,
          oldStatus: metadata?.oldStatus,
          newStatus,
          timestamp: new Date().toISOString()
        }
      });

    } catch (error) {
      console.error('‚ùå Error updating project status:', error);
    }
  }

  /**
   * üí∞ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–ª–∞—Ç–µ–∂–µ
   */
  async onPaymentProcessed(data: {
    projectId?: string;
    jobId?: string;
    amount: number;
    currency: string;
    fromUserId: string;
    toUserId: string;
    milestone?: string;
  }): Promise<void> {
    try {
      // –ò—â–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∫–∞–Ω–∞–ª
      let channel: Conversation | null = null;
      
      if (data.projectId) {
        channel = await messagingService.findProjectChannel(data.projectId);
      } else if (data.jobId) {
        channel = await messagingService.findJobChannel(data.jobId);
      }

      if (!channel) return;

      await messagingService.sendSystemMessage({
        conversationId: channel.$id,
        content: `üí∞ –ü–ª–∞—Ç–µ–∂ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!\n\n` +
                `üíµ –°—É–º–º–∞: ${data.amount} ${data.currency}\n` +
                `${data.milestone ? `üéØ –ó–∞ —ç—Ç–∞–ø: ${data.milestone}\n` : ''}` +
                `‚úÖ –°—Ä–µ–¥—Å—Ç–≤–∞ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä—É`,
        participants: channel.participants,
        metadata: {
          paymentProcessed: true,
          amount: data.amount,
          currency: data.currency,
          milestone: data.milestone
        }
      });

    } catch (error) {
      console.error('‚ùå Error sending payment notification:', error);
    }
  }

  /**
   * üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –¥–∂–æ–±–∞
   */
  async getJobChannel(jobId: string): Promise<Conversation | null> {
    return messagingService.findJobChannel(jobId);
  }

  /**
   * üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞
   */
  async getProjectChannel(projectId: string): Promise<Conversation | null> {
    return messagingService.findProjectChannel(projectId);
  }

  /**
   * üóëÔ∏è –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
   */
  async archiveChannel(conversationId: string, reason: string = '–ü—Ä–æ–µ–∫—Ç –∑–∞–≤–µ—Ä—à–µ–Ω'): Promise<void> {
    try {
      // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å
      console.log(`üì¶ Archiving channel ${conversationId}: ${reason}`);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      await messagingService.sendSystemMessage({
        conversationId,
        content: `üì¶ –ö–∞–Ω–∞–ª –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω: ${reason}\n\n` +
                `–ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∏ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –∞—Ä—Ö–∏–≤–µ.`,
        participants: [], // –ü–æ–ª—É—á–∏–º –∏–∑ –∫–æ–Ω–≤–µ—Ä—Å–∞—Ü–∏–∏
        metadata: {
          channelArchived: true,
          reason
        }
      });

    } catch (error) {
      console.error('‚ùå Error archiving channel:', error);
    }
  }

  /**
   * üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –∫–∞–Ω–∞–ª—É –¥–∂–æ–±–∞
   */
  async checkJobChannelAccess(jobId: string, userId: string): Promise<boolean> {
    try {
      const channel = await this.getJobChannel(jobId);
      if (!channel) return false;

      return channel.participants.includes(userId);
    } catch (error) {
      console.error('‚ùå Error checking job channel access:', error);
      return false;
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º singleton
export const messagingIntegration = new MessagingIntegrationService();

/**
 * üîß –•–µ–ª–ø–µ—Ä—ã –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
 */
export const MessagingHelpers = {
  // –°–æ–∑–¥–∞—Ç—å –∫–∞–Ω–∞–ª –¥–ª—è –¥–∂–æ–±–∞
  async createJobChannel(jobData: JobData) {
    return messagingIntegration.onJobCreated(jobData);
  },

  // –î–æ–±–∞–≤–∏—Ç—å —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–∞ –≤ –¥–∂–æ–±
  async addFreelancerToJob(jobId: string, freelancerId: string) {
    return messagingIntegration.onJobApplicationAccepted(jobId, freelancerId);
  },

  // –°–æ–∑–¥–∞—Ç—å –∫–∞–Ω–∞–ª –ø—Ä–æ–µ–∫—Ç–∞
  async createProjectChannel(projectData: ProjectData) {
    return messagingIntegration.onContractSigned(projectData);
  },

  // –°–æ–∑–¥–∞—Ç—å AI –∫–∞–Ω–∞–ª
  async createAIChannel(data: {
    specialistId: string;
    specialistName: string;
    clientId: string;
    orderType: 'monthly' | 'task';
  }) {
    return messagingIntegration.onAISpecialistOrdered({
      ...data,
      orderDetails: {}
    });
  },

  // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ
  async notifyStatusChange(projectId: string, status: string, metadata?: any) {
    return messagingIntegration.onProjectStatusChanged(projectId, status, metadata);
  },

  // –£–≤–µ–¥–æ–º–∏—Ç—å –æ –ø–ª–∞—Ç–µ–∂–µ
  async notifyPayment(paymentData: {
    projectId?: string;
    jobId?: string;
    amount: number;
    currency: string;
    fromUserId: string;
    toUserId: string;
    milestone?: string;
  }) {
    return messagingIntegration.onPaymentProcessed(paymentData);
  }
};
