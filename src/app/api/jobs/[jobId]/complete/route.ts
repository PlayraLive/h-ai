import { NextRequest, NextResponse } from 'next/server';
import { databases, DATABASE_ID, COLLECTIONS, ID } from '@/lib/appwrite/database';
import { EnhancedMessagingService } from '@/lib/services/enhanced-messaging';

export async function POST(
  request: NextRequest,
  { params }: { params: { jobId: string } }
) {
  try {
    const body = await request.json();
    const { rating, comment, paymentAmount, freelancerId, clientId } = body;

    if (!rating || !comment || !paymentAmount || !freelancerId || !clientId) {
      return NextResponse.json(
        { error: 'Missing required fields' },
        { status: 400 }
      );
    }

    // Get job details first
    const job = await databases.getDocument(
      DATABASE_ID,
      COLLECTIONS.JOBS,
      params.jobId
    );

    // 1. –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –¥–∂–æ–±—Å–∞
    await databases.updateDocument(
      DATABASE_ID,
      COLLECTIONS.JOBS,
      params.jobId,
      {
        status: 'completed',
        completedAt: new Date().toISOString(),
        finalPayment: paymentAmount
      }
    );

    // 2. –°–æ–∑–¥–∞—Ç—å –æ—Ç–∑—ã–≤ –∫–ª–∏–µ–Ω—Ç–∞ –æ —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–µ
    const clientReview = await databases.createDocument(
      DATABASE_ID,
      COLLECTIONS.REVIEWS,
      ID.unique(),
      {
        jobId: params.jobId,
        projectId: params.jobId,
        reviewerId: clientId,
        revieweeId: freelancerId,
        reviewerType: 'client',
        rating,
        title: `Review for ${job.freelancerName}`,
        comment,
        tags: JSON.stringify([]),
        skillRatings: JSON.stringify({
          communication: rating,
          quality: rating,
          timeliness: rating,
          professionalism: rating
        }),
        isPublic: true,
        helpful: 0,
        notHelpful: 0,
        createdAt: new Date().toISOString()
      }
    );

    // 3. –û–±–Ω–æ–≤–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–∞
    try {
      const freelancer = await databases.getDocument(
        DATABASE_ID,
        COLLECTIONS.USERS,
        freelancerId
      );

      const currentRating = freelancer.rating || 0;
      const totalRatings = freelancer.totalRatings || 0;
      const newTotalRatings = totalRatings + 1;
      const newRating = ((currentRating * totalRatings) + rating) / newTotalRatings;

      await databases.updateDocument(
        DATABASE_ID,
        COLLECTIONS.USERS,
        freelancerId,
        {
          rating: newRating,
          totalRatings: newTotalRatings,
          completedJobs: (freelancer.completedJobs || 0) + 1,
          totalEarnings: (freelancer.totalEarnings || 0) + paymentAmount
        }
      );
    } catch (error) {
      console.error('Error updating freelancer rating:', error);
    }

    // 4. –°–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –≤ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–∞
    try {
      await databases.createDocument(
        DATABASE_ID,
        COLLECTIONS.PROJECTS,
        ID.unique(),
        {
          freelancerId,
          clientId,
          jobId: params.jobId,
          title: job.title,
          description: job.description,
          category: job.category,
          skills: Array.isArray(job.skills) ? job.skills : JSON.parse(job.skills || '[]'),
          budget: paymentAmount,
          rating,
          clientComment: comment,
          completedAt: new Date().toISOString(),
          status: 'completed',
          clientName: job.clientName || 'Anonymous Client',
          image: null, // Add project images later
          tags: Array.isArray(job.tags) ? job.tags : JSON.parse(job.tags || '[]')
        }
      );
    } catch (error) {
      console.error('Error creating portfolio item:', error);
    }

    // 5. –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
    try {
      const conversationId = `job-${params.jobId}`;
      await EnhancedMessagingService.sendMessage({
        conversationId,
        senderId: 'system',
        receiverId: freelancerId,
        content: `üéâ **–ü—Ä–æ–µ–∫—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!**\n\n–ö–ª–∏–µ–Ω—Ç –∑–∞–≤–µ—Ä—à–∏–ª –ø—Ä–æ–µ–∫—Ç "${job.title}".\n\nüí∞ **–û–ø–ª–∞—á–µ–Ω–æ:** $${paymentAmount}\n‚≠ê **–†–µ–π—Ç–∏–Ω–≥:** ${rating}/5\nüí¨ **–û—Ç–∑—ã–≤:** "${comment}"\n\n–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å —É—Å–ø–µ—à–Ω—ã–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º!`,
        messageType: 'system',
        metadata: {
          projectCompleted: true,
          jobId: params.jobId,
          finalPayment: paymentAmount,
          rating: rating
        }
      });
    } catch (msgError) {
      console.error('Error sending completion message:', msgError);
    }

    // 6. –°–æ–∑–¥–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    try {
      // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–∞
      await databases.createDocument(
        DATABASE_ID,
        COLLECTIONS.NOTIFICATIONS,
        ID.unique(),
        {
          userId: freelancerId,
          type: 'project_completed',
          title: 'üéâ –ü—Ä–æ–µ–∫—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!',
          message: `–í–∞—à –ø—Ä–æ–µ–∫—Ç "${job.title}" –∑–∞–≤–µ—Ä—à–µ–Ω —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º ${rating}/5. –û–ø–ª–∞—Ç–∞: $${paymentAmount}`,
          data: JSON.stringify({
            jobId: params.jobId,
            rating,
            paymentAmount,
            comment,
            chatUrl: `/en/messages?job=${params.jobId}`,
            reviewId: clientReview.$id
          }),
          isRead: false,
          createdAt: new Date().toISOString()
        }
      );

      // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä—É (–≤–∑–∞–∏–º–Ω—ã–π –æ—Ç–∑—ã–≤)
      await databases.createDocument(
        DATABASE_ID,
        COLLECTIONS.NOTIFICATIONS,
        ID.unique(),
        {
          userId: clientId,
          type: 'review_request',
          title: '‚≠ê –í—Ä–µ–º—è –¥–ª—è –æ—Ç–∑—ã–≤–∞',
          message: `–ü—Ä–æ–µ–∫—Ç "${job.title}" –∑–∞–≤–µ—Ä—à–µ–Ω. –¢–µ–ø–µ—Ä—å —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä –º–æ–∂–µ—Ç –æ—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤ –æ —Ä–∞–±–æ—Ç–µ —Å –≤–∞–º–∏`,
          data: JSON.stringify({
            jobId: params.jobId,
            freelancerId,
            freelancerName: job.freelancerName,
            actionUrl: `/en/jobs/${params.jobId}?action=review`
          }),
          isRead: false,
          createdAt: new Date().toISOString()
        }
      );
    } catch (error) {
      console.error('Error creating notifications:', error);
    }

    return NextResponse.json({
      success: true,
      completion: clientReview
    });

  } catch (error) {
    console.error('Error completing job:', error);
    return NextResponse.json(
      { error: 'Failed to complete job' },
      { status: 500 }
    );
  }
}
