import { NextRequest, NextResponse } from 'next/server';
import { databases, DATABASE_ID, COLLECTIONS, ID } from '@/lib/appwrite/database';
import { EnhancedMessagingService } from '@/lib/services/enhanced-messaging';

export async function POST(request: NextRequest) {
  try {
    const {
      jobId,
      contractId,
      milestoneIndex,
      txHash,
      amount,
      clientAddress,
      freelancerAddress
    } = await request.json();

    if (!jobId || !contractId || milestoneIndex === undefined || !txHash) {
      return NextResponse.json(
        { error: 'Missing required fields' },
        { status: 400 }
      );
    }

    // 1. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π escrow –∫–æ–Ω—Ç—Ä–∞–∫—Ç
    const escrowDocs = await databases.listDocuments(
      DATABASE_ID,
      'crypto_escrows',
      [
        databases.Query.equal('contractId', contractId),
        databases.Query.equal('jobId', jobId)
      ]
    );

    if (escrowDocs.documents.length === 0) {
      return NextResponse.json(
        { error: 'Escrow contract not found' },
        { status: 404 }
      );
    }

    const escrow = escrowDocs.documents[0];
    const currentEvents = JSON.parse(escrow.events || '[]');

    // 2. –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è milestone
    const milestoneEvent = {
      type: 'milestone_completed',
      timestamp: new Date().toISOString(),
      txHash,
      milestoneIndex,
      amount: parseFloat(amount),
      data: { milestoneIndex, amount, clientAddress, freelancerAddress }
    };

    currentEvents.push(milestoneEvent);

    // 3. –û–±–Ω–æ–≤–ª—è–µ–º escrow –∑–∞–ø–∏—Å—å
    await databases.updateDocument(
      DATABASE_ID,
      'crypto_escrows',
      escrow.$id,
      {
        completedMilestones: (escrow.completedMilestones || 0) + 1,
        events: JSON.stringify(currentEvents),
        updatedAt: new Date().toISOString()
      }
    );

    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω—ã –ª–∏ –≤—Å–µ milestones
    const totalMilestones = escrow.milestones || 1;
    const completedMilestones = (escrow.completedMilestones || 0) + 1;
    const isProjectCompleted = completedMilestones >= totalMilestones;

    // 5. –ï—Å–ª–∏ –≤—Å–µ milestones –∑–∞–≤–µ—Ä—à–µ–Ω—ã, –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–∂–æ–±–∞
    if (isProjectCompleted) {
      await databases.updateDocument(
        DATABASE_ID,
        COLLECTIONS.JOBS,
        jobId,
        {
          status: 'completed',
          completedAt: new Date().toISOString(),
          updatedAt: new Date().toISOString()
        }
      );

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å escrow
      await databases.updateDocument(
        DATABASE_ID,
        'crypto_escrows',
        escrow.$id,
        {
          status: 'completed'
        }
      );
    }

    // 6. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const messagingService = new EnhancedMessagingService();
    
    const milestoneMessage = isProjectCompleted 
      ? `üéâ –ü—Ä–æ–µ–∫—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –í—Å–µ ${totalMilestones} —ç—Ç–∞–ø–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã. –°—Ä–µ–¥—Å—Ç–≤–∞ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä—É.`
      : `‚úÖ –≠—Ç–∞–ø ${milestoneIndex + 1}/${totalMilestones} –∑–∞–≤–µ—Ä—à–µ–Ω! –í—ã–ø–ª–∞—á–µ–Ω–æ: $${amount}. –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: ${txHash.substring(0, 10)}...`;

    try {
      await messagingService.sendSystemMessage({
        jobId,
        type: isProjectCompleted ? 'project_completed' : 'milestone_completed',
        title: isProjectCompleted ? '–ü—Ä–æ–µ–∫—Ç –∑–∞–≤–µ—Ä—à–µ–Ω' : '–≠—Ç–∞–ø –∑–∞–≤–µ—Ä—à–µ–Ω',
        content: milestoneMessage,
        metadata: {
          contractId,
          milestoneIndex,
          amount,
          txHash,
          isProjectCompleted,
          completedMilestones,
          totalMilestones
        }
      });
    } catch (msgError) {
      console.error('Error sending milestone message:', msgError);
    }

    return NextResponse.json({
      success: true,
      milestone: {
        index: milestoneIndex,
        amount,
        txHash,
        completedAt: new Date().toISOString()
      },
      project: {
        isCompleted: isProjectCompleted,
        completedMilestones,
        totalMilestones
      }
    });

  } catch (error) {
    console.error('Error completing milestone:', error);
    return NextResponse.json(
      { error: 'Failed to complete milestone' },
      { status: 500 }
    );
  }
}
