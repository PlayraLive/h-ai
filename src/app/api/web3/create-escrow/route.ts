import { NextRequest, NextResponse } from 'next/server';
import { databases, DATABASE_ID, COLLECTIONS, ID } from '@/lib/appwrite/database';
import { EnhancedMessagingService } from '@/lib/services/enhanced-messaging';

export async function POST(request: NextRequest) {
  try {
    const {
      jobId,
      clientAddress,
      freelancerAddress,
      contractId,
      txHash,
      network,
      token,
      amount,
      platformFee,
      milestones,
      deadline
    } = await request.json();

    if (!jobId || !clientAddress || !freelancerAddress || !contractId || !txHash) {
      return NextResponse.json(
        { error: 'Missing required fields' },
        { status: 400 }
      );
    }

    // 1. –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –±–ª–æ–∫—á–µ–π–Ω –∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const escrowRecord = await databases.createDocument(
      DATABASE_ID,
      'crypto_escrows',
      ID.unique(),
      {
        jobId,
        contractId, // ID —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
        txHash,
        network,
        token,
        amount: parseFloat(amount),
        platformFee: parseFloat(platformFee),
        milestones: parseInt(milestones),
        deadline: deadline,
        clientAddress,
        freelancerAddress,
        status: 'funded',
        createdAt: new Date().toISOString(),
        events: JSON.stringify([{
          type: 'escrow_created',
          timestamp: new Date().toISOString(),
          txHash,
          data: { amount, token, network }
        }])
      }
    );

    // 2. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–∂–æ–±—Å–∞
    await databases.updateDocument(
      DATABASE_ID,
      COLLECTIONS.JOBS,
      jobId,
      {
        status: 'in_progress',
        paymentMethod: 'crypto',
        escrowContractId: contractId,
        escrowTxHash: txHash,
        cryptoNetwork: network,
        cryptoToken: token,
        cryptoAmount: parseFloat(amount),
        updatedAt: new Date().toISOString()
      }
    );

    // 3. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç
    try {
      const conversationId = `job-${jobId}`;
      await EnhancedMessagingService.sendMessage({
        conversationId,
        senderId: 'system',
        receiverId: freelancerAddress,
        content: `üîê **Escrow –∫–æ–Ω—Ç—Ä–∞–∫—Ç —Å–æ–∑–¥–∞–Ω!**\n\nüí∞ **–°—É–º–º–∞:** ${amount} ${token}\nüåê **–°–µ—Ç—å:** ${network}\nüìù **ID –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞:** \`${contractId.slice(0, 10)}...${contractId.slice(-8)}\`\nüîó **–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è:** \`${txHash.slice(0, 10)}...${txHash.slice(-8)}\`\n\n–°—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã.`,
        messageType: 'system',
        metadata: {
          escrowCreated: true,
          contractId,
          txHash,
          network,
          token,
          amount
        }
      });
    } catch (msgError) {
      console.error('Error sending escrow message:', msgError);
    }

    // 4. –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    try {
      // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä—É
      await databases.createDocument(
        DATABASE_ID,
        COLLECTIONS.NOTIFICATIONS,
        ID.unique(),
        {
          userId: freelancerAddress,
          type: 'escrow_created',
          title: 'üîê Escrow –∫–æ–Ω—Ç—Ä–∞–∫—Ç —Å–æ–∑–¥–∞–Ω',
          message: `–ö–ª–∏–µ–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª ${amount} ${token} –≤ —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–µ. –ú–æ–∂–µ—Ç–µ –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å –∫ —Ä–∞–±–æ—Ç–µ!`,
          data: JSON.stringify({
            jobId,
            contractId,
            txHash,
            network,
            amount,
            token,
            explorerUrl: getExplorerUrl(network, txHash),
            chatUrl: `/en/messages?job=${jobId}`
          }),
          isRead: false,
          createdAt: new Date().toISOString()
        }
      );

      // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
      const job = await databases.getDocument(DATABASE_ID, COLLECTIONS.JOBS, jobId);
      await databases.createDocument(
        DATABASE_ID,
        COLLECTIONS.NOTIFICATIONS,
        ID.unique(),
        {
          userId: job.clientId,
          type: 'payment_secured',
          title: '‚úÖ –ü–ª–∞—Ç–µ–∂ –∑–∞—â–∏—â–µ–Ω',
          message: `–í–∞—à –ø–ª–∞—Ç–µ–∂ ${amount} ${token} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –≤ –±–ª–æ–∫—á–µ–π–Ω–µ. –§—Ä–∏–ª–∞–Ω—Å–µ—Ä –ø–æ–ª—É—á–∏—Ç —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã.`,
          data: JSON.stringify({
            jobId,
            contractId,
            txHash,
            network,
            amount,
            token,
            explorerUrl: getExplorerUrl(network, txHash),
            chatUrl: `/en/messages?job=${jobId}`
          }),
          isRead: false,
          createdAt: new Date().toISOString()
        }
      );
    } catch (notifError) {
      console.error('Error creating notifications:', notifError);
    }

    return NextResponse.json({
      success: true,
      escrowId: escrowRecord.$id,
      contractId,
      txHash,
      explorerUrl: getExplorerUrl(network, txHash)
    });

  } catch (error: any) {
    console.error('Error creating escrow record:', error);
    return NextResponse.json(
      { error: 'Failed to create escrow record', details: error.message },
      { status: 500 }
    );
  }
}

// Helper function to get blockchain explorer URL
function getExplorerUrl(network: string, txHash: string): string {
  const explorers = {
    polygon: `https://polygonscan.com/tx/${txHash}`,
    base: `https://basescan.org/tx/${txHash}`,
    arbitrum: `https://arbiscan.io/tx/${txHash}`,
    ethereum: `https://etherscan.io/tx/${txHash}`,
  };
  
  return explorers[network as keyof typeof explorers] || `https://etherscan.io/tx/${txHash}`;
}
