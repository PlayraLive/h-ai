import { NextRequest, NextResponse } from 'next/server';
import InstagramVideoSpecialist from '@/lib/services/instagram-video-specialist';

export async function POST(request: NextRequest) {
  try {
    const { message, specialistId, conversationId, userId } = await request.json();
    
    if (!message || !specialistId || !conversationId || !userId) {
      return NextResponse.json(
        { error: 'Missing required parameters' },
        { status: 400 }
      );
    }

    let aiResponseContent = '';
    let options = null;
    let technicalSpec = null;

    switch (specialistId) {
      case 'viktor-reels':
        try {
          const videoSpecialist = InstagramVideoSpecialist.getInstance();
          const result = await videoSpecialist.processClientMessage(
            message,
            conversationId,
            userId
          );
          
          aiResponseContent = result.response;
          options = result.options;
          technicalSpec = result.technicalSpec;
          
        } catch (error) {
          console.error('Error with Viktor Reels specialist:', error);
          aiResponseContent = '–ü—Ä–∏–≤–µ—Ç! –Ø Viktor Reels, —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ Instagram –≤–∏–¥–µ–æ. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ - —Å–æ–∑–¥–∞–º –∫—Ä—É—Ç–æ–µ –≤–∏–¥–µ–æ –¥–ª—è –≤–∞—à–µ–≥–æ –±—Ä–µ–Ω–¥–∞! üé¨';
        }
        break;
        
      case 'alex-ai':
        // Fallback for Alex AI - –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É
        const alexResponses = [
          '–ü–æ–Ω—è–ª! –†–∞–±–æ—Ç–∞—é –Ω–∞–¥ –≤–∞—à–∏–º –∑–∞–ø—Ä–æ—Å–æ–º. –°–∫–æ—Ä–æ –ø—Ä–∏—à–ª—é –≤–∞—Ä–∏–∞–Ω—Ç—ã ü§ñ‚ú®',
          '–û—Ç–ª–∏—á–Ω–∞—è –∏–¥–µ—è! –£–∂–µ –Ω–∞—á–∏–Ω–∞—é —Ä–∞–±–æ—Ç—É –Ω–∞–¥ –∫–æ–Ω—Ü–µ–ø—Ü–∏–µ–π üé®',
          '–£—á—Ç—É –≤—Å–µ –≤–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è. –í —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤ –ø–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç üìù',
          '–°–ø–∞—Å–∏–±–æ –∑–∞ —É—Ç–æ—á–Ω–µ–Ω–∏—è! –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç —Å–¥–µ–ª–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –µ—â–µ –ª—É—á—à–µ üëç',
          '–†–∞–±–æ—Ç–∞—é –Ω–∞–¥ —ç—Ç–∏–º. –ü–æ–∫–∞–∂—É –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∞ –≤—ã–±–æ—Ä ‚ö°',
        ];
        aiResponseContent = alexResponses[Math.floor(Math.random() * alexResponses.length)];
        break;
        
      default:
        aiResponseContent = '–ü—Ä–∏–≤–µ—Ç! –Ø AI —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç, –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å –≤–∞—à–∏–º –ø—Ä–æ–µ–∫—Ç–æ–º!';
    }

    return NextResponse.json({
      success: true,
      data: {
        response: aiResponseContent,
        options,
        technicalSpec,
        specialistId
      }
    });

  } catch (error: any) {
    console.error('AI Chat Response API Error:', error);
    return NextResponse.json(
      { 
        success: false, 
        error: error.message || 'Internal server error'
      },
      { status: 500 }
    );
  }
}