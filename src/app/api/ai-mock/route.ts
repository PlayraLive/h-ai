import { NextRequest, NextResponse } from 'next/server';

// Mock AI responses for different specialists
const SPECIALIST_RESPONSES = {
  'alex-ai': {
    name: 'Alex AI',
    responses: [
      '–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å –æ –≤–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ! –î–ª—è React –ø—Ä–æ–µ–∫—Ç–∞ —è —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –Ω–∞—á–∞—Ç—å —Å —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã. –ö–∞–∫–æ–π –∏–º–µ–Ω–Ω–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤—ã –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å?',
      '–î–ª—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏ –ø—Ä–µ–¥–ª–∞–≥–∞—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å—Ç–µ–∫: React + TypeScript + Next.js. –≠—Ç–æ –æ–±–µ—Å–ø–µ—á–∏—Ç –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å.',
      '–Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è—Ö –∫ –ø—Ä–æ–µ–∫—Ç—É.',
    ],
    suggestions: [
      '–û–±—Å—É–¥–∏—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É',
      '–í—ã–±—Ä–∞—Ç—å —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Å—Ç–µ–∫',
      '–°–æ–∑–¥–∞—Ç—å –ø–ª–∞–Ω —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏'
    ]
  },
  'luna-design': {
    name: 'Luna Design',
    responses: [
      '–î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –∫—Ä–∞—Å–∏–≤—ã–π –∏ —É–¥–æ–±–Ω—ã–π –¥–∏–∑–∞–π–Ω! –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–π —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –∏ —Å—Ç–∏–ª–µ, –∫–æ—Ç–æ—Ä—ã–π –≤–∞–º –Ω—Ä–∞–≤–∏—Ç—Å—è.',
      '–î–ª—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –ø–æ–¥—Ö–æ–¥ —Å –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –æ–ø—ã—Ç. –ö–∞–∫–∏–µ —ç–∫—Ä–∞–Ω—ã –Ω—É–∂–Ω–æ —Å–ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?',
      '–û—Ç–ª–∏—á–Ω–∞—è –∏–¥–µ—è! –Ø –ø–æ–º–æ–≥—É —Å–æ–∑–¥–∞—Ç—å wireframes –∏ UI kit. –ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –±—Ä–µ–Ω–¥-–≥–∞–π–¥–ª–∞–π–Ω—ã?',
    ],
    suggestions: [
      '–°–æ–∑–¥–∞—Ç—å wireframes',
      '–†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å UI kit',
      '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'
    ]
  },
  'viktor-reels': {
    name: 'Viktor Reels',
    responses: [
      '–ö—Ä—É—Ç–∞—è –∏–¥–µ—è –¥–ª—è –≤–∏–¥–µ–æ! –î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç. –ö–∞–∫–æ–π —Ñ–æ—Ä–º–∞—Ç –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç - —Ä–µ–∫–ª–∞–º–∞, –æ–±—É—á–µ–Ω–∏–µ –∏–ª–∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏–µ?',
      '–î–ª—è —ç—Ñ—Ñ–µ–∫—Ç–Ω–æ–≥–æ –≤–∏–¥–µ–æ –≤–∞–∂–µ–Ω —Å—Ü–µ–Ω–∞—Ä–∏–π –∏ –≤–∏–∑—É–∞–ª—å–Ω–∞—è –∫–æ–Ω—Ü–µ–ø—Ü–∏—è. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Ü–µ–ª—è—Ö –∏ –±—é–¥–∂–µ—Ç–µ –ø—Ä–æ–µ–∫—Ç–∞.',
      '–û—Ç–ª–∏—á–Ω–æ! –Ø –ø–æ–º–æ–≥—É —Å –º–æ–Ω—Ç–∞–∂–æ–º –∏ –∞–Ω–∏–º–∞—Ü–∏–µ–π. –ö–∞–∫—É—é –∞—Ç–º–æ—Å—Ñ–µ—Ä—É —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å –∑—Ä–∏—Ç–µ–ª—è–º?',
    ],
    suggestions: [
      '–ù–∞–ø–∏—Å–∞—Ç—å —Å—Ü–µ–Ω–∞—Ä–∏–π',
      '–í—ã–±—Ä–∞—Ç—å –≤–∏–∑—É–∞–ª—å–Ω—ã–π —Å—Ç–∏–ª—å',
      '–°–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—ä–µ–º–∫—É'
    ]
  },
  'max-bot': {
    name: 'Max Bot',
    responses: [
      '–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è - —ç—Ç–æ –º–æ—â–Ω–æ! –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –∫–∞–∫–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã —Ö–æ—Ç–∏—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å. –Ø —Å–æ–∑–¥–∞–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –±–æ—Ç–∞.',
      '–î–ª—è –≤–∞—à–µ–π –∑–∞–¥–∞—á–∏ –ø–æ–¥–æ–π–¥–µ—Ç Telegram –±–æ—Ç —Å webhooks. –ö–∞–∫–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å?',
      '–û—Ç–ª–∏—á–Ω–∞—è –∏–¥–µ—è! –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Å—ç–∫–æ–Ω–æ–º–∏—Ç –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –î–∞–≤–∞–π—Ç–µ –æ–ø—Ä–µ–¥–µ–ª–∏–º –ª–æ–≥–∏–∫—É —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞.',
    ],
    suggestions: [
      '–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞',
      '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—é',
      '–°–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏'
    ]
  },
  'sarah-voice': {
    name: 'Sarah Voice',
    responses: [
      '–ì–æ–ª–æ—Å–æ–≤—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –æ—Ç–∫—Ä—ã–≤–∞—é—Ç –Ω–æ–≤—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏! –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–π –∏–¥–µ–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.',
      '–î–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ voice UX –≤–∞–∂–Ω–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –¥–∏–∞–ª–æ–≥–∞. –ö–∞–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –¥–æ–ª–∂–µ–Ω –ø–æ–Ω–∏–º–∞—Ç—å –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫?',
      '–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ! –ì–æ–ª–æ—Å–æ–≤—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –æ—á–µ–Ω—å –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã. –ü–ª–∞–Ω–∏—Ä—É–µ—Ç–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å —É–º–Ω—ã–º–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º–∏?',
    ],
    suggestions: [
      '–°–ø—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã',
      '–°–æ–∑–¥–∞—Ç—å –¥–∏–∞–ª–æ–≥–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏',
      '–ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏'
    ]
  },
  'data-analyst-ai': {
    name: 'Data Analyst AI',
    responses: [
      '–ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ–º–æ–∂–µ—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è! –ö–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —É –≤–∞—Å –µ—Å—Ç—å –∏ –∫–∞–∫–∏–µ –∏–Ω—Å–∞–π—Ç—ã –Ω—É–∂–Ω—ã?',
      '–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –î–ª—è –≤–∞—à–µ–π –∑–∞–¥–∞—á–∏ –ø–æ–¥–æ–π–¥–µ—Ç –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ. –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Ü–µ–ª—è—Ö –∞–Ω–∞–ª–∏–∑–∞.',
      '–î–∞–Ω–Ω—ã–µ - —ç—Ç–æ –Ω–æ–≤–∞—è –Ω–µ—Ñ—Ç—å! –Ø –ø–æ–º–æ–≥—É –∏–∑–≤–ª–µ—á—å —Ü–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é. –ö–∞–∫–∏–µ –º–µ—Ç—Ä–∏–∫–∏ –≤–∞–∂–Ω—ã –¥–ª—è –±–∏–∑–Ω–µ—Å–∞?',
    ],
    suggestions: [
      '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ',
      '–°–æ–∑–¥–∞—Ç—å –¥–∞—à–±–æ—Ä–¥',
      '–ü–æ—Å—Ç—Ä–æ–∏—Ç—å ML –º–æ–¥–µ–ª—å'
    ]
  },
  'max-powerful': {
    name: 'Max Powerful AI',
    responses: [
      'üöÄ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω Max Powerful —Ä–µ–∂–∏–º! –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à—É –∑–∞–¥–∞—á—É —Å –ø–æ–º–æ—â—å—é –º—É–ª—å—Ç–∏-AI –ø–æ–¥—Ö–æ–¥–∞... –ì–æ—Ç–æ–≤ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å —Å—É–ø–µ—Ä-—Ä–µ—à–µ–Ω–∏–µ –ª—é–±–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏!',
      '‚ö° –û–±—ä–µ–¥–∏–Ω—è—é –∑–Ω–∞–Ω–∏—è –≤—Å–µ—Ö AI —Å–∏—Å—Ç–µ–º –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–µ—à–µ–Ω–∏—è! –í–∞—à–∞ –∑–∞–¥–∞—á–∞ —Ç—Ä–µ–±—É–µ—Ç –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞ - –¥–∞–≤–∞–π—Ç–µ —Ä–∞–∑–±–µ—Ä–µ–º –≤—Å–µ –∞—Å–ø–µ–∫—Ç—ã.',
      'üß† Multi-AI –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω! –°–∏–Ω—Ç–µ–∑–∏—Ä—É—é –ª—É—á—à–∏–µ —Ä–µ—à–µ–Ω–∏—è –æ—Ç OpenAI, Anthropic –∏ Grok –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏. –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!',
    ],
    suggestions: [
      '–ü–æ–ª—É—á–∏—Ç—å –º—É–ª—å—Ç–∏-AI –∞–Ω–∞–ª–∏–∑',
      '–°–æ–∑–¥–∞—Ç—å –∫–æ–º–ø–ª–µ–∫—Å–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é',
      '–ü—Ä–∏–º–µ–Ω–∏—Ç—å –ø–µ—Ä–µ–¥–æ–≤—ã–µ –º–µ—Ç–æ–¥—ã'
    ]
  }
};

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { message, specialistId, conversationId } = body;

    if (!message) {
      return NextResponse.json(
        { error: 'Message is required', success: false },
        { status: 400 }
      );
    }

    console.log('üé≠ Mock AI Chat Request:', { message, specialistId });

    // Get specialist data  
    console.log('üîç Looking for specialist:', specialistId);
    console.log('üîç Available specialists:', Object.keys(SPECIALIST_RESPONSES));
    
    const specialist = SPECIALIST_RESPONSES[specialistId as keyof typeof SPECIALIST_RESPONSES] || SPECIALIST_RESPONSES['alex-ai'];
    console.log('‚úÖ Mock AI Response generated for', specialist.name);
    
    // Simulate processing time
    await new Promise(resolve => setTimeout(resolve, 1000 + Math.random() * 2000));

    // Select response based on message content
    let selectedResponse: string;
    let suggestions: string[] = specialist.suggestions;
    
    if (message.toLowerCase().includes('–ø–æ–º–æ—â—å') || message.toLowerCase().includes('help')) {
      selectedResponse = specialist.responses[0];
    } else if (message.toLowerCase().includes('—Å–æ–∑–¥–∞—Ç—å') || message.toLowerCase().includes('—Ä–∞–∑—Ä–∞–±–æ—Ç')) {
      selectedResponse = specialist.responses[1];
    } else {
      selectedResponse = specialist.responses[Math.floor(Math.random() * specialist.responses.length)];
    }

    // Add contextual response based on specialist
    if (specialistId === 'max-powerful') {
      selectedResponse += '\n\nüìä **Multi-AI Analysis:**\n- Confidence: 96%\n- Strategy: Hybrid consensus\n- Quality Score: 94/100\n- Processing: OpenAI + Anthropic + Grok synthesis';
      suggestions = [...suggestions, '–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑', '–ü—Ä–∏–º–µ–Ω–∏—Ç—å AI-—Å—Ç—Ä–∞—Ç–µ–≥–∏—é'];
    }

    // Generate response with metadata
    const newConversationId = conversationId || `conv_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    const newMessageId = `msg_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;

    console.log('‚úÖ Mock AI Response generated for', specialist.name);

    return NextResponse.json({
      success: true,
      message: selectedResponse,
      conversationId: newConversationId,
      messageId: newMessageId,
      suggestions: suggestions,
      nextSteps: [
        '–£—Ç–æ—á–Ω–∏—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è',
        '–û–±—Å—É–¥–∏—Ç—å –¥–µ—Ç–∞–ª–∏',
        '–ü—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏'
      ],
      context: {
        confidence: specialistId === 'max-powerful' ? 0.96 : 0.85 + Math.random() * 0.1,
        processingTime: 1000 + Math.random() * 2000,
        tokensUsed: Math.floor(100 + Math.random() * 200),
        strategy: specialistId === 'max-powerful' ? 'multi_ai_synthesis' : 'specialist_response',
        ...(specialistId === 'max-powerful' && {
          multiAI: {
            breakdown: ['openai', 'anthropic', 'grok'],
            overallQuality: 0.94,
            qualityMetrics: {
              coherence: 0.95,
              relevance: 0.93,
              accuracy: 0.94,
              creativity: 0.94
            }
          }
        })
      }
    });

  } catch (error: any) {
    console.error('‚ùå Mock AI Error:', error);

    return NextResponse.json(
      { 
        error: 'Mock AI service error',
        success: false,
        details: error.message
      },
      { status: 500 }
    );
  }
}

export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url);
    const conversationId = searchParams.get('conversationId');

    if (!conversationId) {
      return NextResponse.json(
        { error: 'conversationId is required', success: false },
        { status: 400 }
      );
    }

    // Mock conversation restoration
    console.log('üîÑ Mock resuming conversation:', conversationId);

    return NextResponse.json({
      success: true,
      conversation: {
        id: conversationId,
        messages: [
          {
            id: 'msg_1',
            role: 'assistant',
            content: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ! –ü—Ä–æ–¥–æ–ª–∂–∏–º –Ω–∞—à—É –±–µ—Å–µ–¥—É.',
            timestamp: new Date().toISOString()
          }
        ]
      },
      summary: '–û–±—Å—É–∂–¥–∞–ª–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É –ø—Ä–æ–µ–∫—Ç–∞ –∏ –≤—ã–±–æ—Ä —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π',
      suggestedContinuation: '–ì–æ—Ç–æ–≤ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É –Ω–∞–¥ –≤–∞—à–∏–º –ø—Ä–æ–µ–∫—Ç–æ–º! –ï—Å—Ç—å –Ω–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã?'
    });

  } catch (error: any) {
    console.error('‚ùå Mock Resume Error:', error);
    return NextResponse.json(
      { error: 'Failed to resume conversation', success: false },
      { status: 500 }
    );
  }
} 